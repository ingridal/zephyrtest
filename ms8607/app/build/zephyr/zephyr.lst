
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			if (dump_data) {
				LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
			}
		}
	}
}
   0:	80 27 00 20 69 43 00 00 57 93 00 00 3d 43 00 00     .'. iC..W...=C..
  10:	3d 43 00 00 3d 43 00 00 3d 43 00 00 00 00 00 00     =C..=C..=C......
	...
  2c:	35 3c 00 00 3d 43 00 00 00 00 00 00 dd 3b 00 00     5<..=C.......;..
  3c:	3d 43 00 00                                         =C..

00000040 <_irq_vector_table>:
  40:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  50:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  60:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  70:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  80:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  90:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  a0:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  b0:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  c0:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  d0:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  e0:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..
  f0:	e9 3c 00 00 e9 3c 00 00 e9 3c 00 00 e9 3c 00 00     .<...<...<...<..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x106>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <__data_size+0x2>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xf2>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x3c>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x24>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x24>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x86>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x82>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x9c>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xea>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xd2>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x50>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x50>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x50>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <__z_interrupt_stack_SIZEOF+0x28>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <__z_interrupt_stack_SIZEOF+0x3c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__aeabi_frsub>:
     89c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     8a0:	e002      	b.n	8a8 <__addsf3>
     8a2:	bf00      	nop

000008a4 <__aeabi_fsub>:
     8a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000008a8 <__addsf3>:
     8a8:	0042      	lsls	r2, r0, #1
     8aa:	bf1f      	itttt	ne
     8ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     8b0:	ea92 0f03 	teqne	r2, r3
     8b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     8b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     8bc:	d06a      	beq.n	994 <__addsf3+0xec>
     8be:	ea4f 6212 	mov.w	r2, r2, lsr #24
     8c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     8c6:	bfc1      	itttt	gt
     8c8:	18d2      	addgt	r2, r2, r3
     8ca:	4041      	eorgt	r1, r0
     8cc:	4048      	eorgt	r0, r1
     8ce:	4041      	eorgt	r1, r0
     8d0:	bfb8      	it	lt
     8d2:	425b      	neglt	r3, r3
     8d4:	2b19      	cmp	r3, #25
     8d6:	bf88      	it	hi
     8d8:	4770      	bxhi	lr
     8da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     8de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     8e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     8e6:	bf18      	it	ne
     8e8:	4240      	negne	r0, r0
     8ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     8f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     8f6:	bf18      	it	ne
     8f8:	4249      	negne	r1, r1
     8fa:	ea92 0f03 	teq	r2, r3
     8fe:	d03f      	beq.n	980 <__addsf3+0xd8>
     900:	f1a2 0201 	sub.w	r2, r2, #1
     904:	fa41 fc03 	asr.w	ip, r1, r3
     908:	eb10 000c 	adds.w	r0, r0, ip
     90c:	f1c3 0320 	rsb	r3, r3, #32
     910:	fa01 f103 	lsl.w	r1, r1, r3
     914:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     918:	d502      	bpl.n	920 <__addsf3+0x78>
     91a:	4249      	negs	r1, r1
     91c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     920:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     924:	d313      	bcc.n	94e <__addsf3+0xa6>
     926:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     92a:	d306      	bcc.n	93a <__addsf3+0x92>
     92c:	0840      	lsrs	r0, r0, #1
     92e:	ea4f 0131 	mov.w	r1, r1, rrx
     932:	f102 0201 	add.w	r2, r2, #1
     936:	2afe      	cmp	r2, #254	; 0xfe
     938:	d251      	bcs.n	9de <__addsf3+0x136>
     93a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     93e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     942:	bf08      	it	eq
     944:	f020 0001 	biceq.w	r0, r0, #1
     948:	ea40 0003 	orr.w	r0, r0, r3
     94c:	4770      	bx	lr
     94e:	0049      	lsls	r1, r1, #1
     950:	eb40 0000 	adc.w	r0, r0, r0
     954:	3a01      	subs	r2, #1
     956:	bf28      	it	cs
     958:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     95c:	d2ed      	bcs.n	93a <__addsf3+0x92>
     95e:	fab0 fc80 	clz	ip, r0
     962:	f1ac 0c08 	sub.w	ip, ip, #8
     966:	ebb2 020c 	subs.w	r2, r2, ip
     96a:	fa00 f00c 	lsl.w	r0, r0, ip
     96e:	bfaa      	itet	ge
     970:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     974:	4252      	neglt	r2, r2
     976:	4318      	orrge	r0, r3
     978:	bfbc      	itt	lt
     97a:	40d0      	lsrlt	r0, r2
     97c:	4318      	orrlt	r0, r3
     97e:	4770      	bx	lr
     980:	f092 0f00 	teq	r2, #0
     984:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     988:	bf06      	itte	eq
     98a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     98e:	3201      	addeq	r2, #1
     990:	3b01      	subne	r3, #1
     992:	e7b5      	b.n	900 <__addsf3+0x58>
     994:	ea4f 0341 	mov.w	r3, r1, lsl #1
     998:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     99c:	bf18      	it	ne
     99e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     9a2:	d021      	beq.n	9e8 <__addsf3+0x140>
     9a4:	ea92 0f03 	teq	r2, r3
     9a8:	d004      	beq.n	9b4 <__addsf3+0x10c>
     9aa:	f092 0f00 	teq	r2, #0
     9ae:	bf08      	it	eq
     9b0:	4608      	moveq	r0, r1
     9b2:	4770      	bx	lr
     9b4:	ea90 0f01 	teq	r0, r1
     9b8:	bf1c      	itt	ne
     9ba:	2000      	movne	r0, #0
     9bc:	4770      	bxne	lr
     9be:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     9c2:	d104      	bne.n	9ce <__addsf3+0x126>
     9c4:	0040      	lsls	r0, r0, #1
     9c6:	bf28      	it	cs
     9c8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     9cc:	4770      	bx	lr
     9ce:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     9d2:	bf3c      	itt	cc
     9d4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     9d8:	4770      	bxcc	lr
     9da:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     9de:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     9e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9e6:	4770      	bx	lr
     9e8:	ea7f 6222 	mvns.w	r2, r2, asr #24
     9ec:	bf16      	itet	ne
     9ee:	4608      	movne	r0, r1
     9f0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     9f4:	4601      	movne	r1, r0
     9f6:	0242      	lsls	r2, r0, #9
     9f8:	bf06      	itte	eq
     9fa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     9fe:	ea90 0f01 	teqeq	r0, r1
     a02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     a06:	4770      	bx	lr

00000a08 <__aeabi_ui2f>:
     a08:	f04f 0300 	mov.w	r3, #0
     a0c:	e004      	b.n	a18 <__aeabi_i2f+0x8>
     a0e:	bf00      	nop

00000a10 <__aeabi_i2f>:
     a10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     a14:	bf48      	it	mi
     a16:	4240      	negmi	r0, r0
     a18:	ea5f 0c00 	movs.w	ip, r0
     a1c:	bf08      	it	eq
     a1e:	4770      	bxeq	lr
     a20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     a24:	4601      	mov	r1, r0
     a26:	f04f 0000 	mov.w	r0, #0
     a2a:	e01c      	b.n	a66 <__aeabi_l2f+0x2a>

00000a2c <__aeabi_ul2f>:
     a2c:	ea50 0201 	orrs.w	r2, r0, r1
     a30:	bf08      	it	eq
     a32:	4770      	bxeq	lr
     a34:	f04f 0300 	mov.w	r3, #0
     a38:	e00a      	b.n	a50 <__aeabi_l2f+0x14>
     a3a:	bf00      	nop

00000a3c <__aeabi_l2f>:
     a3c:	ea50 0201 	orrs.w	r2, r0, r1
     a40:	bf08      	it	eq
     a42:	4770      	bxeq	lr
     a44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     a48:	d502      	bpl.n	a50 <__aeabi_l2f+0x14>
     a4a:	4240      	negs	r0, r0
     a4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a50:	ea5f 0c01 	movs.w	ip, r1
     a54:	bf02      	ittt	eq
     a56:	4684      	moveq	ip, r0
     a58:	4601      	moveq	r1, r0
     a5a:	2000      	moveq	r0, #0
     a5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     a60:	bf08      	it	eq
     a62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     a66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     a6a:	fabc f28c 	clz	r2, ip
     a6e:	3a08      	subs	r2, #8
     a70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     a74:	db10      	blt.n	a98 <__aeabi_l2f+0x5c>
     a76:	fa01 fc02 	lsl.w	ip, r1, r2
     a7a:	4463      	add	r3, ip
     a7c:	fa00 fc02 	lsl.w	ip, r0, r2
     a80:	f1c2 0220 	rsb	r2, r2, #32
     a84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     a88:	fa20 f202 	lsr.w	r2, r0, r2
     a8c:	eb43 0002 	adc.w	r0, r3, r2
     a90:	bf08      	it	eq
     a92:	f020 0001 	biceq.w	r0, r0, #1
     a96:	4770      	bx	lr
     a98:	f102 0220 	add.w	r2, r2, #32
     a9c:	fa01 fc02 	lsl.w	ip, r1, r2
     aa0:	f1c2 0220 	rsb	r2, r2, #32
     aa4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     aa8:	fa21 f202 	lsr.w	r2, r1, r2
     aac:	eb43 0002 	adc.w	r0, r3, r2
     ab0:	bf08      	it	eq
     ab2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     ab6:	4770      	bx	lr

00000ab8 <__aeabi_fmul>:
     ab8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     abc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     ac0:	bf1e      	ittt	ne
     ac2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     ac6:	ea92 0f0c 	teqne	r2, ip
     aca:	ea93 0f0c 	teqne	r3, ip
     ace:	d06f      	beq.n	bb0 <__aeabi_fmul+0xf8>
     ad0:	441a      	add	r2, r3
     ad2:	ea80 0c01 	eor.w	ip, r0, r1
     ad6:	0240      	lsls	r0, r0, #9
     ad8:	bf18      	it	ne
     ada:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     ade:	d01e      	beq.n	b1e <__aeabi_fmul+0x66>
     ae0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     ae4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     ae8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     aec:	fba0 3101 	umull	r3, r1, r0, r1
     af0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     af4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     af8:	bf3e      	ittt	cc
     afa:	0049      	lslcc	r1, r1, #1
     afc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     b00:	005b      	lslcc	r3, r3, #1
     b02:	ea40 0001 	orr.w	r0, r0, r1
     b06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     b0a:	2afd      	cmp	r2, #253	; 0xfd
     b0c:	d81d      	bhi.n	b4a <__aeabi_fmul+0x92>
     b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     b12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b16:	bf08      	it	eq
     b18:	f020 0001 	biceq.w	r0, r0, #1
     b1c:	4770      	bx	lr
     b1e:	f090 0f00 	teq	r0, #0
     b22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     b26:	bf08      	it	eq
     b28:	0249      	lsleq	r1, r1, #9
     b2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     b2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     b32:	3a7f      	subs	r2, #127	; 0x7f
     b34:	bfc2      	ittt	gt
     b36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     b3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     b3e:	4770      	bxgt	lr
     b40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b44:	f04f 0300 	mov.w	r3, #0
     b48:	3a01      	subs	r2, #1
     b4a:	dc5d      	bgt.n	c08 <__aeabi_fmul+0x150>
     b4c:	f112 0f19 	cmn.w	r2, #25
     b50:	bfdc      	itt	le
     b52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     b56:	4770      	bxle	lr
     b58:	f1c2 0200 	rsb	r2, r2, #0
     b5c:	0041      	lsls	r1, r0, #1
     b5e:	fa21 f102 	lsr.w	r1, r1, r2
     b62:	f1c2 0220 	rsb	r2, r2, #32
     b66:	fa00 fc02 	lsl.w	ip, r0, r2
     b6a:	ea5f 0031 	movs.w	r0, r1, rrx
     b6e:	f140 0000 	adc.w	r0, r0, #0
     b72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     b76:	bf08      	it	eq
     b78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b7c:	4770      	bx	lr
     b7e:	f092 0f00 	teq	r2, #0
     b82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     b86:	bf02      	ittt	eq
     b88:	0040      	lsleq	r0, r0, #1
     b8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     b8e:	3a01      	subeq	r2, #1
     b90:	d0f9      	beq.n	b86 <__aeabi_fmul+0xce>
     b92:	ea40 000c 	orr.w	r0, r0, ip
     b96:	f093 0f00 	teq	r3, #0
     b9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     b9e:	bf02      	ittt	eq
     ba0:	0049      	lsleq	r1, r1, #1
     ba2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     ba6:	3b01      	subeq	r3, #1
     ba8:	d0f9      	beq.n	b9e <__aeabi_fmul+0xe6>
     baa:	ea41 010c 	orr.w	r1, r1, ip
     bae:	e78f      	b.n	ad0 <__aeabi_fmul+0x18>
     bb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     bb4:	ea92 0f0c 	teq	r2, ip
     bb8:	bf18      	it	ne
     bba:	ea93 0f0c 	teqne	r3, ip
     bbe:	d00a      	beq.n	bd6 <__aeabi_fmul+0x11e>
     bc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     bc4:	bf18      	it	ne
     bc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     bca:	d1d8      	bne.n	b7e <__aeabi_fmul+0xc6>
     bcc:	ea80 0001 	eor.w	r0, r0, r1
     bd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     bd4:	4770      	bx	lr
     bd6:	f090 0f00 	teq	r0, #0
     bda:	bf17      	itett	ne
     bdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     be0:	4608      	moveq	r0, r1
     be2:	f091 0f00 	teqne	r1, #0
     be6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     bea:	d014      	beq.n	c16 <__aeabi_fmul+0x15e>
     bec:	ea92 0f0c 	teq	r2, ip
     bf0:	d101      	bne.n	bf6 <__aeabi_fmul+0x13e>
     bf2:	0242      	lsls	r2, r0, #9
     bf4:	d10f      	bne.n	c16 <__aeabi_fmul+0x15e>
     bf6:	ea93 0f0c 	teq	r3, ip
     bfa:	d103      	bne.n	c04 <__aeabi_fmul+0x14c>
     bfc:	024b      	lsls	r3, r1, #9
     bfe:	bf18      	it	ne
     c00:	4608      	movne	r0, r1
     c02:	d108      	bne.n	c16 <__aeabi_fmul+0x15e>
     c04:	ea80 0001 	eor.w	r0, r0, r1
     c08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c14:	4770      	bx	lr
     c16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     c1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     c1e:	4770      	bx	lr

00000c20 <__aeabi_fdiv>:
     c20:	f04f 0cff 	mov.w	ip, #255	; 0xff
     c24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     c28:	bf1e      	ittt	ne
     c2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     c2e:	ea92 0f0c 	teqne	r2, ip
     c32:	ea93 0f0c 	teqne	r3, ip
     c36:	d069      	beq.n	d0c <__aeabi_fdiv+0xec>
     c38:	eba2 0203 	sub.w	r2, r2, r3
     c3c:	ea80 0c01 	eor.w	ip, r0, r1
     c40:	0249      	lsls	r1, r1, #9
     c42:	ea4f 2040 	mov.w	r0, r0, lsl #9
     c46:	d037      	beq.n	cb8 <__aeabi_fdiv+0x98>
     c48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     c4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     c50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     c54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     c58:	428b      	cmp	r3, r1
     c5a:	bf38      	it	cc
     c5c:	005b      	lslcc	r3, r3, #1
     c5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     c62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     c66:	428b      	cmp	r3, r1
     c68:	bf24      	itt	cs
     c6a:	1a5b      	subcs	r3, r3, r1
     c6c:	ea40 000c 	orrcs.w	r0, r0, ip
     c70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     c74:	bf24      	itt	cs
     c76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     c7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     c7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     c82:	bf24      	itt	cs
     c84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     c88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     c8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     c90:	bf24      	itt	cs
     c92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     c96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     c9a:	011b      	lsls	r3, r3, #4
     c9c:	bf18      	it	ne
     c9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     ca2:	d1e0      	bne.n	c66 <__aeabi_fdiv+0x46>
     ca4:	2afd      	cmp	r2, #253	; 0xfd
     ca6:	f63f af50 	bhi.w	b4a <__aeabi_fmul+0x92>
     caa:	428b      	cmp	r3, r1
     cac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     cb0:	bf08      	it	eq
     cb2:	f020 0001 	biceq.w	r0, r0, #1
     cb6:	4770      	bx	lr
     cb8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     cbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     cc0:	327f      	adds	r2, #127	; 0x7f
     cc2:	bfc2      	ittt	gt
     cc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     cc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     ccc:	4770      	bxgt	lr
     cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cd2:	f04f 0300 	mov.w	r3, #0
     cd6:	3a01      	subs	r2, #1
     cd8:	e737      	b.n	b4a <__aeabi_fmul+0x92>
     cda:	f092 0f00 	teq	r2, #0
     cde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     ce2:	bf02      	ittt	eq
     ce4:	0040      	lsleq	r0, r0, #1
     ce6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     cea:	3a01      	subeq	r2, #1
     cec:	d0f9      	beq.n	ce2 <__aeabi_fdiv+0xc2>
     cee:	ea40 000c 	orr.w	r0, r0, ip
     cf2:	f093 0f00 	teq	r3, #0
     cf6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     cfa:	bf02      	ittt	eq
     cfc:	0049      	lsleq	r1, r1, #1
     cfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     d02:	3b01      	subeq	r3, #1
     d04:	d0f9      	beq.n	cfa <__aeabi_fdiv+0xda>
     d06:	ea41 010c 	orr.w	r1, r1, ip
     d0a:	e795      	b.n	c38 <__aeabi_fdiv+0x18>
     d0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     d10:	ea92 0f0c 	teq	r2, ip
     d14:	d108      	bne.n	d28 <__aeabi_fdiv+0x108>
     d16:	0242      	lsls	r2, r0, #9
     d18:	f47f af7d 	bne.w	c16 <__aeabi_fmul+0x15e>
     d1c:	ea93 0f0c 	teq	r3, ip
     d20:	f47f af70 	bne.w	c04 <__aeabi_fmul+0x14c>
     d24:	4608      	mov	r0, r1
     d26:	e776      	b.n	c16 <__aeabi_fmul+0x15e>
     d28:	ea93 0f0c 	teq	r3, ip
     d2c:	d104      	bne.n	d38 <__aeabi_fdiv+0x118>
     d2e:	024b      	lsls	r3, r1, #9
     d30:	f43f af4c 	beq.w	bcc <__aeabi_fmul+0x114>
     d34:	4608      	mov	r0, r1
     d36:	e76e      	b.n	c16 <__aeabi_fmul+0x15e>
     d38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     d3c:	bf18      	it	ne
     d3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     d42:	d1ca      	bne.n	cda <__aeabi_fdiv+0xba>
     d44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     d48:	f47f af5c 	bne.w	c04 <__aeabi_fmul+0x14c>
     d4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     d50:	f47f af3c 	bne.w	bcc <__aeabi_fmul+0x114>
     d54:	e75f      	b.n	c16 <__aeabi_fmul+0x15e>
     d56:	bf00      	nop

00000d58 <__aeabi_f2iz>:
     d58:	ea4f 0240 	mov.w	r2, r0, lsl #1
     d5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     d60:	d30f      	bcc.n	d82 <__aeabi_f2iz+0x2a>
     d62:	f04f 039e 	mov.w	r3, #158	; 0x9e
     d66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     d6a:	d90d      	bls.n	d88 <__aeabi_f2iz+0x30>
     d6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
     d70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     d74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     d78:	fa23 f002 	lsr.w	r0, r3, r2
     d7c:	bf18      	it	ne
     d7e:	4240      	negne	r0, r0
     d80:	4770      	bx	lr
     d82:	f04f 0000 	mov.w	r0, #0
     d86:	4770      	bx	lr
     d88:	f112 0f61 	cmn.w	r2, #97	; 0x61
     d8c:	d101      	bne.n	d92 <__aeabi_f2iz+0x3a>
     d8e:	0242      	lsls	r2, r0, #9
     d90:	d105      	bne.n	d9e <__aeabi_f2iz+0x46>
     d92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     d96:	bf08      	it	eq
     d98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     d9c:	4770      	bx	lr
     d9e:	f04f 0000 	mov.w	r0, #0
     da2:	4770      	bx	lr

00000da4 <__aeabi_uldivmod>:
     da4:	b953      	cbnz	r3, dbc <__aeabi_uldivmod+0x18>
     da6:	b94a      	cbnz	r2, dbc <__aeabi_uldivmod+0x18>
     da8:	2900      	cmp	r1, #0
     daa:	bf08      	it	eq
     dac:	2800      	cmpeq	r0, #0
     dae:	bf1c      	itt	ne
     db0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     db4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     db8:	f000 b80c 	b.w	dd4 <__aeabi_idiv0>
     dbc:	f1ad 0c08 	sub.w	ip, sp, #8
     dc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     dc4:	f000 f808 	bl	dd8 <__udivmoddi4>
     dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
     dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     dd0:	b004      	add	sp, #16
     dd2:	4770      	bx	lr

00000dd4 <__aeabi_idiv0>:
     dd4:	4770      	bx	lr
     dd6:	bf00      	nop

00000dd8 <__udivmoddi4>:
     dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ddc:	4686      	mov	lr, r0
     dde:	468c      	mov	ip, r1
     de0:	4608      	mov	r0, r1
     de2:	9e08      	ldr	r6, [sp, #32]
     de4:	4615      	mov	r5, r2
     de6:	4674      	mov	r4, lr
     de8:	4619      	mov	r1, r3
     dea:	2b00      	cmp	r3, #0
     dec:	f040 80c2 	bne.w	f74 <__udivmoddi4+0x19c>
     df0:	4285      	cmp	r5, r0
     df2:	fab2 f282 	clz	r2, r2
     df6:	d945      	bls.n	e84 <__udivmoddi4+0xac>
     df8:	b14a      	cbz	r2, e0e <__udivmoddi4+0x36>
     dfa:	f1c2 0320 	rsb	r3, r2, #32
     dfe:	fa00 fc02 	lsl.w	ip, r0, r2
     e02:	fa2e f303 	lsr.w	r3, lr, r3
     e06:	4095      	lsls	r5, r2
     e08:	ea43 0c0c 	orr.w	ip, r3, ip
     e0c:	4094      	lsls	r4, r2
     e0e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     e12:	b2a8      	uxth	r0, r5
     e14:	fbbc f8fe 	udiv	r8, ip, lr
     e18:	0c23      	lsrs	r3, r4, #16
     e1a:	fb0e cc18 	mls	ip, lr, r8, ip
     e1e:	fb08 f900 	mul.w	r9, r8, r0
     e22:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     e26:	4599      	cmp	r9, r3
     e28:	d928      	bls.n	e7c <__udivmoddi4+0xa4>
     e2a:	18eb      	adds	r3, r5, r3
     e2c:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     e30:	d204      	bcs.n	e3c <__udivmoddi4+0x64>
     e32:	4599      	cmp	r9, r3
     e34:	d902      	bls.n	e3c <__udivmoddi4+0x64>
     e36:	f1a8 0702 	sub.w	r7, r8, #2
     e3a:	442b      	add	r3, r5
     e3c:	eba3 0309 	sub.w	r3, r3, r9
     e40:	b2a4      	uxth	r4, r4
     e42:	fbb3 fcfe 	udiv	ip, r3, lr
     e46:	fb0e 331c 	mls	r3, lr, ip, r3
     e4a:	fb0c f000 	mul.w	r0, ip, r0
     e4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     e52:	42a0      	cmp	r0, r4
     e54:	d914      	bls.n	e80 <__udivmoddi4+0xa8>
     e56:	192c      	adds	r4, r5, r4
     e58:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     e5c:	d204      	bcs.n	e68 <__udivmoddi4+0x90>
     e5e:	42a0      	cmp	r0, r4
     e60:	d902      	bls.n	e68 <__udivmoddi4+0x90>
     e62:	f1ac 0302 	sub.w	r3, ip, #2
     e66:	442c      	add	r4, r5
     e68:	1a24      	subs	r4, r4, r0
     e6a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     e6e:	b11e      	cbz	r6, e78 <__udivmoddi4+0xa0>
     e70:	40d4      	lsrs	r4, r2
     e72:	2300      	movs	r3, #0
     e74:	6034      	str	r4, [r6, #0]
     e76:	6073      	str	r3, [r6, #4]
     e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e7c:	4647      	mov	r7, r8
     e7e:	e7dd      	b.n	e3c <__udivmoddi4+0x64>
     e80:	4663      	mov	r3, ip
     e82:	e7f1      	b.n	e68 <__udivmoddi4+0x90>
     e84:	bb92      	cbnz	r2, eec <__udivmoddi4+0x114>
     e86:	1b43      	subs	r3, r0, r5
     e88:	2101      	movs	r1, #1
     e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     e8e:	b2af      	uxth	r7, r5
     e90:	fbb3 fcfe 	udiv	ip, r3, lr
     e94:	0c20      	lsrs	r0, r4, #16
     e96:	fb0e 331c 	mls	r3, lr, ip, r3
     e9a:	fb0c f807 	mul.w	r8, ip, r7
     e9e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     ea2:	4598      	cmp	r8, r3
     ea4:	d962      	bls.n	f6c <__udivmoddi4+0x194>
     ea6:	18eb      	adds	r3, r5, r3
     ea8:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     eac:	d204      	bcs.n	eb8 <__udivmoddi4+0xe0>
     eae:	4598      	cmp	r8, r3
     eb0:	d902      	bls.n	eb8 <__udivmoddi4+0xe0>
     eb2:	f1ac 0002 	sub.w	r0, ip, #2
     eb6:	442b      	add	r3, r5
     eb8:	eba3 0308 	sub.w	r3, r3, r8
     ebc:	b2a4      	uxth	r4, r4
     ebe:	fbb3 fcfe 	udiv	ip, r3, lr
     ec2:	fb0e 331c 	mls	r3, lr, ip, r3
     ec6:	fb0c f707 	mul.w	r7, ip, r7
     eca:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ece:	42a7      	cmp	r7, r4
     ed0:	d94e      	bls.n	f70 <__udivmoddi4+0x198>
     ed2:	192c      	adds	r4, r5, r4
     ed4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     ed8:	d204      	bcs.n	ee4 <__udivmoddi4+0x10c>
     eda:	42a7      	cmp	r7, r4
     edc:	d902      	bls.n	ee4 <__udivmoddi4+0x10c>
     ede:	f1ac 0302 	sub.w	r3, ip, #2
     ee2:	442c      	add	r4, r5
     ee4:	1be4      	subs	r4, r4, r7
     ee6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     eea:	e7c0      	b.n	e6e <__udivmoddi4+0x96>
     eec:	f1c2 0320 	rsb	r3, r2, #32
     ef0:	fa20 f103 	lsr.w	r1, r0, r3
     ef4:	4095      	lsls	r5, r2
     ef6:	4090      	lsls	r0, r2
     ef8:	fa2e f303 	lsr.w	r3, lr, r3
     efc:	4303      	orrs	r3, r0
     efe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     f02:	b2af      	uxth	r7, r5
     f04:	fbb1 fcfe 	udiv	ip, r1, lr
     f08:	fb0e 101c 	mls	r0, lr, ip, r1
     f0c:	0c19      	lsrs	r1, r3, #16
     f0e:	fb0c f807 	mul.w	r8, ip, r7
     f12:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     f16:	4588      	cmp	r8, r1
     f18:	fa04 f402 	lsl.w	r4, r4, r2
     f1c:	d922      	bls.n	f64 <__udivmoddi4+0x18c>
     f1e:	1869      	adds	r1, r5, r1
     f20:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     f24:	d204      	bcs.n	f30 <__udivmoddi4+0x158>
     f26:	4588      	cmp	r8, r1
     f28:	d902      	bls.n	f30 <__udivmoddi4+0x158>
     f2a:	f1ac 0002 	sub.w	r0, ip, #2
     f2e:	4429      	add	r1, r5
     f30:	eba1 0108 	sub.w	r1, r1, r8
     f34:	b29b      	uxth	r3, r3
     f36:	fbb1 fcfe 	udiv	ip, r1, lr
     f3a:	fb0e 111c 	mls	r1, lr, ip, r1
     f3e:	fb0c f707 	mul.w	r7, ip, r7
     f42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     f46:	429f      	cmp	r7, r3
     f48:	d90e      	bls.n	f68 <__udivmoddi4+0x190>
     f4a:	18eb      	adds	r3, r5, r3
     f4c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     f50:	d204      	bcs.n	f5c <__udivmoddi4+0x184>
     f52:	429f      	cmp	r7, r3
     f54:	d902      	bls.n	f5c <__udivmoddi4+0x184>
     f56:	f1ac 0102 	sub.w	r1, ip, #2
     f5a:	442b      	add	r3, r5
     f5c:	1bdb      	subs	r3, r3, r7
     f5e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     f62:	e792      	b.n	e8a <__udivmoddi4+0xb2>
     f64:	4660      	mov	r0, ip
     f66:	e7e3      	b.n	f30 <__udivmoddi4+0x158>
     f68:	4661      	mov	r1, ip
     f6a:	e7f7      	b.n	f5c <__udivmoddi4+0x184>
     f6c:	4660      	mov	r0, ip
     f6e:	e7a3      	b.n	eb8 <__udivmoddi4+0xe0>
     f70:	4663      	mov	r3, ip
     f72:	e7b7      	b.n	ee4 <__udivmoddi4+0x10c>
     f74:	4283      	cmp	r3, r0
     f76:	d906      	bls.n	f86 <__udivmoddi4+0x1ae>
     f78:	b916      	cbnz	r6, f80 <__udivmoddi4+0x1a8>
     f7a:	2100      	movs	r1, #0
     f7c:	4608      	mov	r0, r1
     f7e:	e77b      	b.n	e78 <__udivmoddi4+0xa0>
     f80:	e9c6 e000 	strd	lr, r0, [r6]
     f84:	e7f9      	b.n	f7a <__udivmoddi4+0x1a2>
     f86:	fab3 f783 	clz	r7, r3
     f8a:	b98f      	cbnz	r7, fb0 <__udivmoddi4+0x1d8>
     f8c:	4283      	cmp	r3, r0
     f8e:	d301      	bcc.n	f94 <__udivmoddi4+0x1bc>
     f90:	4572      	cmp	r2, lr
     f92:	d808      	bhi.n	fa6 <__udivmoddi4+0x1ce>
     f94:	ebbe 0402 	subs.w	r4, lr, r2
     f98:	eb60 0303 	sbc.w	r3, r0, r3
     f9c:	2001      	movs	r0, #1
     f9e:	469c      	mov	ip, r3
     fa0:	b91e      	cbnz	r6, faa <__udivmoddi4+0x1d2>
     fa2:	2100      	movs	r1, #0
     fa4:	e768      	b.n	e78 <__udivmoddi4+0xa0>
     fa6:	4638      	mov	r0, r7
     fa8:	e7fa      	b.n	fa0 <__udivmoddi4+0x1c8>
     faa:	e9c6 4c00 	strd	r4, ip, [r6]
     fae:	e7f8      	b.n	fa2 <__udivmoddi4+0x1ca>
     fb0:	f1c7 0c20 	rsb	ip, r7, #32
     fb4:	40bb      	lsls	r3, r7
     fb6:	fa22 f40c 	lsr.w	r4, r2, ip
     fba:	431c      	orrs	r4, r3
     fbc:	fa2e f10c 	lsr.w	r1, lr, ip
     fc0:	fa20 f30c 	lsr.w	r3, r0, ip
     fc4:	40b8      	lsls	r0, r7
     fc6:	4301      	orrs	r1, r0
     fc8:	ea4f 4914 	mov.w	r9, r4, lsr #16
     fcc:	fa0e f507 	lsl.w	r5, lr, r7
     fd0:	fbb3 f8f9 	udiv	r8, r3, r9
     fd4:	fa1f fe84 	uxth.w	lr, r4
     fd8:	fb09 3018 	mls	r0, r9, r8, r3
     fdc:	0c0b      	lsrs	r3, r1, #16
     fde:	fb08 fa0e 	mul.w	sl, r8, lr
     fe2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     fe6:	459a      	cmp	sl, r3
     fe8:	fa02 f207 	lsl.w	r2, r2, r7
     fec:	d940      	bls.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
     fee:	18e3      	adds	r3, r4, r3
     ff0:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     ff4:	d204      	bcs.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     ff6:	459a      	cmp	sl, r3
     ff8:	d902      	bls.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     ffa:	f1a8 0002 	sub.w	r0, r8, #2
     ffe:	4423      	add	r3, r4
    1000:	eba3 030a 	sub.w	r3, r3, sl
    1004:	b289      	uxth	r1, r1
    1006:	fbb3 f8f9 	udiv	r8, r3, r9
    100a:	fb09 3318 	mls	r3, r9, r8, r3
    100e:	fb08 fe0e 	mul.w	lr, r8, lr
    1012:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    1016:	458e      	cmp	lr, r1
    1018:	d92c      	bls.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
    101a:	1861      	adds	r1, r4, r1
    101c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    1020:	d204      	bcs.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    1022:	458e      	cmp	lr, r1
    1024:	d902      	bls.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
    1026:	f1a8 0302 	sub.w	r3, r8, #2
    102a:	4421      	add	r1, r4
    102c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1030:	fba0 9802 	umull	r9, r8, r0, r2
    1034:	eba1 010e 	sub.w	r1, r1, lr
    1038:	4541      	cmp	r1, r8
    103a:	46ce      	mov	lr, r9
    103c:	4643      	mov	r3, r8
    103e:	d302      	bcc.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
    1040:	d106      	bne.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
    1042:	454d      	cmp	r5, r9
    1044:	d204      	bcs.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
    1046:	ebb9 0e02 	subs.w	lr, r9, r2
    104a:	eb68 0304 	sbc.w	r3, r8, r4
    104e:	3801      	subs	r0, #1
    1050:	2e00      	cmp	r6, #0
    1052:	d0a6      	beq.n	fa2 <__udivmoddi4+0x1ca>
    1054:	ebb5 020e 	subs.w	r2, r5, lr
    1058:	eb61 0103 	sbc.w	r1, r1, r3
    105c:	fa01 fc0c 	lsl.w	ip, r1, ip
    1060:	fa22 f307 	lsr.w	r3, r2, r7
    1064:	ea4c 0303 	orr.w	r3, ip, r3
    1068:	40f9      	lsrs	r1, r7
    106a:	e9c6 3100 	strd	r3, r1, [r6]
    106e:	e798      	b.n	fa2 <__udivmoddi4+0x1ca>
    1070:	4640      	mov	r0, r8
    1072:	e7c5      	b.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
    1074:	4643      	mov	r3, r8
    1076:	e7d9      	b.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>

00001078 <main>:
LOG_MODULE_REGISTER(main, CONFIG_APP_LOG_LEVEL);

#include <sensor/ms8607.h>

void main(void)
{
    1078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    107c:	b093      	sub	sp, #76	; 0x4c
	int ret;
	const struct device *ms8607_pt_dev;
	const struct device *ms8607_h_dev;
	struct sensor_value humidity, pressure, temperature;
	enum ms8607_battery_status bat_status;
	LOG_INF("MS8607 PHT Sensor Example Application - Version %s", APP_VERSION_STR);
    107e:	466e      	mov	r6, sp
{
    1080:	af04      	add	r7, sp, #16
	LOG_INF("MS8607 PHT Sensor Example Application - Version %s", APP_VERSION_STR);
    1082:	b088      	sub	sp, #32
    1084:	aa04      	add	r2, sp, #16
    1086:	4b7a      	ldr	r3, [pc, #488]	; (1270 <main+0x1f8>)
    1088:	6153      	str	r3, [r2, #20]
    108a:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 1274 <main+0x1fc>
    108e:	4b7a      	ldr	r3, [pc, #488]	; (1278 <main+0x200>)
    1090:	6193      	str	r3, [r2, #24]
    1092:	f44f 7900 	mov.w	r9, #512	; 0x200
    1096:	f8a2 901c 	strh.w	r9, [r2, #28]
    109a:	f842 8f10 	str.w	r8, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
    109e:	4877      	ldr	r0, [pc, #476]	; (127c <main+0x204>)
    10a0:	2300      	movs	r3, #0
    10a2:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    10a6:	f001 fef9 	bl	2e9c <z_impl_z_log_msg_static_create>
    10aa:	46b5      	mov	sp, r6
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    10ac:	4c74      	ldr	r4, [pc, #464]	; (1280 <main+0x208>)
    10ae:	4620      	mov	r0, r4
    10b0:	f008 fd16 	bl	9ae0 <z_device_is_ready>

	ms8607_h_dev = DEVICE_DT_GET_ONE(te_ms8607h);
	if (!device_is_ready(ms8607_h_dev)) {
    10b4:	4603      	mov	r3, r0
    10b6:	b998      	cbnz	r0, 10e0 <main+0x68>
		LOG_ERR("Sensor %s not ready", ms8607_h_dev->name);
    10b8:	6821      	ldr	r1, [r4, #0]
		return;
	}

	ms8607_pt_dev = DEVICE_DT_GET_ONE(te_ms8607pt);
	if (!device_is_ready(ms8607_pt_dev)) {
		LOG_ERR("Sensor %s not ready", ms8607_pt_dev->name);
    10ba:	b088      	sub	sp, #32
    10bc:	aa04      	add	r2, sp, #16
    10be:	4871      	ldr	r0, [pc, #452]	; (1284 <main+0x20c>)
    10c0:	f8a2 901c 	strh.w	r9, [r2, #28]
    10c4:	e9c2 0105 	strd	r0, r1, [r2, #20]
    10c8:	f842 8f10 	str.w	r8, [r2, #16]!
    10cc:	486b      	ldr	r0, [pc, #428]	; (127c <main+0x204>)
    10ce:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    10d2:	f001 fee3 	bl	2e9c <z_impl_z_log_msg_static_create>
    10d6:	46b5      	mov	sp, r6
		       sensor_value_to_double(&temperature),
		       sensor_value_to_double(&humidity),
		       sensor_value_to_double(&pressure));
		k_sleep(K_MSEC(1000));
	}
}
    10d8:	373c      	adds	r7, #60	; 0x3c
    10da:	46bd      	mov	sp, r7
    10dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10e0:	4d69      	ldr	r5, [pc, #420]	; (1288 <main+0x210>)
    10e2:	4628      	mov	r0, r5
    10e4:	f008 fcfc 	bl	9ae0 <z_device_is_ready>
	if (!device_is_ready(ms8607_pt_dev)) {
    10e8:	4603      	mov	r3, r0
    10ea:	b908      	cbnz	r0, 10f0 <main+0x78>
		LOG_ERR("Sensor %s not ready", ms8607_pt_dev->name);
    10ec:	6829      	ldr	r1, [r5, #0]
    10ee:	e7e4      	b.n	10ba <main+0x42>
	ret = ms8607_enable_heater(ms8607_h_dev);
    10f0:	4620      	mov	r0, r4
    10f2:	f004 ff9f 	bl	6034 <ms8607_enable_heater>
	if (ret != 0) {
    10f6:	b160      	cbz	r0, 1112 <main+0x9a>
		LOG_ERR("Failed to enable heater");
    10f8:	4b64      	ldr	r3, [pc, #400]	; (128c <main+0x214>)
    10fa:	637b      	str	r3, [r7, #52]	; 0x34
    10fc:	2302      	movs	r3, #2
    10fe:	633b      	str	r3, [r7, #48]	; 0x30
    1100:	2300      	movs	r3, #0
    1102:	485e      	ldr	r0, [pc, #376]	; (127c <main+0x204>)
    1104:	f107 0230 	add.w	r2, r7, #48	; 0x30
    1108:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    110c:	f001 fec6 	bl	2e9c <z_impl_z_log_msg_static_create>
		return;
    1110:	e7e2      	b.n	10d8 <main+0x60>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    1112:	2100      	movs	r1, #0
    1114:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1118:	f006 ff7c 	bl	8014 <z_impl_k_sleep>
	ret = ms8607_disable_heater(ms8607_h_dev);
    111c:	4620      	mov	r0, r4
    111e:	f004 ffb7 	bl	6090 <ms8607_disable_heater>
	if (ret != 0) {
    1122:	4682      	mov	sl, r0
    1124:	2800      	cmp	r0, #0
    1126:	d1e7      	bne.n	10f8 <main+0x80>
	ret = ms8607_get_battery_status(ms8607_h_dev, &bat_status);
    1128:	f107 010f 	add.w	r1, r7, #15
    112c:	4620      	mov	r0, r4
    112e:	f004 ffdd 	bl	60ec <ms8607_get_battery_status>
	if (ret != 0) {
    1132:	4603      	mov	r3, r0
    1134:	b128      	cbz	r0, 1142 <main+0xca>
		LOG_ERR("Failed to get battery status");
    1136:	4b56      	ldr	r3, [pc, #344]	; (1290 <main+0x218>)
    1138:	637b      	str	r3, [r7, #52]	; 0x34
    113a:	2302      	movs	r3, #2
    113c:	633b      	str	r3, [r7, #48]	; 0x30
    113e:	4653      	mov	r3, sl
    1140:	e7df      	b.n	1102 <main+0x8a>
	LOG_INF("Battery status %s", bat_status == ms8607_battery_ok ? "Okay" : "Not Okay");
    1142:	7bf8      	ldrb	r0, [r7, #15]
    1144:	4a53      	ldr	r2, [pc, #332]	; (1294 <main+0x21c>)
    1146:	4954      	ldr	r1, [pc, #336]	; (1298 <main+0x220>)
    1148:	b088      	sub	sp, #32
    114a:	2800      	cmp	r0, #0
    114c:	bf08      	it	eq
    114e:	4611      	moveq	r1, r2
    1150:	aa04      	add	r2, sp, #16
    1152:	4852      	ldr	r0, [pc, #328]	; (129c <main+0x224>)
    1154:	f8a2 901c 	strh.w	r9, [r2, #28]
    1158:	e9c2 0105 	strd	r0, r1, [r2, #20]
    115c:	f842 8f10 	str.w	r8, [r2, #16]!
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
    1160:	f20f 1904 	addw	r9, pc, #260	; 0x104
    1164:	e9d9 8900 	ldrd	r8, r9, [r9]
    1168:	4844      	ldr	r0, [pc, #272]	; (127c <main+0x204>)
    116a:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
    116e:	f001 fe95 	bl	2e9c <z_impl_z_log_msg_static_create>
    1172:	46b5      	mov	sp, r6
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    1174:	68ab      	ldr	r3, [r5, #8]
    1176:	2139      	movs	r1, #57	; 0x39
    1178:	68db      	ldr	r3, [r3, #12]
    117a:	4628      	mov	r0, r5
    117c:	4798      	blx	r3
		if (ret < 0) {
    117e:	2800      	cmp	r0, #0
    1180:	da10      	bge.n	11a4 <main+0x12c>
			LOG_ERR("Could not fetch sample (%d)", ret);
    1182:	466c      	mov	r4, sp
    1184:	b088      	sub	sp, #32
    1186:	aa04      	add	r2, sp, #16
    1188:	4b45      	ldr	r3, [pc, #276]	; (12a0 <main+0x228>)
    118a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    118e:	2303      	movs	r3, #3
    1190:	f842 3f10 	str.w	r3, [r2, #16]!
    1194:	4839      	ldr	r0, [pc, #228]	; (127c <main+0x204>)
    1196:	2300      	movs	r3, #0
    1198:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    119c:	f001 fe7e 	bl	2e9c <z_impl_z_log_msg_static_create>
    11a0:	46a5      	mov	sp, r4
			return;
    11a2:	e799      	b.n	10d8 <main+0x60>
    11a4:	68a3      	ldr	r3, [r4, #8]
    11a6:	2139      	movs	r1, #57	; 0x39
    11a8:	68db      	ldr	r3, [r3, #12]
    11aa:	4620      	mov	r0, r4
    11ac:	4798      	blx	r3
		if (ret < 0) {
    11ae:	2800      	cmp	r0, #0
    11b0:	dbe7      	blt.n	1182 <main+0x10a>
		sensor_channel_get(ms8607_pt_dev, SENSOR_CHAN_AMBIENT_TEMP, &temperature);
    11b2:	f107 0220 	add.w	r2, r7, #32
    11b6:	4628      	mov	r0, r5
    11b8:	210d      	movs	r1, #13
    11ba:	f007 fba1 	bl	8900 <sensor_channel_get.isra.0>
		sensor_channel_get(ms8607_pt_dev, SENSOR_CHAN_PRESS, &pressure);
    11be:	f107 0218 	add.w	r2, r7, #24
    11c2:	4628      	mov	r0, r5
    11c4:	210e      	movs	r1, #14
    11c6:	f007 fb9b 	bl	8900 <sensor_channel_get.isra.0>
		sensor_channel_get(ms8607_h_dev, SENSOR_CHAN_HUMIDITY, &humidity);
    11ca:	f107 0210 	add.w	r2, r7, #16
    11ce:	4620      	mov	r0, r4
    11d0:	2110      	movs	r1, #16
    11d2:	f007 fb95 	bl	8900 <sensor_channel_get.isra.0>
	return (double)val->val1 + (double)val->val2 / 1000000;
    11d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    11d8:	f7ff f8e4 	bl	3a4 <__aeabi_i2d>
    11dc:	4642      	mov	r2, r8
    11de:	464b      	mov	r3, r9
    11e0:	f7ff fa74 	bl	6cc <__aeabi_ddiv>
    11e4:	4682      	mov	sl, r0
    11e6:	6a38      	ldr	r0, [r7, #32]
    11e8:	468b      	mov	fp, r1
    11ea:	f7ff f8db 	bl	3a4 <__aeabi_i2d>
    11ee:	4602      	mov	r2, r0
    11f0:	460b      	mov	r3, r1
    11f2:	4650      	mov	r0, sl
    11f4:	4659      	mov	r1, fp
    11f6:	f7fe ff89 	bl	10c <__adddf3>
    11fa:	e9c7 0100 	strd	r0, r1, [r7]
    11fe:	69f8      	ldr	r0, [r7, #28]
    1200:	f7ff f8d0 	bl	3a4 <__aeabi_i2d>
    1204:	4642      	mov	r2, r8
    1206:	464b      	mov	r3, r9
    1208:	f7ff fa60 	bl	6cc <__aeabi_ddiv>
    120c:	4682      	mov	sl, r0
    120e:	69b8      	ldr	r0, [r7, #24]
    1210:	468b      	mov	fp, r1
    1212:	f7ff f8c7 	bl	3a4 <__aeabi_i2d>
    1216:	4602      	mov	r2, r0
    1218:	460b      	mov	r3, r1
    121a:	4650      	mov	r0, sl
    121c:	4659      	mov	r1, fp
    121e:	f7fe ff75 	bl	10c <__adddf3>
		printf("MS8607: %.2f Temp ; %0.2f RH ; %0.2f Pressure \n",
    1222:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1226:	6978      	ldr	r0, [r7, #20]
    1228:	f7ff f8bc 	bl	3a4 <__aeabi_i2d>
    122c:	4642      	mov	r2, r8
    122e:	464b      	mov	r3, r9
    1230:	f7ff fa4c 	bl	6cc <__aeabi_ddiv>
    1234:	4682      	mov	sl, r0
    1236:	6938      	ldr	r0, [r7, #16]
    1238:	468b      	mov	fp, r1
    123a:	f7ff f8b3 	bl	3a4 <__aeabi_i2d>
    123e:	4602      	mov	r2, r0
    1240:	460b      	mov	r3, r1
    1242:	4650      	mov	r0, sl
    1244:	4659      	mov	r1, fp
    1246:	f7fe ff61 	bl	10c <__adddf3>
    124a:	e9cd 0100 	strd	r0, r1, [sp]
    124e:	e9d7 2300 	ldrd	r2, r3, [r7]
    1252:	4814      	ldr	r0, [pc, #80]	; (12a4 <main+0x22c>)
    1254:	f003 fa10 	bl	4678 <printf>
    1258:	2100      	movs	r1, #0
    125a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    125e:	f006 fed9 	bl	8014 <z_impl_k_sleep>
	while (1) {
    1262:	e787      	b.n	1174 <main+0xfc>
    1264:	f3af 8000 	nop.w
    1268:	00000000 	.word	0x00000000
    126c:	412e8480 	.word	0x412e8480
    1270:	0000a58b 	.word	0x0000a58b
    1274:	01000003 	.word	0x01000003
    1278:	0000a5be 	.word	0x0000a5be
    127c:	0000a198 	.word	0x0000a198
    1280:	00009f68 	.word	0x00009f68
    1284:	0000a5c4 	.word	0x0000a5c4
    1288:	00009f50 	.word	0x00009f50
    128c:	0000a5d8 	.word	0x0000a5d8
    1290:	0000a5f0 	.word	0x0000a5f0
    1294:	0000a586 	.word	0x0000a586
    1298:	0000a582 	.word	0x0000a582
    129c:	0000a60d 	.word	0x0000a60d
    12a0:	0000a61f 	.word	0x0000a61f
    12a4:	0000a63b 	.word	0x0000a63b

000012a8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    12a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12ac:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    12ae:	0784      	lsls	r4, r0, #30
{
    12b0:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    12b2:	f002 0304 	and.w	r3, r2, #4
    12b6:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    12b8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    12bc:	f103 0301 	add.w	r3, r3, #1
    12c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    12c4:	9203      	str	r2, [sp, #12]
    12c6:	4605      	mov	r5, r0
    12c8:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    12ca:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    12cc:	f040 81be 	bne.w	164c <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    12d0:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    12d2:	b130      	cbz	r0, 12e2 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    12d4:	2907      	cmp	r1, #7
    12d6:	d809      	bhi.n	12ec <cbvprintf_package+0x44>
		return -ENOSPC;
    12d8:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    12dc:	b011      	add	sp, #68	; 0x44
    12de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    12e2:	f001 0607 	and.w	r6, r1, #7
    12e6:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    12e8:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    12ec:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    12ee:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    12f2:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    12f4:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    12f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    12fc:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    12fe:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1302:	464f      	mov	r7, r9
	bool parsing = false;
    1304:	46cb      	mov	fp, r9
	size = sizeof(char *);
    1306:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    1308:	b10d      	cbz	r5, 130e <cbvprintf_package+0x66>
				*(const char **)buf = s;
    130a:	9a00      	ldr	r2, [sp, #0]
    130c:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    130e:	9805      	ldr	r0, [sp, #20]
    1310:	2800      	cmp	r0, #0
    1312:	f300 80eb 	bgt.w	14ec <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1316:	489a      	ldr	r0, [pc, #616]	; (1580 <cbvprintf_package+0x2d8>)
    1318:	9a00      	ldr	r2, [sp, #0]
    131a:	4282      	cmp	r2, r0
    131c:	d303      	bcc.n	1326 <cbvprintf_package+0x7e>
    131e:	4899      	ldr	r0, [pc, #612]	; (1584 <cbvprintf_package+0x2dc>)
    1320:	4282      	cmp	r2, r0
    1322:	f0c0 80e3 	bcc.w	14ec <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1326:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1328:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    132c:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    132e:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1332:	f100 8106 	bmi.w	1542 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1336:	2f0f      	cmp	r7, #15
    1338:	f200 80b4 	bhi.w	14a4 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    133c:	2d00      	cmp	r5, #0
    133e:	f000 8108 	beq.w	1552 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1342:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1346:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    134a:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    134c:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    1350:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    1354:	9804      	ldr	r0, [sp, #16]
    1356:	3001      	adds	r0, #1
    1358:	9004      	str	r0, [sp, #16]
    135a:	e0ea      	b.n	1532 <cbvprintf_package+0x28a>
			switch (*fmt) {
    135c:	287a      	cmp	r0, #122	; 0x7a
    135e:	d860      	bhi.n	1422 <cbvprintf_package+0x17a>
    1360:	284b      	cmp	r0, #75	; 0x4b
    1362:	d80e      	bhi.n	1382 <cbvprintf_package+0xda>
    1364:	2847      	cmp	r0, #71	; 0x47
    1366:	d85c      	bhi.n	1422 <cbvprintf_package+0x17a>
    1368:	2829      	cmp	r0, #41	; 0x29
    136a:	d82f      	bhi.n	13cc <cbvprintf_package+0x124>
    136c:	2825      	cmp	r0, #37	; 0x25
    136e:	d055      	beq.n	141c <cbvprintf_package+0x174>
    1370:	d857      	bhi.n	1422 <cbvprintf_package+0x17a>
    1372:	2820      	cmp	r0, #32
    1374:	d07d      	beq.n	1472 <cbvprintf_package+0x1ca>
    1376:	3823      	subs	r0, #35	; 0x23
    1378:	f1d0 0b00 	rsbs	fp, r0, #0
    137c:	eb4b 0b00 	adc.w	fp, fp, r0
    1380:	e077      	b.n	1472 <cbvprintf_package+0x1ca>
    1382:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    1386:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    138a:	d84a      	bhi.n	1422 <cbvprintf_package+0x17a>
    138c:	e8df f00c 	tbb	[pc, ip]
    1390:	49494971 	.word	0x49494971
    1394:	49494949 	.word	0x49494949
    1398:	49494949 	.word	0x49494949
    139c:	4949494c 	.word	0x4949494c
    13a0:	49494949 	.word	0x49494949
    13a4:	4c495a49 	.word	0x4c495a49
    13a8:	5a5a5a4c 	.word	0x5a5a5a4c
    13ac:	496e4c71 	.word	0x496e4c71
    13b0:	4c184971 	.word	0x4c184971
    13b4:	83494918 	.word	0x83494918
    13b8:	49494c80 	.word	0x49494c80
    13bc:	494c      	.short	0x494c
    13be:	80          	.byte	0x80
    13bf:	00          	.byte	0x00
    13c0:	2000      	movs	r0, #0
    13c2:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    13c6:	f04f 0a04 	mov.w	sl, #4
    13ca:	e039      	b.n	1440 <cbvprintf_package+0x198>
			switch (*fmt) {
    13cc:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    13d0:	fa5f fc8c 	uxtb.w	ip, ip
    13d4:	2201      	movs	r2, #1
    13d6:	fa02 fc0c 	lsl.w	ip, r2, ip
    13da:	ea1c 0f0e 	tst.w	ip, lr
    13de:	d148      	bne.n	1472 <cbvprintf_package+0x1ca>
    13e0:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    13e4:	d12e      	bne.n	1444 <cbvprintf_package+0x19c>
    13e6:	ea1c 0b02 	ands.w	fp, ip, r2
    13ea:	d042      	beq.n	1472 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    13ec:	3c01      	subs	r4, #1
    13ee:	4454      	add	r4, sl
    13f0:	f1ca 0c00 	rsb	ip, sl, #0
    13f4:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    13f8:	2d00      	cmp	r5, #0
    13fa:	d061      	beq.n	14c0 <cbvprintf_package+0x218>
    13fc:	eba3 0c05 	sub.w	ip, r3, r5
    1400:	44a4      	add	ip, r4
    1402:	45b4      	cmp	ip, r6
    1404:	f63f af68 	bhi.w	12d8 <cbvprintf_package+0x30>
		if (is_str_arg) {
    1408:	2800      	cmp	r0, #0
    140a:	d168      	bne.n	14de <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    140c:	2b04      	cmp	r3, #4
    140e:	d147      	bne.n	14a0 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    1410:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    1414:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    1416:	3404      	adds	r4, #4
    1418:	2304      	movs	r3, #4
    141a:	e02a      	b.n	1472 <cbvprintf_package+0x1ca>
				arg_idx--;
    141c:	9a01      	ldr	r2, [sp, #4]
    141e:	3a01      	subs	r2, #1
    1420:	9201      	str	r2, [sp, #4]
				parsing = false;
    1422:	f04f 0b00 	mov.w	fp, #0
				continue;
    1426:	e024      	b.n	1472 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    1428:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    142c:	286c      	cmp	r0, #108	; 0x6c
    142e:	d134      	bne.n	149a <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    1430:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    1434:	2000      	movs	r0, #0
    1436:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    1438:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    143a:	d1c4      	bne.n	13c6 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    143c:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    1440:	4653      	mov	r3, sl
    1442:	e7d3      	b.n	13ec <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    1444:	f108 0807 	add.w	r8, r8, #7
    1448:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    144c:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    144e:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    1452:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    1456:	b135      	cbz	r5, 1466 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    1458:	9806      	ldr	r0, [sp, #24]
    145a:	4420      	add	r0, r4
    145c:	42b0      	cmp	r0, r6
    145e:	f63f af3b 	bhi.w	12d8 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    1462:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    1466:	3408      	adds	r4, #8
				parsing = false;
    1468:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    146c:	f04f 0a08 	mov.w	sl, #8
    1470:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    1472:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    1476:	2800      	cmp	r0, #0
    1478:	d078      	beq.n	156c <cbvprintf_package+0x2c4>
			if (!parsing) {
    147a:	f1bb 0f00 	cmp.w	fp, #0
    147e:	f47f af6d 	bne.w	135c <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    1482:	2825      	cmp	r0, #37	; 0x25
    1484:	d1f5      	bne.n	1472 <cbvprintf_package+0x1ca>
					arg_idx++;
    1486:	9b01      	ldr	r3, [sp, #4]
    1488:	3301      	adds	r3, #1
    148a:	9301      	str	r3, [sp, #4]
					parsing = true;
    148c:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    1490:	f04f 0a04 	mov.w	sl, #4
    1494:	e7ec      	b.n	1470 <cbvprintf_package+0x1c8>
			switch (*fmt) {
    1496:	4658      	mov	r0, fp
    1498:	e793      	b.n	13c2 <cbvprintf_package+0x11a>
    149a:	2000      	movs	r0, #0
				parsing = false;
    149c:	4683      	mov	fp, r0
    149e:	e7a5      	b.n	13ec <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    14a0:	2b08      	cmp	r3, #8
    14a2:	d002      	beq.n	14aa <cbvprintf_package+0x202>
					return -EINVAL;
    14a4:	f06f 0015 	mvn.w	r0, #21
    14a8:	e718      	b.n	12dc <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    14aa:	f108 0807 	add.w	r8, r8, #7
    14ae:	f028 0807 	bic.w	r8, r8, #7
    14b2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    14b6:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    14ba:	3408      	adds	r4, #8
    14bc:	2308      	movs	r3, #8
    14be:	e7d8      	b.n	1472 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    14c0:	b968      	cbnz	r0, 14de <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    14c2:	2b04      	cmp	r3, #4
    14c4:	d102      	bne.n	14cc <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    14c6:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    14ca:	e7a4      	b.n	1416 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    14cc:	2b08      	cmp	r3, #8
    14ce:	d1e9      	bne.n	14a4 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    14d0:	f108 0807 	add.w	r8, r8, #7
    14d4:	f028 0807 	bic.w	r8, r8, #7
    14d8:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    14dc:	e7ed      	b.n	14ba <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    14de:	9a05      	ldr	r2, [sp, #20]
    14e0:	3a01      	subs	r2, #1
    14e2:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    14e4:	f858 2b04 	ldr.w	r2, [r8], #4
    14e8:	9200      	str	r2, [sp, #0]
    14ea:	e70d      	b.n	1308 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    14ec:	9a03      	ldr	r2, [sp, #12]
    14ee:	0790      	lsls	r0, r2, #30
    14f0:	d520      	bpl.n	1534 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    14f2:	eba4 0e05 	sub.w	lr, r4, r5
    14f6:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    14fa:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    14fe:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1502:	d2cf      	bcs.n	14a4 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1504:	2f0f      	cmp	r7, #15
    1506:	d8cd      	bhi.n	14a4 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    1508:	b1f5      	cbz	r5, 1548 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    150a:	f107 0240 	add.w	r2, r7, #64	; 0x40
    150e:	eb0d 0e02 	add.w	lr, sp, r2
    1512:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    1514:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    1516:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    151a:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    151e:	f1bc 0f00 	cmp.w	ip, #0
    1522:	f43f af17 	beq.w	1354 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1526:	f060 007f 	orn	r0, r0, #127	; 0x7f
    152a:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    152e:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    1532:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    1534:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    1538:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    153a:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    153c:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1540:	e797      	b.n	1472 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1542:	f04f 0c00 	mov.w	ip, #0
    1546:	e7da      	b.n	14fe <cbvprintf_package+0x256>
				} else if (is_ro) {
    1548:	f1bc 0f00 	cmp.w	ip, #0
    154c:	d001      	beq.n	1552 <cbvprintf_package+0x2aa>
					len += 1;
    154e:	3601      	adds	r6, #1
    1550:	e7ef      	b.n	1532 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
    1552:	9802      	ldr	r0, [sp, #8]
					len += 2;
    1554:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    1556:	2800      	cmp	r0, #0
    1558:	d1eb      	bne.n	1532 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
    155a:	9800      	ldr	r0, [sp, #0]
    155c:	e9cd 3106 	strd	r3, r1, [sp, #24]
    1560:	f007 ff21 	bl	93a6 <strlen>
    1564:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    1568:	4406      	add	r6, r0
    156a:	e7e2      	b.n	1532 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    156c:	1b63      	subs	r3, r4, r5
    156e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1572:	d297      	bcs.n	14a4 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    1574:	b945      	cbnz	r5, 1588 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1576:	f1a6 0408 	sub.w	r4, r6, #8
    157a:	18e0      	adds	r0, r4, r3
    157c:	e6ae      	b.n	12dc <cbvprintf_package+0x34>
    157e:	bf00      	nop
    1580:	00009e40 	.word	0x00009e40
    1584:	0000b210 	.word	0x0000b210
	if (rws_pos_en) {
    1588:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    158a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    158c:	089b      	lsrs	r3, r3, #2
    158e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1590:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    1594:	b1c2      	cbz	r2, 15c8 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1596:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    1598:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    159c:	f1b9 0f00 	cmp.w	r9, #0
    15a0:	d005      	beq.n	15ae <cbvprintf_package+0x306>
    15a2:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    15a4:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    15a6:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    15aa:	4297      	cmp	r7, r2
    15ac:	d10e      	bne.n	15cc <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
    15ae:	f1c5 0301 	rsb	r3, r5, #1
    15b2:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    15b6:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    15ba:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    15bc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    15c0:	4557      	cmp	r7, sl
    15c2:	d112      	bne.n	15ea <cbvprintf_package+0x342>
	return BUF_OFFSET;
    15c4:	1b60      	subs	r0, r4, r5
    15c6:	e689      	b.n	12dc <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    15c8:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    15ca:	e7e5      	b.n	1598 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    15cc:	f810 3b01 	ldrb.w	r3, [r0], #1
    15d0:	0619      	lsls	r1, r3, #24
    15d2:	d508      	bpl.n	15e6 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
    15d4:	eb04 0e0c 	add.w	lr, r4, ip
    15d8:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    15da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    15de:	f63f ae7b 	bhi.w	12d8 <cbvprintf_package+0x30>
			*buf++ = pos;
    15e2:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    15e6:	3201      	adds	r2, #1
    15e8:	e7df      	b.n	15aa <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    15ea:	f1b9 0f00 	cmp.w	r9, #0
    15ee:	d003      	beq.n	15f8 <cbvprintf_package+0x350>
    15f0:	f998 2000 	ldrsb.w	r2, [r8]
    15f4:	2a00      	cmp	r2, #0
    15f6:	db17      	blt.n	1628 <cbvprintf_package+0x380>
		if (rws_pos_en) {
    15f8:	9b02      	ldr	r3, [sp, #8]
    15fa:	b1d3      	cbz	r3, 1632 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
    15fc:	f81a 200b 	ldrb.w	r2, [sl, fp]
    1600:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    1604:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    1606:	9b01      	ldr	r3, [sp, #4]
    1608:	1898      	adds	r0, r3, r2
    160a:	4420      	add	r0, r4
    160c:	42b0      	cmp	r0, r6
    160e:	f63f ae63 	bhi.w	12d8 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    1612:	f898 0000 	ldrb.w	r0, [r8]
    1616:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    161a:	9900      	ldr	r1, [sp, #0]
    161c:	9203      	str	r2, [sp, #12]
    161e:	4620      	mov	r0, r4
    1620:	f007 fed1 	bl	93c6 <memcpy>
		buf += size;
    1624:	9a03      	ldr	r2, [sp, #12]
    1626:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1628:	f10a 0a01 	add.w	sl, sl, #1
    162c:	f108 0801 	add.w	r8, r8, #1
    1630:	e7c6      	b.n	15c0 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1632:	f898 2000 	ldrb.w	r2, [r8]
    1636:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    163a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    163c:	9b02      	ldr	r3, [sp, #8]
    163e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1642:	9800      	ldr	r0, [sp, #0]
    1644:	f007 feaf 	bl	93a6 <strlen>
    1648:	1c42      	adds	r2, r0, #1
    164a:	e7dc      	b.n	1606 <cbvprintf_package+0x35e>
		return -EFAULT;
    164c:	f06f 000d 	mvn.w	r0, #13
    1650:	e644      	b.n	12dc <cbvprintf_package+0x34>
    1652:	bf00      	nop

00001654 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    1654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1658:	b095      	sub	sp, #84	; 0x54
    165a:	af00      	add	r7, sp, #0
    165c:	4604      	mov	r4, r0
    165e:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    1662:	61bb      	str	r3, [r7, #24]
    1664:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    1668:	627a      	str	r2, [r7, #36]	; 0x24
    166a:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    166c:	6239      	str	r1, [r7, #32]
    166e:	b951      	cbnz	r1, 1686 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    1670:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    1672:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    1674:	7880      	ldrb	r0, [r0, #2]
    1676:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    167a:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    167c:	6a3b      	ldr	r3, [r7, #32]
    167e:	429e      	cmp	r6, r3
    1680:	d81a      	bhi.n	16b8 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    1682:	1b03      	subs	r3, r0, r4
    1684:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    1686:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    168a:	78e3      	ldrb	r3, [r4, #3]
    168c:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    168e:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
    1690:	f1ba 0f00 	cmp.w	sl, #0
    1694:	d002      	beq.n	169c <cbprintf_package_convert+0x48>
    1696:	f01b 0f01 	tst.w	fp, #1
    169a:	d117      	bne.n	16cc <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    169c:	697b      	ldr	r3, [r7, #20]
    169e:	bb5b      	cbnz	r3, 16f8 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    16a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16a2:	b11b      	cbz	r3, 16ac <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    16a4:	69ba      	ldr	r2, [r7, #24]
    16a6:	6a39      	ldr	r1, [r7, #32]
    16a8:	4620      	mov	r0, r4
    16aa:	4798      	blx	r3
		}

		return in_len;
    16ac:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    16ae:	4628      	mov	r0, r5
    16b0:	3754      	adds	r7, #84	; 0x54
    16b2:	46bd      	mov	sp, r7
    16b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    16b8:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    16ba:	4628      	mov	r0, r5
    16bc:	f007 fe73 	bl	93a6 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    16c0:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    16c2:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    16c4:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    16c6:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    16c8:	623b      	str	r3, [r7, #32]
    16ca:	e7d7      	b.n	167c <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    16cc:	f894 8000 	ldrb.w	r8, [r4]
    16d0:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    16d2:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    16d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    16d6:	ea4f 0288 	mov.w	r2, r8, lsl #2
    16da:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    16dc:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    16e0:	2b00      	cmp	r3, #0
    16e2:	f040 8101 	bne.w	18e8 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
    16e6:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    16e8:	46c1      	mov	r9, r8
    16ea:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
    16ee:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    16f0:	454b      	cmp	r3, r9
    16f2:	d14e      	bne.n	1792 <cbprintf_package_convert+0x13e>
    16f4:	44d0      	add	r8, sl
    16f6:	e013      	b.n	1720 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    16f8:	f01b 0f02 	tst.w	fp, #2
    16fc:	d0d0      	beq.n	16a0 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    16fe:	f894 8000 	ldrb.w	r8, [r4]
    1702:	ea4f 0388 	mov.w	r3, r8, lsl #2
    1706:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1708:	6863      	ldr	r3, [r4, #4]
    170a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    170e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1712:	2b00      	cmp	r3, #0
    1714:	d178      	bne.n	1808 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    1716:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1718:	f1ba 0f00 	cmp.w	sl, #0
    171c:	d14e      	bne.n	17bc <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    171e:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1720:	f01b 0f05 	tst.w	fp, #5
    1724:	bf0c      	ite	eq
    1726:	2302      	moveq	r3, #2
    1728:	2301      	movne	r3, #1
    172a:	627b      	str	r3, [r7, #36]	; 0x24
    172c:	697b      	ldr	r3, [r7, #20]
    172e:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1732:	f00b 0302 	and.w	r3, fp, #2
    1736:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1738:	45d0      	cmp	r8, sl
    173a:	d0b8      	beq.n	16ae <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    173c:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    1740:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    1744:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    1748:	4bac      	ldr	r3, [pc, #688]	; (19fc <cbprintf_package_convert+0x3a8>)
    174a:	4599      	cmp	r9, r3
    174c:	d302      	bcc.n	1754 <cbprintf_package_convert+0x100>
    174e:	4bac      	ldr	r3, [pc, #688]	; (1a00 <cbprintf_package_convert+0x3ac>)
    1750:	4599      	cmp	r9, r3
    1752:	d339      	bcc.n	17c8 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1754:	693b      	ldr	r3, [r7, #16]
    1756:	2b00      	cmp	r3, #0
    1758:	d043      	beq.n	17e2 <cbprintf_package_convert+0x18e>
    175a:	69f8      	ldr	r0, [r7, #28]
    175c:	f007 f904 	bl	8968 <is_ptr>
    1760:	2800      	cmp	r0, #0
    1762:	d03e      	beq.n	17e2 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    1764:	46e9      	mov	r9, sp
    1766:	b08a      	sub	sp, #40	; 0x28
    1768:	466a      	mov	r2, sp
    176a:	4ba6      	ldr	r3, [pc, #664]	; (1a04 <cbprintf_package_convert+0x3b0>)
    176c:	6153      	str	r3, [r2, #20]
    176e:	69fb      	ldr	r3, [r7, #28]
    1770:	e9c2 3106 	strd	r3, r1, [r2, #24]
    1774:	f44f 7300 	mov.w	r3, #512	; 0x200
    1778:	8413      	strh	r3, [r2, #32]
    177a:	4ba3      	ldr	r3, [pc, #652]	; (1a08 <cbprintf_package_convert+0x3b4>)
    177c:	f842 3f10 	str.w	r3, [r2, #16]!
    1780:	48a2      	ldr	r0, [pc, #648]	; (1a0c <cbprintf_package_convert+0x3b8>)
    1782:	2300      	movs	r3, #0
    1784:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    1788:	f001 fb88 	bl	2e9c <z_impl_z_log_msg_static_create>
				out_len -= 2;
    178c:	3d02      	subs	r5, #2
    178e:	46cd      	mov	sp, r9
				continue;
    1790:	e7d2      	b.n	1738 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    1792:	f819 2b01 	ldrb.w	r2, [r9], #1
    1796:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1798:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    179c:	f007 fe03 	bl	93a6 <strlen>
				if (strl && strl_cnt < strl_len) {
    17a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    17a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    17a4:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    17a6:	b13a      	cbz	r2, 17b8 <cbprintf_package_convert+0x164>
    17a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    17ac:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    17ae:	bf3e      	ittt	cc
    17b0:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    17b2:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    17b6:	3601      	addcc	r6, #1
				out_len += len;
    17b8:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    17ba:	e799      	b.n	16f0 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    17bc:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    17c0:	bf1c      	itt	ne
    17c2:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    17c4:	44d0      	addne	r8, sl
    17c6:	e7ab      	b.n	1720 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    17c8:	693b      	ldr	r3, [r7, #16]
    17ca:	b123      	cbz	r3, 17d6 <cbprintf_package_convert+0x182>
    17cc:	69f8      	ldr	r0, [r7, #28]
    17ce:	f007 f8cb 	bl	8968 <is_ptr>
    17d2:	2800      	cmp	r0, #0
    17d4:	d1c6      	bne.n	1764 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    17d6:	f01b 0f01 	tst.w	fp, #1
    17da:	d105      	bne.n	17e8 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    17dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17de:	1aed      	subs	r5, r5, r3
    17e0:	e7aa      	b.n	1738 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    17e2:	6a3b      	ldr	r3, [r7, #32]
    17e4:	2b00      	cmp	r3, #0
    17e6:	d0a7      	beq.n	1738 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    17e8:	4648      	mov	r0, r9
    17ea:	f007 fddc 	bl	93a6 <strlen>
				if (strl && strl_cnt < strl_len) {
    17ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    17f0:	b143      	cbz	r3, 1804 <cbprintf_package_convert+0x1b0>
    17f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    17f6:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    17f8:	bf3f      	itttt	cc
    17fa:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    17fc:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    17fe:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    1802:	3601      	addcc	r6, #1
				out_len += (len - 1);
    1804:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1806:	e797      	b.n	1738 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1808:	f1ba 0f00 	cmp.w	sl, #0
    180c:	d071      	beq.n	18f2 <cbprintf_package_convert+0x29e>
    180e:	f01b 0604 	ands.w	r6, fp, #4
    1812:	d071      	beq.n	18f8 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
    1814:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    1816:	2600      	movs	r6, #0
		dst = keep_str_pos;
    1818:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    181c:	4652      	mov	r2, sl
    181e:	4641      	mov	r1, r8
    1820:	f007 fdd1 	bl	93c6 <memcpy>
	str_pos += ros_nbr;
    1824:	697b      	ldr	r3, [r7, #20]
    1826:	005b      	lsls	r3, r3, #1
    1828:	60bb      	str	r3, [r7, #8]
    182a:	697b      	ldr	r3, [r7, #20]
    182c:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    182e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    1832:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1834:	f00b 0302 	and.w	r3, fp, #2
    1838:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    183a:	697b      	ldr	r3, [r7, #20]
    183c:	4598      	cmp	r8, r3
    183e:	d15d      	bne.n	18fc <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
    1840:	7823      	ldrb	r3, [r4, #0]
    1842:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1844:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1846:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    184a:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    184e:	bf0c      	ite	eq
    1850:	ea4f 0159 	moveq.w	r1, r9, lsr #1
    1854:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1856:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    185a:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    185c:	f040 809d 	bne.w	199a <cbprintf_package_convert+0x346>
    1860:	f01b 0f04 	tst.w	fp, #4
    1864:	bf14      	ite	ne
    1866:	4648      	movne	r0, r9
    1868:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    186a:	f894 b002 	ldrb.w	fp, [r4, #2]
    186e:	f894 8003 	ldrb.w	r8, [r4, #3]
    1872:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    1874:	7062      	strb	r2, [r4, #1]
    1876:	70a0      	strb	r0, [r4, #2]
    1878:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    187a:	69ba      	ldr	r2, [r7, #24]
    187c:	68f9      	ldr	r1, [r7, #12]
    187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1880:	4620      	mov	r0, r4
    1882:	4798      	blx	r3
	if (rv < 0) {
    1884:	1e05      	subs	r5, r0, #0
    1886:	f6ff af12 	blt.w	16ae <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    188a:	69fb      	ldr	r3, [r7, #28]
    188c:	7023      	strb	r3, [r4, #0]
    188e:	693b      	ldr	r3, [r7, #16]
    1890:	7063      	strb	r3, [r4, #1]
    1892:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    1896:	69ba      	ldr	r2, [r7, #24]
    1898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    189a:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    189e:	4649      	mov	r1, r9
    18a0:	f107 0040 	add.w	r0, r7, #64	; 0x40
    18a4:	4798      	blx	r3
	if (rv < 0) {
    18a6:	f1b0 0800 	subs.w	r8, r0, #0
    18aa:	f2c0 80a3 	blt.w	19f4 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    18ae:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    18b0:	69ba      	ldr	r2, [r7, #24]
    18b2:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    18b4:	eba3 010a 	sub.w	r1, r3, sl
    18b8:	68fb      	ldr	r3, [r7, #12]
    18ba:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    18bc:	68bb      	ldr	r3, [r7, #8]
    18be:	1ac9      	subs	r1, r1, r3
    18c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18c2:	4798      	blx	r3
	if (rv < 0) {
    18c4:	2800      	cmp	r0, #0
    18c6:	f2c0 8097 	blt.w	19f8 <cbprintf_package_convert+0x3a4>
	out_len += rv;
    18ca:	44a8      	add	r8, r5
	out_len += rv;
    18cc:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    18d0:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    18d4:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    18d8:	45b3      	cmp	fp, r6
    18da:	d360      	bcc.n	199e <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
    18dc:	2100      	movs	r1, #0
    18de:	69ba      	ldr	r2, [r7, #24]
    18e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18e2:	4608      	mov	r0, r1
    18e4:	4798      	blx	r3
	return out_len;
    18e6:	e6e2      	b.n	16ae <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    18e8:	f04f 0900 	mov.w	r9, #0
    18ec:	f107 0030 	add.w	r0, r7, #48	; 0x30
    18f0:	e794      	b.n	181c <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    18f2:	4656      	mov	r6, sl
		keep_cnt = 0;
    18f4:	46d1      	mov	r9, sl
    18f6:	e795      	b.n	1824 <cbprintf_package_convert+0x1d0>
    18f8:	46b1      	mov	r9, r6
    18fa:	e793      	b.n	1824 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    18fc:	f818 1b02 	ldrb.w	r1, [r8], #2
    1900:	4a3e      	ldr	r2, [pc, #248]	; (19fc <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
    1902:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    1906:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    190a:	4293      	cmp	r3, r2
    190c:	d302      	bcc.n	1914 <cbprintf_package_convert+0x2c0>
    190e:	4a3c      	ldr	r2, [pc, #240]	; (1a00 <cbprintf_package_convert+0x3ac>)
    1910:	4293      	cmp	r3, r2
    1912:	d31c      	bcc.n	194e <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1914:	693b      	ldr	r3, [r7, #16]
    1916:	b123      	cbz	r3, 1922 <cbprintf_package_convert+0x2ce>
    1918:	69f8      	ldr	r0, [r7, #28]
    191a:	f007 f825 	bl	8968 <is_ptr>
    191e:	2800      	cmp	r0, #0
    1920:	d18b      	bne.n	183a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	b9f3      	cbnz	r3, 1964 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
    1926:	f109 0228 	add.w	r2, r9, #40	; 0x28
    192a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    192e:	4402      	add	r2, r0
    1930:	f109 0301 	add.w	r3, r9, #1
    1934:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    1938:	f107 0250 	add.w	r2, r7, #80	; 0x50
    193c:	fa52 f383 	uxtab	r3, r2, r3
    1940:	f109 0902 	add.w	r9, r9, #2
    1944:	fa5f f989 	uxtb.w	r9, r9
    1948:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    194c:	e775      	b.n	183a <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    194e:	693b      	ldr	r3, [r7, #16]
    1950:	b12b      	cbz	r3, 195e <cbprintf_package_convert+0x30a>
    1952:	69f8      	ldr	r0, [r7, #28]
    1954:	f007 f808 	bl	8968 <is_ptr>
    1958:	2800      	cmp	r0, #0
    195a:	f47f af6e 	bne.w	183a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    195e:	f01b 0f01 	tst.w	fp, #1
    1962:	d009      	beq.n	1978 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    1964:	f106 0228 	add.w	r2, r6, #40	; 0x28
    1968:	f107 0128 	add.w	r1, r7, #40	; 0x28
    196c:	1c73      	adds	r3, r6, #1
    196e:	1856      	adds	r6, r2, r1
    1970:	f806 5c20 	strb.w	r5, [r6, #-32]
    1974:	b2de      	uxtb	r6, r3
    1976:	e760      	b.n	183a <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1978:	f01b 0f04 	tst.w	fp, #4
    197c:	f43f af5d 	beq.w	183a <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    1980:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1984:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1988:	f109 0301 	add.w	r3, r9, #1
    198c:	eb02 0901 	add.w	r9, r2, r1
    1990:	f809 5c10 	strb.w	r5, [r9, #-16]
    1994:	fa5f f983 	uxtb.w	r9, r3
    1998:	e74f      	b.n	183a <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    199a:	2000      	movs	r0, #0
    199c:	e765      	b.n	186a <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
    199e:	f81b 300a 	ldrb.w	r3, [fp, sl]
    19a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    19a6:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    19aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    19ac:	b1fb      	cbz	r3, 19ee <cbprintf_package_convert+0x39a>
    19ae:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    19b2:	69ba      	ldr	r2, [r7, #24]
    19b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19b6:	2101      	movs	r1, #1
    19b8:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    19bc:	4798      	blx	r3
		if (rv < 0) {
    19be:	2800      	cmp	r0, #0
    19c0:	db1a      	blt.n	19f8 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    19c2:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    19c4:	f1b8 0f00 	cmp.w	r8, #0
    19c8:	d106      	bne.n	19d8 <cbprintf_package_convert+0x384>
    19ca:	4648      	mov	r0, r9
    19cc:	f007 fceb 	bl	93a6 <strlen>
    19d0:	f100 0801 	add.w	r8, r0, #1
    19d4:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    19d8:	69ba      	ldr	r2, [r7, #24]
    19da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    19dc:	4641      	mov	r1, r8
    19de:	4648      	mov	r0, r9
    19e0:	4798      	blx	r3
		if (rv < 0) {
    19e2:	2800      	cmp	r0, #0
    19e4:	db08      	blt.n	19f8 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    19e6:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    19e8:	f10b 0b01 	add.w	fp, fp, #1
    19ec:	e774      	b.n	18d8 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
    19ee:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    19f2:	e7de      	b.n	19b2 <cbprintf_package_convert+0x35e>
    19f4:	4645      	mov	r5, r8
    19f6:	e65a      	b.n	16ae <cbprintf_package_convert+0x5a>
    19f8:	4605      	mov	r5, r0
    19fa:	e658      	b.n	16ae <cbprintf_package_convert+0x5a>
    19fc:	00009e40 	.word	0x00009e40
    1a00:	0000b210 	.word	0x0000b210
    1a04:	0000a670 	.word	0x0000a670
    1a08:	01000004 	.word	0x01000004
    1a0c:	0000a158 	.word	0x0000a158

00001a10 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    1a10:	4b01      	ldr	r3, [pc, #4]	; (1a18 <__printk_hook_install+0x8>)
    1a12:	6018      	str	r0, [r3, #0]
}
    1a14:	4770      	bx	lr
    1a16:	bf00      	nop
    1a18:	20000000 	.word	0x20000000

00001a1c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1a1c:	b530      	push	{r4, r5, lr}
    1a1e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    1a20:	2500      	movs	r5, #0
    1a22:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    1a26:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1a28:	9500      	str	r5, [sp, #0]
    1a2a:	a903      	add	r1, sp, #12
    1a2c:	4805      	ldr	r0, [pc, #20]	; (1a44 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    1a2e:	9505      	str	r5, [sp, #20]
    1a30:	f000 f918 	bl	1c64 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1a34:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    1a38:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1a3a:	bfb8      	it	lt
    1a3c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1a3e:	b007      	add	sp, #28
    1a40:	bd30      	pop	{r4, r5, pc}
    1a42:	bf00      	nop
    1a44:	000089b7 	.word	0x000089b7

00001a48 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1a4c:	8b05      	ldrh	r5, [r0, #24]
{
    1a4e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1a50:	0728      	lsls	r0, r5, #28
{
    1a52:	4690      	mov	r8, r2
	if (processing) {
    1a54:	d411      	bmi.n	1a7a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1a56:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1a58:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1a5c:	f040 80cd 	bne.w	1bfa <process_event+0x1b2>
			evt = process_recheck(mgr);
    1a60:	4620      	mov	r0, r4
    1a62:	f006 ffdf 	bl	8a24 <process_recheck>
		}

		if (evt == EVT_NOP) {
    1a66:	b178      	cbz	r0, 1a88 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1a68:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a6a:	8b21      	ldrh	r1, [r4, #24]
    1a6c:	2804      	cmp	r0, #4
    1a6e:	d811      	bhi.n	1a94 <process_event+0x4c>
    1a70:	e8df f000 	tbb	[pc, r0]
    1a74:	856d10c3 	.word	0x856d10c3
    1a78:	95          	.byte	0x95
    1a79:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    1a7a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1a7c:	bf0c      	ite	eq
    1a7e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1a82:	f045 0520 	orrne.w	r5, r5, #32
    1a86:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1a88:	f388 8811 	msr	BASEPRI, r8
    1a8c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1a94:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1a98:	45aa      	cmp	sl, r5
    1a9a:	f000 80a6 	beq.w	1bea <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    1a9e:	2700      	movs	r7, #0
    1aa0:	46b9      	mov	r9, r7
    1aa2:	463e      	mov	r6, r7
    1aa4:	68a3      	ldr	r3, [r4, #8]
    1aa6:	2b00      	cmp	r3, #0
    1aa8:	f000 80bd 	beq.w	1c26 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1aac:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1ab0:	8321      	strh	r1, [r4, #24]
    1ab2:	f388 8811 	msr	BASEPRI, r8
    1ab6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1aba:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1abc:	2900      	cmp	r1, #0
    1abe:	f000 80bb 	beq.w	1c38 <process_event+0x1f0>
	return node->next;
    1ac2:	680d      	ldr	r5, [r1, #0]
    1ac4:	2900      	cmp	r1, #0
    1ac6:	f000 80b7 	beq.w	1c38 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    1aca:	f8d1 8004 	ldr.w	r8, [r1, #4]
    1ace:	4633      	mov	r3, r6
    1ad0:	4652      	mov	r2, sl
    1ad2:	4620      	mov	r0, r4
    1ad4:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1ad6:	2d00      	cmp	r5, #0
    1ad8:	d076      	beq.n	1bc8 <process_event+0x180>
    1ada:	682b      	ldr	r3, [r5, #0]
    1adc:	4629      	mov	r1, r5
    1ade:	461d      	mov	r5, r3
    1ae0:	e7f0      	b.n	1ac4 <process_event+0x7c>
    1ae2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1ae6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1ae8:	2a01      	cmp	r2, #1
    1aea:	d81b      	bhi.n	1b24 <process_event+0xdc>
	list->head = NULL;
    1aec:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1aee:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1af2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1af4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1af6:	b289      	uxth	r1, r1
	list->tail = NULL;
    1af8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1afc:	d109      	bne.n	1b12 <process_event+0xca>
    1afe:	463b      	mov	r3, r7
    1b00:	e003      	b.n	1b0a <process_event+0xc2>
				mgr->refs += 1U;
    1b02:	8b62      	ldrh	r2, [r4, #26]
    1b04:	3201      	adds	r2, #1
    1b06:	8362      	strh	r2, [r4, #26]
	return node->next;
    1b08:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1b0a:	2b00      	cmp	r3, #0
    1b0c:	d1f9      	bne.n	1b02 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b0e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b12:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1b14:	4620      	mov	r0, r4
    1b16:	f006 ff85 	bl	8a24 <process_recheck>
    1b1a:	2800      	cmp	r0, #0
    1b1c:	d07b      	beq.n	1c16 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b1e:	f041 0120 	orr.w	r1, r1, #32
    1b22:	e077      	b.n	1c14 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1b24:	2b04      	cmp	r3, #4
    1b26:	d10a      	bne.n	1b3e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b28:	f021 0107 	bic.w	r1, r1, #7
    1b2c:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b2e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1b30:	4620      	mov	r0, r4
    1b32:	f006 ff77 	bl	8a24 <process_recheck>
    1b36:	b110      	cbz	r0, 1b3e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b38:	f041 0120 	orr.w	r1, r1, #32
    1b3c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b3e:	8b21      	ldrh	r1, [r4, #24]
    1b40:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1b44:	45aa      	cmp	sl, r5
    1b46:	d050      	beq.n	1bea <process_event+0x1a2>
    1b48:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1b4a:	46b9      	mov	r9, r7
    1b4c:	e7aa      	b.n	1aa4 <process_event+0x5c>
			transit = mgr->transitions->start;
    1b4e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b50:	f021 0107 	bic.w	r1, r1, #7
    1b54:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1b58:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1b5a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b5e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1b60:	d12d      	bne.n	1bbe <process_event+0x176>
		    || (transit != NULL)) {
    1b62:	f1b9 0f00 	cmp.w	r9, #0
    1b66:	d040      	beq.n	1bea <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1b68:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1b6c:	8321      	strh	r1, [r4, #24]
    1b6e:	f388 8811 	msr	BASEPRI, r8
    1b72:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1b76:	493a      	ldr	r1, [pc, #232]	; (1c60 <process_event+0x218>)
    1b78:	4620      	mov	r0, r4
    1b7a:	47c8      	blx	r9
    1b7c:	e029      	b.n	1bd2 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b7e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1b82:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b84:	f041 0104 	orr.w	r1, r1, #4
    1b88:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1b8a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1b8c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1b90:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1b92:	d0e6      	beq.n	1b62 <process_event+0x11a>
    1b94:	2700      	movs	r7, #0
		res = 0;
    1b96:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b98:	f04f 0a04 	mov.w	sl, #4
    1b9c:	e782      	b.n	1aa4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b9e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1ba2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ba4:	f041 0105 	orr.w	r1, r1, #5
    1ba8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1baa:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1bac:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1bb0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1bb2:	d0d6      	beq.n	1b62 <process_event+0x11a>
    1bb4:	2700      	movs	r7, #0
		res = 0;
    1bb6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1bb8:	f04f 0a05 	mov.w	sl, #5
    1bbc:	e772      	b.n	1aa4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1bbe:	2700      	movs	r7, #0
		res = 0;
    1bc0:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1bc2:	f04f 0a06 	mov.w	sl, #6
    1bc6:	e76d      	b.n	1aa4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1bc8:	462b      	mov	r3, r5
    1bca:	e787      	b.n	1adc <process_event+0x94>
			if (transit != NULL) {
    1bcc:	f1b9 0f00 	cmp.w	r9, #0
    1bd0:	d1d1      	bne.n	1b76 <process_event+0x12e>
	__asm__ volatile(
    1bd2:	f04f 0320 	mov.w	r3, #32
    1bd6:	f3ef 8811 	mrs	r8, BASEPRI
    1bda:	f383 8812 	msr	BASEPRI_MAX, r3
    1bde:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1be2:	8b23      	ldrh	r3, [r4, #24]
    1be4:	f023 0308 	bic.w	r3, r3, #8
    1be8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1bea:	8b25      	ldrh	r5, [r4, #24]
    1bec:	06ea      	lsls	r2, r5, #27
    1bee:	d52e      	bpl.n	1c4e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1bf0:	f025 0310 	bic.w	r3, r5, #16
    1bf4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1bf6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1bfa:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1bfc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1bfe:	2e00      	cmp	r6, #0
    1c00:	f6bf af6f 	bge.w	1ae2 <process_event+0x9a>
	list->head = NULL;
    1c04:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1c06:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1c08:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c0c:	f021 0107 	bic.w	r1, r1, #7
    1c10:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c14:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c16:	8b21      	ldrh	r1, [r4, #24]
    1c18:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1c1c:	45aa      	cmp	sl, r5
    1c1e:	f04f 0900 	mov.w	r9, #0
    1c22:	f47f af3f 	bne.w	1aa4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1c26:	2f00      	cmp	r7, #0
    1c28:	d09b      	beq.n	1b62 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1c2a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1c2e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1c30:	f388 8811 	msr	BASEPRI, r8
    1c34:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1c38:	2f00      	cmp	r7, #0
    1c3a:	d0c7      	beq.n	1bcc <process_event+0x184>
	return node->next;
    1c3c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1c3e:	4639      	mov	r1, r7
    1c40:	4633      	mov	r3, r6
    1c42:	4652      	mov	r2, sl
    1c44:	4620      	mov	r0, r4
    1c46:	f006 ff19 	bl	8a7c <notify_one>
	list->head = node;
    1c4a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1c4c:	e7f4      	b.n	1c38 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1c4e:	06ab      	lsls	r3, r5, #26
    1c50:	f57f af1a 	bpl.w	1a88 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1c54:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1c58:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1c5a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1c5e:	e6ff      	b.n	1a60 <process_event+0x18>
    1c60:	00008aa9 	.word	0x00008aa9

00001c64 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c68:	b09f      	sub	sp, #124	; 0x7c
    1c6a:	4682      	mov	sl, r0
    1c6c:	9103      	str	r1, [sp, #12]
    1c6e:	4616      	mov	r6, r2
    1c70:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1c72:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1c74:	7830      	ldrb	r0, [r6, #0]
    1c76:	b910      	cbnz	r0, 1c7e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1c78:	4628      	mov	r0, r5
    1c7a:	f000 bd8b 	b.w	2794 <z_cbvprintf_impl+0xb30>
			OUTC(*fp++);
    1c7e:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    1c80:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1c82:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    1c84:	d006      	beq.n	1c94 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    1c86:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    1c88:	47d0      	blx	sl
    1c8a:	2800      	cmp	r0, #0
    1c8c:	f2c0 8582 	blt.w	2794 <z_cbvprintf_impl+0xb30>
    1c90:	3501      	adds	r5, #1
		if (bps == NULL) {
    1c92:	e22b      	b.n	20ec <z_cbvprintf_impl+0x488>
		} state = {
    1c94:	2218      	movs	r2, #24
    1c96:	2100      	movs	r1, #0
    1c98:	a810      	add	r0, sp, #64	; 0x40
    1c9a:	f007 fb9f 	bl	93dc <memset>
	if (*sp == '%') {
    1c9e:	7873      	ldrb	r3, [r6, #1]
    1ca0:	2b25      	cmp	r3, #37	; 0x25
    1ca2:	d07d      	beq.n	1da0 <z_cbvprintf_impl+0x13c>
    1ca4:	2300      	movs	r3, #0
    1ca6:	1c70      	adds	r0, r6, #1
    1ca8:	4698      	mov	r8, r3
    1caa:	469e      	mov	lr, r3
    1cac:	469c      	mov	ip, r3
    1cae:	461f      	mov	r7, r3
    1cb0:	4601      	mov	r1, r0
		switch (*sp) {
    1cb2:	f810 2b01 	ldrb.w	r2, [r0], #1
    1cb6:	2a2b      	cmp	r2, #43	; 0x2b
    1cb8:	f000 80a1 	beq.w	1dfe <z_cbvprintf_impl+0x19a>
    1cbc:	f200 8098 	bhi.w	1df0 <z_cbvprintf_impl+0x18c>
    1cc0:	2a20      	cmp	r2, #32
    1cc2:	f000 809f 	beq.w	1e04 <z_cbvprintf_impl+0x1a0>
    1cc6:	2a23      	cmp	r2, #35	; 0x23
    1cc8:	f000 809f 	beq.w	1e0a <z_cbvprintf_impl+0x1a6>
    1ccc:	b12b      	cbz	r3, 1cda <z_cbvprintf_impl+0x76>
    1cce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1cd6:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1cda:	f1b8 0f00 	cmp.w	r8, #0
    1cde:	d005      	beq.n	1cec <z_cbvprintf_impl+0x88>
    1ce0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1ce4:	f043 0320 	orr.w	r3, r3, #32
    1ce8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1cec:	f1be 0f00 	cmp.w	lr, #0
    1cf0:	d005      	beq.n	1cfe <z_cbvprintf_impl+0x9a>
    1cf2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1cf6:	f043 0310 	orr.w	r3, r3, #16
    1cfa:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1cfe:	f1bc 0f00 	cmp.w	ip, #0
    1d02:	d005      	beq.n	1d10 <z_cbvprintf_impl+0xac>
    1d04:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1d08:	f043 0308 	orr.w	r3, r3, #8
    1d0c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    1d10:	b12f      	cbz	r7, 1d1e <z_cbvprintf_impl+0xba>
    1d12:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1d16:	f043 0304 	orr.w	r3, r3, #4
    1d1a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    1d1e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1d22:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1d26:	2844      	cmp	r0, #68	; 0x44
    1d28:	d103      	bne.n	1d32 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
    1d2a:	f36f 1386 	bfc	r3, #6, #1
    1d2e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    1d32:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    1d36:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1d3c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    1d40:	d17f      	bne.n	1e42 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
    1d42:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1d46:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1d4a:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1d4c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
    1d50:	781a      	ldrb	r2, [r3, #0]
    1d52:	2a2e      	cmp	r2, #46	; 0x2e
    1d54:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1d58:	bf0c      	ite	eq
    1d5a:	2101      	moveq	r1, #1
    1d5c:	2100      	movne	r1, #0
    1d5e:	f361 0241 	bfi	r2, r1, #1, #1
    1d62:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    1d66:	d178      	bne.n	1e5a <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
    1d68:	785a      	ldrb	r2, [r3, #1]
    1d6a:	2a2a      	cmp	r2, #42	; 0x2a
    1d6c:	d06e      	beq.n	1e4c <z_cbvprintf_impl+0x1e8>
	++sp;
    1d6e:	3301      	adds	r3, #1
	size_t val = 0;
    1d70:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1d72:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1d76:	4619      	mov	r1, r3
    1d78:	f811 0b01 	ldrb.w	r0, [r1], #1
    1d7c:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1d80:	2f09      	cmp	r7, #9
    1d82:	f240 80af 	bls.w	1ee4 <z_cbvprintf_impl+0x280>
	conv->unsupported |= ((conv->prec_value < 0)
    1d86:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
    1d8a:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    1d8c:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1d90:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1d94:	460a      	mov	r2, r1
    1d96:	f360 0241 	bfi	r2, r0, #1, #1
    1d9a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    1d9e:	e05c      	b.n	1e5a <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
    1da0:	1cb2      	adds	r2, r6, #2
    1da2:	9206      	str	r2, [sp, #24]
    1da4:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    1da8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1dac:	07df      	lsls	r7, r3, #31
    1dae:	f140 8154 	bpl.w	205a <z_cbvprintf_impl+0x3f6>
			width = va_arg(ap, int);
    1db2:	f854 2b04 	ldr.w	r2, [r4], #4
    1db6:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    1db8:	2a00      	cmp	r2, #0
    1dba:	da08      	bge.n	1dce <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
    1dbc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    1dc0:	f042 0204 	orr.w	r2, r2, #4
    1dc4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    1dc8:	9a04      	ldr	r2, [sp, #16]
    1dca:	4252      	negs	r2, r2
		int width = -1;
    1dcc:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    1dce:	0758      	lsls	r0, r3, #29
    1dd0:	f140 814b 	bpl.w	206a <z_cbvprintf_impl+0x406>
			int arg = va_arg(ap, int);
    1dd4:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    1dd8:	2f00      	cmp	r7, #0
    1dda:	f280 814a 	bge.w	2072 <z_cbvprintf_impl+0x40e>
				conv->prec_present = false;
    1dde:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1de2:	f36f 0341 	bfc	r3, #1, #1
    1de6:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    1dea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1dee:	e140      	b.n	2072 <z_cbvprintf_impl+0x40e>
		switch (*sp) {
    1df0:	2a2d      	cmp	r2, #45	; 0x2d
    1df2:	d00d      	beq.n	1e10 <z_cbvprintf_impl+0x1ac>
    1df4:	2a30      	cmp	r2, #48	; 0x30
    1df6:	f47f af69 	bne.w	1ccc <z_cbvprintf_impl+0x68>
    1dfa:	2301      	movs	r3, #1
	} while (loop);
    1dfc:	e758      	b.n	1cb0 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
    1dfe:	f04f 0c01 	mov.w	ip, #1
    1e02:	e755      	b.n	1cb0 <z_cbvprintf_impl+0x4c>
    1e04:	f04f 0e01 	mov.w	lr, #1
    1e08:	e752      	b.n	1cb0 <z_cbvprintf_impl+0x4c>
    1e0a:	f04f 0801 	mov.w	r8, #1
    1e0e:	e74f      	b.n	1cb0 <z_cbvprintf_impl+0x4c>
    1e10:	2701      	movs	r7, #1
    1e12:	e74d      	b.n	1cb0 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
    1e14:	fb0e 7202 	mla	r2, lr, r2, r7
    1e18:	3a30      	subs	r2, #48	; 0x30
    1e1a:	4603      	mov	r3, r0
    1e1c:	4618      	mov	r0, r3
    1e1e:	f810 7b01 	ldrb.w	r7, [r0], #1
    1e22:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1e26:	f1bc 0f09 	cmp.w	ip, #9
    1e2a:	d9f3      	bls.n	1e14 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
    1e2c:	4299      	cmp	r1, r3
    1e2e:	d08f      	beq.n	1d50 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    1e30:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
    1e34:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    1e36:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1e38:	f362 0141 	bfi	r1, r2, #1, #1
    1e3c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    1e40:	e786      	b.n	1d50 <z_cbvprintf_impl+0xec>
    1e42:	460b      	mov	r3, r1
	size_t val = 0;
    1e44:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1e46:	f04f 0e0a 	mov.w	lr, #10
    1e4a:	e7e7      	b.n	1e1c <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
    1e4c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1e50:	f042 0204 	orr.w	r2, r2, #4
    1e54:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    1e58:	3302      	adds	r3, #2
	switch (*sp) {
    1e5a:	781a      	ldrb	r2, [r3, #0]
    1e5c:	2a6c      	cmp	r2, #108	; 0x6c
    1e5e:	d061      	beq.n	1f24 <z_cbvprintf_impl+0x2c0>
    1e60:	d845      	bhi.n	1eee <z_cbvprintf_impl+0x28a>
    1e62:	2a68      	cmp	r2, #104	; 0x68
    1e64:	d04b      	beq.n	1efe <z_cbvprintf_impl+0x29a>
    1e66:	2a6a      	cmp	r2, #106	; 0x6a
    1e68:	d065      	beq.n	1f36 <z_cbvprintf_impl+0x2d2>
    1e6a:	2a4c      	cmp	r2, #76	; 0x4c
    1e6c:	d06b      	beq.n	1f46 <z_cbvprintf_impl+0x2e2>
	conv->specifier = *sp++;
    1e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
    1e72:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
    1e74:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    1e76:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    1e7a:	f200 80ad 	bhi.w	1fd8 <z_cbvprintf_impl+0x374>
    1e7e:	2a6d      	cmp	r2, #109	; 0x6d
    1e80:	d86e      	bhi.n	1f60 <z_cbvprintf_impl+0x2fc>
    1e82:	2a69      	cmp	r2, #105	; 0x69
    1e84:	f200 80a8 	bhi.w	1fd8 <z_cbvprintf_impl+0x374>
    1e88:	2a57      	cmp	r2, #87	; 0x57
    1e8a:	f200 8088 	bhi.w	1f9e <z_cbvprintf_impl+0x33a>
    1e8e:	2a41      	cmp	r2, #65	; 0x41
    1e90:	d004      	beq.n	1e9c <z_cbvprintf_impl+0x238>
    1e92:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    1e96:	2b02      	cmp	r3, #2
    1e98:	f200 809e 	bhi.w	1fd8 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_FP;
    1e9c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    1ea0:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    1ea4:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    1ea6:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    1eaa:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    1eae:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    1eb2:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
    1eb6:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    1eba:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    1ebe:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    1ec2:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    1ec4:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    1ec8:	b2cb      	uxtb	r3, r1
    1eca:	f100 80c4 	bmi.w	2056 <z_cbvprintf_impl+0x3f2>
		if (conv->length_mod == LENGTH_L) {
    1ece:	f003 0278 	and.w	r2, r3, #120	; 0x78
    1ed2:	2a18      	cmp	r2, #24
    1ed4:	f040 80ae 	bne.w	2034 <z_cbvprintf_impl+0x3d0>
			conv->length_mod = LENGTH_NONE;
    1ed8:	f36f 03c6 	bfc	r3, #3, #4
    1edc:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    1ee0:	2300      	movs	r3, #0
    1ee2:	e09d      	b.n	2020 <z_cbvprintf_impl+0x3bc>
		val = 10U * val + *sp++ - '0';
    1ee4:	fb0c 0202 	mla	r2, ip, r2, r0
    1ee8:	3a30      	subs	r2, #48	; 0x30
    1eea:	460b      	mov	r3, r1
    1eec:	e743      	b.n	1d76 <z_cbvprintf_impl+0x112>
	switch (*sp) {
    1eee:	2a74      	cmp	r2, #116	; 0x74
    1ef0:	d025      	beq.n	1f3e <z_cbvprintf_impl+0x2da>
    1ef2:	2a7a      	cmp	r2, #122	; 0x7a
    1ef4:	d1bb      	bne.n	1e6e <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
    1ef6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1efa:	2106      	movs	r1, #6
    1efc:	e00c      	b.n	1f18 <z_cbvprintf_impl+0x2b4>
		if (*++sp == 'h') {
    1efe:	785a      	ldrb	r2, [r3, #1]
    1f00:	2a68      	cmp	r2, #104	; 0x68
    1f02:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1f06:	d106      	bne.n	1f16 <z_cbvprintf_impl+0x2b2>
			conv->length_mod = LENGTH_HH;
    1f08:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1f0a:	f361 02c6 	bfi	r2, r1, #3, #4
    1f0e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    1f12:	3302      	adds	r3, #2
    1f14:	e7ab      	b.n	1e6e <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
    1f16:	2102      	movs	r1, #2
    1f18:	f361 02c6 	bfi	r2, r1, #3, #4
    1f1c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    1f20:	3301      	adds	r3, #1
    1f22:	e7a4      	b.n	1e6e <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
    1f24:	785a      	ldrb	r2, [r3, #1]
    1f26:	2a6c      	cmp	r2, #108	; 0x6c
    1f28:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1f2c:	d101      	bne.n	1f32 <z_cbvprintf_impl+0x2ce>
			conv->length_mod = LENGTH_LL;
    1f2e:	2104      	movs	r1, #4
    1f30:	e7eb      	b.n	1f0a <z_cbvprintf_impl+0x2a6>
			conv->length_mod = LENGTH_L;
    1f32:	2103      	movs	r1, #3
    1f34:	e7f0      	b.n	1f18 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_J;
    1f36:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1f3a:	2105      	movs	r1, #5
    1f3c:	e7ec      	b.n	1f18 <z_cbvprintf_impl+0x2b4>
		conv->length_mod = LENGTH_T;
    1f3e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    1f42:	2107      	movs	r1, #7
    1f44:	e7e8      	b.n	1f18 <z_cbvprintf_impl+0x2b4>
		conv->unsupported = true;
    1f46:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    1f4a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1f4e:	f022 0202 	bic.w	r2, r2, #2
    1f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1f56:	f042 0202 	orr.w	r2, r2, #2
    1f5a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    1f5e:	e7df      	b.n	1f20 <z_cbvprintf_impl+0x2bc>
	switch (conv->specifier) {
    1f60:	3a6e      	subs	r2, #110	; 0x6e
    1f62:	b2d3      	uxtb	r3, r2
    1f64:	2201      	movs	r2, #1
    1f66:	409a      	lsls	r2, r3
    1f68:	f240 4382 	movw	r3, #1154	; 0x482
    1f6c:	421a      	tst	r2, r3
    1f6e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1f72:	d138      	bne.n	1fe6 <z_cbvprintf_impl+0x382>
    1f74:	f012 0f24 	tst.w	r2, #36	; 0x24
    1f78:	d160      	bne.n	203c <z_cbvprintf_impl+0x3d8>
    1f7a:	07d1      	lsls	r1, r2, #31
    1f7c:	d52c      	bpl.n	1fd8 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_PTR;
    1f7e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f82:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1f86:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1f8a:	2103      	movs	r1, #3
    1f8c:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f90:	f1dc 0300 	rsbs	r3, ip, #0
		conv->specifier_cat = SPECIFIER_PTR;
    1f94:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f98:	eb43 030c 	adc.w	r3, r3, ip
    1f9c:	e040      	b.n	2020 <z_cbvprintf_impl+0x3bc>
	switch (conv->specifier) {
    1f9e:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1fa2:	b2c9      	uxtb	r1, r1
    1fa4:	2001      	movs	r0, #1
    1fa6:	fa00 f101 	lsl.w	r1, r0, r1
    1faa:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1fae:	f47f af75 	bne.w	1e9c <z_cbvprintf_impl+0x238>
    1fb2:	f640 0301 	movw	r3, #2049	; 0x801
    1fb6:	4219      	tst	r1, r3
    1fb8:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    1fbc:	d119      	bne.n	1ff2 <z_cbvprintf_impl+0x38e>
    1fbe:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1fc2:	d009      	beq.n	1fd8 <z_cbvprintf_impl+0x374>
		conv->specifier_cat = SPECIFIER_SINT;
    1fc4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    1fc8:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1fcc:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1fd0:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1fd2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    1fd6:	d183      	bne.n	1ee0 <z_cbvprintf_impl+0x27c>
		conv->invalid = true;
    1fd8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    1fdc:	f043 0301 	orr.w	r3, r3, #1
    1fe0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    1fe4:	e77c      	b.n	1ee0 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_UINT;
    1fe6:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    1fea:	2102      	movs	r1, #2
    1fec:	f361 0202 	bfi	r2, r1, #0, #3
    1ff0:	e7ec      	b.n	1fcc <z_cbvprintf_impl+0x368>
    1ff2:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    1ff6:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ff8:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1ffc:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2000:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2002:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    2006:	bf02      	ittt	eq
    2008:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    200c:	f041 0101 	orreq.w	r1, r1, #1
    2010:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    2014:	2a63      	cmp	r2, #99	; 0x63
    2016:	f47f af63 	bne.w	1ee0 <z_cbvprintf_impl+0x27c>
			unsupported = (conv->length_mod != LENGTH_NONE);
    201a:	3b00      	subs	r3, #0
    201c:	bf18      	it	ne
    201e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2020:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2024:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2028:	430b      	orrs	r3, r1
    202a:	f363 0241 	bfi	r2, r3, #1, #1
    202e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    2032:	e6b9      	b.n	1da8 <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
    2034:	f013 0f38 	tst.w	r3, #56	; 0x38
    2038:	d1ce      	bne.n	1fd8 <z_cbvprintf_impl+0x374>
    203a:	e751      	b.n	1ee0 <z_cbvprintf_impl+0x27c>
		conv->specifier_cat = SPECIFIER_PTR;
    203c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2040:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    2042:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    2046:	f361 0202 	bfi	r2, r1, #0, #3
    204a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    204e:	bf14      	ite	ne
    2050:	2301      	movne	r3, #1
    2052:	2300      	moveq	r3, #0
    2054:	e7e4      	b.n	2020 <z_cbvprintf_impl+0x3bc>
			unsupported = true;
    2056:	2301      	movs	r3, #1
    2058:	e7e2      	b.n	2020 <z_cbvprintf_impl+0x3bc>
		} else if (conv->width_present) {
    205a:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    205e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2060:	bfb4      	ite	lt
    2062:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
    2064:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    2068:	e6b0      	b.n	1dcc <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
    206a:	0799      	lsls	r1, r3, #30
    206c:	f57f aebd 	bpl.w	1dea <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
    2070:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    2072:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    2076:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2078:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    207c:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    2080:	f003 0207 	and.w	r2, r3, #7
    2084:	2a04      	cmp	r2, #4
    2086:	d107      	bne.n	2098 <z_cbvprintf_impl+0x434>
		    && !conv->prec_present) {
    2088:	078a      	lsls	r2, r1, #30
    208a:	d405      	bmi.n	2098 <z_cbvprintf_impl+0x434>
			if (conv->specifier_a) {
    208c:	f99d 2049 	ldrsb.w	r2, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    2090:	2a00      	cmp	r2, #0
    2092:	bfac      	ite	ge
    2094:	2706      	movge	r7, #6
    2096:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    2098:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    209c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    209e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    20a2:	d133      	bne.n	210c <z_cbvprintf_impl+0x4a8>
			switch (length_mod) {
    20a4:	1ecb      	subs	r3, r1, #3
    20a6:	2b04      	cmp	r3, #4
    20a8:	d804      	bhi.n	20b4 <z_cbvprintf_impl+0x450>
    20aa:	e8df f003 	tbb	[pc, r3]
    20ae:	4621      	.short	0x4621
    20b0:	2146      	.short	0x2146
    20b2:	21          	.byte	0x21
    20b3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    20b4:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    20b6:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    20b8:	ea4f 72e3 	mov.w	r2, r3, asr #31
    20bc:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    20c0:	d11c      	bne.n	20fc <z_cbvprintf_impl+0x498>
				value->sint = (signed char)value->sint;
    20c2:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    20c6:	17da      	asrs	r2, r3, #31
    20c8:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    20cc:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    20ce:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    20d2:	9307      	str	r3, [sp, #28]
    20d4:	079b      	lsls	r3, r3, #30
    20d6:	d050      	beq.n	217a <z_cbvprintf_impl+0x516>
			OUTS(sp, fp);
    20d8:	9b06      	ldr	r3, [sp, #24]
    20da:	9903      	ldr	r1, [sp, #12]
    20dc:	4632      	mov	r2, r6
    20de:	4650      	mov	r0, sl
    20e0:	f006 fe13 	bl	8d0a <outs>
    20e4:	2800      	cmp	r0, #0
    20e6:	f2c0 8355 	blt.w	2794 <z_cbvprintf_impl+0xb30>
    20ea:	4405      	add	r5, r0
			continue;
    20ec:	9e06      	ldr	r6, [sp, #24]
    20ee:	e5c1      	b.n	1c74 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    20f0:	f854 3b04 	ldr.w	r3, [r4], #4
    20f4:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    20f6:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
    20fa:	e7e8      	b.n	20ce <z_cbvprintf_impl+0x46a>
			} else if (length_mod == LENGTH_H) {
    20fc:	2902      	cmp	r1, #2
    20fe:	d1e5      	bne.n	20cc <z_cbvprintf_impl+0x468>
				value->sint = (short)value->sint;
    2100:	b21a      	sxth	r2, r3
    2102:	f343 33c0 	sbfx	r3, r3, #15, #1
    2106:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    210a:	e7df      	b.n	20cc <z_cbvprintf_impl+0x468>
		} else if (specifier_cat == SPECIFIER_UINT) {
    210c:	2b02      	cmp	r3, #2
    210e:	d124      	bne.n	215a <z_cbvprintf_impl+0x4f6>
			switch (length_mod) {
    2110:	1ecb      	subs	r3, r1, #3
    2112:	2b04      	cmp	r3, #4
    2114:	d804      	bhi.n	2120 <z_cbvprintf_impl+0x4bc>
    2116:	e8df f003 	tbb	[pc, r3]
    211a:	1018      	.short	0x1018
    211c:	1810      	.short	0x1810
    211e:	18          	.byte	0x18
    211f:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    2120:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    2122:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2126:	f04f 0200 	mov.w	r2, #0
    212a:	d014      	beq.n	2156 <z_cbvprintf_impl+0x4f2>
			} else if (length_mod == LENGTH_H) {
    212c:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    212e:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    2132:	d1cc      	bne.n	20ce <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned short)value->uint;
    2134:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    2136:	9310      	str	r3, [sp, #64]	; 0x40
    2138:	e7c9      	b.n	20ce <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap,
    213a:	3407      	adds	r4, #7
    213c:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    2140:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    2144:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    2148:	e7c1      	b.n	20ce <z_cbvprintf_impl+0x46a>
					(uint_value_type)va_arg(ap, size_t);
    214a:	f854 3b04 	ldr.w	r3, [r4], #4
    214e:	9310      	str	r3, [sp, #64]	; 0x40
    2150:	2300      	movs	r3, #0
    2152:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    2154:	e7bb      	b.n	20ce <z_cbvprintf_impl+0x46a>
				value->uint = (unsigned char)value->uint;
    2156:	b2db      	uxtb	r3, r3
    2158:	e7cd      	b.n	20f6 <z_cbvprintf_impl+0x492>
		} else if (specifier_cat == SPECIFIER_FP) {
    215a:	2b04      	cmp	r3, #4
    215c:	d108      	bne.n	2170 <z_cbvprintf_impl+0x50c>
					(sint_value_type)va_arg(ap, long long);
    215e:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2160:	f024 0407 	bic.w	r4, r4, #7
    2164:	e9d4 2300 	ldrd	r2, r3, [r4]
    2168:	3408      	adds	r4, #8
    216a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
    216e:	e7ae      	b.n	20ce <z_cbvprintf_impl+0x46a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2170:	2b03      	cmp	r3, #3
    2172:	d1ac      	bne.n	20ce <z_cbvprintf_impl+0x46a>
			value->ptr = va_arg(ap, void *);
    2174:	f854 3b04 	ldr.w	r3, [r4], #4
    2178:	e7dd      	b.n	2136 <z_cbvprintf_impl+0x4d2>
		switch (conv->specifier) {
    217a:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    217e:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    2182:	d8b3      	bhi.n	20ec <z_cbvprintf_impl+0x488>
    2184:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    2188:	d849      	bhi.n	221e <z_cbvprintf_impl+0x5ba>
    218a:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    218e:	f000 8091 	beq.w	22b4 <z_cbvprintf_impl+0x650>
    2192:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    2196:	d9a9      	bls.n	20ec <z_cbvprintf_impl+0x488>
    2198:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    219c:	d003      	beq.n	21a6 <z_cbvprintf_impl+0x542>
    219e:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    21a2:	2a02      	cmp	r2, #2
    21a4:	d8a2      	bhi.n	20ec <z_cbvprintf_impl+0x488>
	} u = {
    21a6:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    21aa:	2a00      	cmp	r2, #0
    21ac:	f2c0 8136 	blt.w	241c <z_cbvprintf_impl+0x7b8>
	} else if (conv->flag_plus) {
    21b0:	9b07      	ldr	r3, [sp, #28]
    21b2:	0718      	lsls	r0, r3, #28
    21b4:	f100 8135 	bmi.w	2422 <z_cbvprintf_impl+0x7be>
	} else if (conv->flag_space) {
    21b8:	f3c3 1900 	ubfx	r9, r3, #4, #1
    21bc:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    21c0:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    21c4:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    21c8:	2800      	cmp	r0, #0
    21ca:	f040 812d 	bne.w	2428 <z_cbvprintf_impl+0x7c4>
    21ce:	ea51 0602 	orrs.w	r6, r1, r2
    21d2:	bf14      	ite	ne
    21d4:	2601      	movne	r6, #1
    21d6:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    21d8:	02d2      	lsls	r2, r2, #11
    21da:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    21de:	02c9      	lsls	r1, r1, #11
		c = 'f';
    21e0:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    21e4:	ea40 0e01 	orr.w	lr, r0, r1
    21e8:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    21ec:	bf08      	it	eq
    21ee:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    21f2:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    21f6:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    21fa:	f000 8199 	beq.w	2530 <z_cbvprintf_impl+0x8cc>
		if (is_subnormal) {
    21fe:	2e00      	cmp	r6, #0
    2200:	f040 8144 	bne.w	248c <z_cbvprintf_impl+0x828>
		fract |= BIT_63;
    2204:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    2206:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    220a:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    220e:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2210:	2000      	movs	r0, #0
    2212:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    2216:	4606      	mov	r6, r0
		fract *= 5U;
    2218:	f04f 0c05 	mov.w	ip, #5
    221c:	e150      	b.n	24c0 <z_cbvprintf_impl+0x85c>
		switch (conv->specifier) {
    221e:	f1ab 0258 	sub.w	r2, fp, #88	; 0x58
    2222:	2a20      	cmp	r2, #32
    2224:	f63f af62 	bhi.w	20ec <z_cbvprintf_impl+0x488>
    2228:	a001      	add	r0, pc, #4	; (adr r0, 2230 <z_cbvprintf_impl+0x5cc>)
    222a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    222e:	bf00      	nop
    2230:	000023bb 	.word	0x000023bb
    2234:	000020ed 	.word	0x000020ed
    2238:	000020ed 	.word	0x000020ed
    223c:	000020ed 	.word	0x000020ed
    2240:	000020ed 	.word	0x000020ed
    2244:	000020ed 	.word	0x000020ed
    2248:	000020ed 	.word	0x000020ed
    224c:	000020ed 	.word	0x000020ed
    2250:	000020ed 	.word	0x000020ed
    2254:	000021a7 	.word	0x000021a7
    2258:	000020ed 	.word	0x000020ed
    225c:	0000233f 	.word	0x0000233f
    2260:	00002353 	.word	0x00002353
    2264:	000021a7 	.word	0x000021a7
    2268:	000021a7 	.word	0x000021a7
    226c:	000021a7 	.word	0x000021a7
    2270:	000020ed 	.word	0x000020ed
    2274:	00002353 	.word	0x00002353
    2278:	000020ed 	.word	0x000020ed
    227c:	000020ed 	.word	0x000020ed
    2280:	000020ed 	.word	0x000020ed
    2284:	000020ed 	.word	0x000020ed
    2288:	000023f5 	.word	0x000023f5
    228c:	000023bb 	.word	0x000023bb
    2290:	000023c1 	.word	0x000023c1
    2294:	000020ed 	.word	0x000020ed
    2298:	000020ed 	.word	0x000020ed
    229c:	000022bb 	.word	0x000022bb
    22a0:	000020ed 	.word	0x000020ed
    22a4:	000023bb 	.word	0x000023bb
    22a8:	000020ed 	.word	0x000020ed
    22ac:	000020ed 	.word	0x000020ed
    22b0:	000023bb 	.word	0x000023bb
			OUTC('%');
    22b4:	9903      	ldr	r1, [sp, #12]
    22b6:	4658      	mov	r0, fp
    22b8:	e4e6      	b.n	1c88 <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    22ba:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    22bc:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    22be:	db3a      	blt.n	2336 <z_cbvprintf_impl+0x6d2>
				len = strnlen(bps, precision);
    22c0:	4639      	mov	r1, r7
    22c2:	4630      	mov	r0, r6
    22c4:	f007 f876 	bl	93b4 <strnlen>
			bpe = bps + len;
    22c8:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    22ca:	2e00      	cmp	r6, #0
    22cc:	f43f af0e 	beq.w	20ec <z_cbvprintf_impl+0x488>
		char sign = 0;
    22d0:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    22d4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    22d8:	f013 0210 	ands.w	r2, r3, #16
    22dc:	9205      	str	r2, [sp, #20]
    22de:	f000 824e 	beq.w	277e <z_cbvprintf_impl+0xb1a>
			nj_len += 2U;
    22e2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    22e4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    22e8:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    22ec:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    22ee:	bf18      	it	ne
    22f0:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    22f2:	f8cd 801c 	str.w	r8, [sp, #28]
    22f6:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    22f8:	bf18      	it	ne
    22fa:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    22fc:	9b04      	ldr	r3, [sp, #16]
    22fe:	2b00      	cmp	r3, #0
    2300:	f340 8258 	ble.w	27b4 <z_cbvprintf_impl+0xb50>
			if (!conv->flag_dash) {
    2304:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    2308:	1a1b      	subs	r3, r3, r0
    230a:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    230c:	0753      	lsls	r3, r2, #29
    230e:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    2312:	f100 824f 	bmi.w	27b4 <z_cbvprintf_impl+0xb50>
				if (conv->flag_zero) {
    2316:	0650      	lsls	r0, r2, #25
    2318:	f140 823f 	bpl.w	279a <z_cbvprintf_impl+0xb36>
					if (sign != 0) {
    231c:	f1b9 0f00 	cmp.w	r9, #0
    2320:	d007      	beq.n	2332 <z_cbvprintf_impl+0x6ce>
						OUTC(sign);
    2322:	9903      	ldr	r1, [sp, #12]
    2324:	4648      	mov	r0, r9
    2326:	47d0      	blx	sl
    2328:	2800      	cmp	r0, #0
    232a:	f2c0 8233 	blt.w	2794 <z_cbvprintf_impl+0xb30>
    232e:	3501      	adds	r5, #1
						sign = 0;
    2330:	46d9      	mov	r9, fp
					pad = '0';
    2332:	2230      	movs	r2, #48	; 0x30
    2334:	e232      	b.n	279c <z_cbvprintf_impl+0xb38>
				len = strlen(bps);
    2336:	4630      	mov	r0, r6
    2338:	f007 f835 	bl	93a6 <strlen>
    233c:	e7c4      	b.n	22c8 <z_cbvprintf_impl+0x664>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    233e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2340:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
    2344:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
    2348:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    234c:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    234e:	2001      	movs	r0, #1
    2350:	e7c0      	b.n	22d4 <z_cbvprintf_impl+0x670>
			if (conv->flag_plus) {
    2352:	9b07      	ldr	r3, [sp, #28]
    2354:	071e      	lsls	r6, r3, #28
			} else if (conv->flag_space) {
    2356:	bf58      	it	pl
    2358:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
    235c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    2360:	bf54      	ite	pl
    2362:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
    2366:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
    236a:	2b00      	cmp	r3, #0
    236c:	da06      	bge.n	237c <z_cbvprintf_impl+0x718>
				value->uint = (uint_value_type)-sint;
    236e:	4252      	negs	r2, r2
    2370:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2374:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    2378:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    237c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2380:	9300      	str	r3, [sp, #0]
    2382:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    2386:	ab17      	add	r3, sp, #92	; 0x5c
    2388:	aa12      	add	r2, sp, #72	; 0x48
    238a:	f006 fc78 	bl	8c7e <encode_uint>
    238e:	4606      	mov	r6, r0
			if (precision >= 0) {
    2390:	2f00      	cmp	r7, #0
    2392:	db0c      	blt.n	23ae <z_cbvprintf_impl+0x74a>
				conv->flag_zero = false;
    2394:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    2398:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    239c:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    239e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    23a2:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    23a4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    23a8:	d901      	bls.n	23ae <z_cbvprintf_impl+0x74a>
					conv->pad0_value = precision - (int)len;
    23aa:	1afb      	subs	r3, r7, r3
    23ac:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    23ae:	2e00      	cmp	r6, #0
    23b0:	f43f ae9c 	beq.w	20ec <z_cbvprintf_impl+0x488>
    23b4:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    23b8:	e056      	b.n	2468 <z_cbvprintf_impl+0x804>
		switch (conv->specifier) {
    23ba:	f04f 0900 	mov.w	r9, #0
    23be:	e7dd      	b.n	237c <z_cbvprintf_impl+0x718>
			if (value->ptr != NULL) {
    23c0:	9810      	ldr	r0, [sp, #64]	; 0x40
    23c2:	2800      	cmp	r0, #0
    23c4:	f000 81d6 	beq.w	2774 <z_cbvprintf_impl+0xb10>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    23c8:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    23cc:	9300      	str	r3, [sp, #0]
    23ce:	aa12      	add	r2, sp, #72	; 0x48
    23d0:	ab17      	add	r3, sp, #92	; 0x5c
    23d2:	2100      	movs	r1, #0
    23d4:	f006 fc53 	bl	8c7e <encode_uint>
				conv->altform_0c = true;
    23d8:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    23dc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    23e0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    23e4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    23e8:	4606      	mov	r6, r0
				conv->altform_0c = true;
    23ea:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
    23ee:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
    23f2:	e7cd      	b.n	2390 <z_cbvprintf_impl+0x72c>
				store_count(conv, value->ptr, count);
    23f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    23f6:	2907      	cmp	r1, #7
    23f8:	f63f ae78 	bhi.w	20ec <z_cbvprintf_impl+0x488>
    23fc:	e8df f001 	tbb	[pc, r1]
    2400:	0c06040c 	.word	0x0c06040c
    2404:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2408:	701d      	strb	r5, [r3, #0]
		break;
    240a:	e66f      	b.n	20ec <z_cbvprintf_impl+0x488>
		*(short *)dp = (short)count;
    240c:	801d      	strh	r5, [r3, #0]
		break;
    240e:	e66d      	b.n	20ec <z_cbvprintf_impl+0x488>
		*(intmax_t *)dp = (intmax_t)count;
    2410:	17ea      	asrs	r2, r5, #31
    2412:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    2416:	e669      	b.n	20ec <z_cbvprintf_impl+0x488>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2418:	601d      	str	r5, [r3, #0]
		break;
    241a:	e667      	b.n	20ec <z_cbvprintf_impl+0x488>
		*sign = '-';
    241c:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2420:	e6ce      	b.n	21c0 <z_cbvprintf_impl+0x55c>
		*sign = '+';
    2422:	f04f 092b 	mov.w	r9, #43	; 0x2b
    2426:	e6cb      	b.n	21c0 <z_cbvprintf_impl+0x55c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    2428:	f240 76ff 	movw	r6, #2047	; 0x7ff
    242c:	42b0      	cmp	r0, r6
    242e:	d12a      	bne.n	2486 <z_cbvprintf_impl+0x822>
		if (fract == 0) {
    2430:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    2432:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
    2436:	d11e      	bne.n	2476 <z_cbvprintf_impl+0x812>
			if (isupper((unsigned char)c) != 0) {
    2438:	2b1a      	cmp	r3, #26
    243a:	bf35      	itete	cc
    243c:	2349      	movcc	r3, #73	; 0x49
    243e:	2369      	movcs	r3, #105	; 0x69
    2440:	214e      	movcc	r1, #78	; 0x4e
    2442:	216e      	movcs	r1, #110	; 0x6e
    2444:	bf34      	ite	cc
    2446:	2246      	movcc	r2, #70	; 0x46
    2448:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
    244a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    244e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    2452:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    2456:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    245a:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    245e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    2462:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    2466:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    2468:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    246a:	f1b9 0f00 	cmp.w	r9, #0
    246e:	f43f af31 	beq.w	22d4 <z_cbvprintf_impl+0x670>
			nj_len += 1U;
    2472:	3001      	adds	r0, #1
    2474:	e72e      	b.n	22d4 <z_cbvprintf_impl+0x670>
			if (isupper((unsigned char)c) != 0) {
    2476:	2b19      	cmp	r3, #25
    2478:	bf8b      	itete	hi
    247a:	236e      	movhi	r3, #110	; 0x6e
    247c:	234e      	movls	r3, #78	; 0x4e
    247e:	2161      	movhi	r1, #97	; 0x61
    2480:	2141      	movls	r1, #65	; 0x41
    2482:	461a      	mov	r2, r3
    2484:	e7e1      	b.n	244a <z_cbvprintf_impl+0x7e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    2486:	2600      	movs	r6, #0
    2488:	e6a6      	b.n	21d8 <z_cbvprintf_impl+0x574>
				expo--;
    248a:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    248c:	1849      	adds	r1, r1, r1
    248e:	4152      	adcs	r2, r2
    2490:	2a00      	cmp	r2, #0
    2492:	dafa      	bge.n	248a <z_cbvprintf_impl+0x826>
    2494:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    2498:	e6b4      	b.n	2204 <z_cbvprintf_impl+0x5a0>
			fract >>= 1;
    249a:	0849      	lsrs	r1, r1, #1
    249c:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    24a0:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    24a2:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    24a6:	4640      	mov	r0, r8
			expo++;
    24a8:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    24ac:	d2f5      	bcs.n	249a <z_cbvprintf_impl+0x836>
		fract *= 5U;
    24ae:	fb0c fe02 	mul.w	lr, ip, r2
    24b2:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
    24b6:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
    24ba:	4472      	add	r2, lr
		decexp--;
    24bc:	3e01      	subs	r6, #1
    24be:	2001      	movs	r0, #1
	while (expo < -2) {
    24c0:	f118 0f02 	cmn.w	r8, #2
    24c4:	dbe9      	blt.n	249a <z_cbvprintf_impl+0x836>
    24c6:	b108      	cbz	r0, 24cc <z_cbvprintf_impl+0x868>
    24c8:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
    24cc:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
    24d0:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    24d4:	dc2f      	bgt.n	2536 <z_cbvprintf_impl+0x8d2>
	fract >>= (4 - expo);
    24d6:	f1c8 0004 	rsb	r0, r8, #4
    24da:	f108 081c 	add.w	r8, r8, #28
    24de:	f1a0 0c20 	sub.w	ip, r0, #32
    24e2:	40c2      	lsrs	r2, r0
    24e4:	fa21 f300 	lsr.w	r3, r1, r0
    24e8:	fa01 f808 	lsl.w	r8, r1, r8
	if ((c == 'g') || (c == 'G')) {
    24ec:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    24f0:	ea42 0208 	orr.w	r2, r2, r8
    24f4:	fa21 fc0c 	lsr.w	ip, r1, ip
	if ((c == 'g') || (c == 'G')) {
    24f8:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    24fa:	ea42 020c 	orr.w	r2, r2, ip
    24fe:	9308      	str	r3, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    2500:	d13a      	bne.n	2578 <z_cbvprintf_impl+0x914>
		if (decexp < (-4 + 1) || decexp > precision) {
    2502:	1cf3      	adds	r3, r6, #3
    2504:	db01      	blt.n	250a <z_cbvprintf_impl+0x8a6>
    2506:	42b7      	cmp	r7, r6
    2508:	da2b      	bge.n	2562 <z_cbvprintf_impl+0x8fe>
			c += 'e' - 'g';  /* e or E */
    250a:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    250e:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    2510:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    2514:	dd7f      	ble.n	2616 <z_cbvprintf_impl+0x9b2>
		if (!conv->flag_hash && (precision > 0)) {
    2516:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    251a:	0680      	lsls	r0, r0, #26
				precision--;
    251c:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    2520:	d479      	bmi.n	2616 <z_cbvprintf_impl+0x9b2>
    2522:	1e3b      	subs	r3, r7, #0
    2524:	bf18      	it	ne
    2526:	2301      	movne	r3, #1
	bool prune_zero = false;
    2528:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    252a:	f107 0801 	add.w	r8, r7, #1
    252e:	e02d      	b.n	258c <z_cbvprintf_impl+0x928>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2530:	f04f 0800 	mov.w	r8, #0
    2534:	e66c      	b.n	2210 <z_cbvprintf_impl+0x5ac>
		fract += 2;
    2536:	3202      	adds	r2, #2
    2538:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    253c:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
    253e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    2542:	f006 fb6d 	bl	8c20 <_ldiv5>
		expo--;
    2546:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    254a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    254e:	3601      	adds	r6, #1
			fract <<= 1;
    2550:	1892      	adds	r2, r2, r2
    2552:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    2554:	2900      	cmp	r1, #0
			expo--;
    2556:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    255a:	daf9      	bge.n	2550 <z_cbvprintf_impl+0x8ec>
    255c:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    2560:	e7b4      	b.n	24cc <z_cbvprintf_impl+0x868>
		if (!conv->flag_hash && (precision > 0)) {
    2562:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2566:	0699      	lsls	r1, r3, #26
			precision -= decexp;
    2568:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    256c:	d451      	bmi.n	2612 <z_cbvprintf_impl+0x9ae>
    256e:	1e3b      	subs	r3, r7, #0
    2570:	bf18      	it	ne
    2572:	2301      	movne	r3, #1
	bool prune_zero = false;
    2574:	9305      	str	r3, [sp, #20]
    2576:	e004      	b.n	2582 <z_cbvprintf_impl+0x91e>
    2578:	2300      	movs	r3, #0
	if (c == 'f') {
    257a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    257e:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    2580:	d1d3      	bne.n	252a <z_cbvprintf_impl+0x8c6>
		if (decimals < 0) {
    2582:	eb17 0806 	adds.w	r8, r7, r6
    2586:	f04f 0b66 	mov.w	fp, #102	; 0x66
    258a:	d446      	bmi.n	261a <z_cbvprintf_impl+0x9b6>
	if (decimals > 16) {
    258c:	f1b8 0f10 	cmp.w	r8, #16
    2590:	bfa8      	it	ge
    2592:	f04f 0810 	movge.w	r8, #16
    2596:	2010      	movs	r0, #16
    2598:	900b      	str	r0, [sp, #44]	; 0x2c
	uint64_t round = BIT64(59); /* 0.5 */
    259a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    259e:	2000      	movs	r0, #0
    25a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
	*v >>= 1;
    25a4:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    25a8:	f1b8 0f00 	cmp.w	r8, #0
    25ac:	d138      	bne.n	2620 <z_cbvprintf_impl+0x9bc>
	fract += round;
    25ae:	9908      	ldr	r1, [sp, #32]
    25b0:	1812      	adds	r2, r2, r0
    25b2:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    25b6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    25ba:	d23f      	bcs.n	263c <z_cbvprintf_impl+0x9d8>
	fract += round;
    25bc:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    25c0:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    25c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    25c6:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    25ca:	f040 80b2 	bne.w	2732 <z_cbvprintf_impl+0xace>
		if (decexp > 0) {
    25ce:	2e00      	cmp	r6, #0
    25d0:	dc3f      	bgt.n	2652 <z_cbvprintf_impl+0x9ee>
			*buf++ = '0';
    25d2:	2130      	movs	r1, #48	; 0x30
    25d4:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    25d8:	2a00      	cmp	r2, #0
    25da:	d163      	bne.n	26a4 <z_cbvprintf_impl+0xa40>
    25dc:	2f00      	cmp	r7, #0
    25de:	f340 81a8 	ble.w	2932 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    25e2:	222e      	movs	r2, #46	; 0x2e
    25e4:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    25e8:	b186      	cbz	r6, 260c <z_cbvprintf_impl+0x9a8>
			conv->pad0_value = -decexp;
    25ea:	4272      	negs	r2, r6
    25ec:	42ba      	cmp	r2, r7
    25ee:	bfa8      	it	ge
    25f0:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    25f2:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    25f6:	9213      	str	r2, [sp, #76]	; 0x4c
    25f8:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    25fa:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    25fe:	bfd4      	ite	le
    2600:	2200      	movle	r2, #0
    2602:	2201      	movgt	r2, #1
    2604:	f362 1145 	bfi	r1, r2, #5, #1
    2608:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    260c:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    2610:	e037      	b.n	2682 <z_cbvprintf_impl+0xa1e>
	bool prune_zero = false;
    2612:	2300      	movs	r3, #0
    2614:	e7ae      	b.n	2574 <z_cbvprintf_impl+0x910>
    2616:	2300      	movs	r3, #0
    2618:	e786      	b.n	2528 <z_cbvprintf_impl+0x8c4>
			decimals = 0;
    261a:	f04f 0800 	mov.w	r8, #0
    261e:	e7ba      	b.n	2596 <z_cbvprintf_impl+0x932>
	*v >>= 1;
    2620:	0840      	lsrs	r0, r0, #1
    2622:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    2626:	085b      	lsrs	r3, r3, #1
    2628:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    262c:	a80e      	add	r0, sp, #56	; 0x38
    262e:	9209      	str	r2, [sp, #36]	; 0x24
    2630:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2634:	f006 faf4 	bl	8c20 <_ldiv5>
    2638:	9a09      	ldr	r2, [sp, #36]	; 0x24
}
    263a:	e7b3      	b.n	25a4 <z_cbvprintf_impl+0x940>
	*v >>= 1;
    263c:	0852      	lsrs	r2, r2, #1
    263e:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    2642:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    2644:	0849      	lsrs	r1, r1, #1
    2646:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    264a:	3601      	adds	r6, #1
	_ldiv5(v);
    264c:	f006 fae8 	bl	8c20 <_ldiv5>
		decexp++;
    2650:	e7b6      	b.n	25c0 <z_cbvprintf_impl+0x95c>
	char *buf = bps;
    2652:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    2656:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2658:	2900      	cmp	r1, #0
    265a:	dd09      	ble.n	2670 <z_cbvprintf_impl+0xa0c>
				*buf++ = _get_digit(&fract, &digit_count);
    265c:	a90b      	add	r1, sp, #44	; 0x2c
    265e:	a80c      	add	r0, sp, #48	; 0x30
    2660:	9207      	str	r2, [sp, #28]
    2662:	f006 faf5 	bl	8c50 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2666:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    2668:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    266c:	9a07      	ldr	r2, [sp, #28]
    266e:	d1f2      	bne.n	2656 <z_cbvprintf_impl+0x9f2>
			conv->pad0_value = decexp;
    2670:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    2672:	b99a      	cbnz	r2, 269c <z_cbvprintf_impl+0xa38>
    2674:	2f00      	cmp	r7, #0
    2676:	f340 815a 	ble.w	292e <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    267a:	212e      	movs	r1, #46	; 0x2e
    267c:	f808 1b01 	strb.w	r1, [r8], #1
    2680:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    2682:	2f00      	cmp	r7, #0
    2684:	dd17      	ble.n	26b6 <z_cbvprintf_impl+0xa52>
    2686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2688:	2a00      	cmp	r2, #0
    268a:	dd14      	ble.n	26b6 <z_cbvprintf_impl+0xa52>
		*buf++ = _get_digit(&fract, &digit_count);
    268c:	a90b      	add	r1, sp, #44	; 0x2c
    268e:	a80c      	add	r0, sp, #48	; 0x30
    2690:	f006 fade 	bl	8c50 <_get_digit>
		precision--;
    2694:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    2696:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    269a:	e7f2      	b.n	2682 <z_cbvprintf_impl+0xa1e>
			*buf++ = '.';
    269c:	222e      	movs	r2, #46	; 0x2e
    269e:	f808 2b01 	strb.w	r2, [r8], #1
    26a2:	e7ed      	b.n	2680 <z_cbvprintf_impl+0xa1c>
    26a4:	222e      	movs	r2, #46	; 0x2e
    26a6:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    26aa:	2e00      	cmp	r6, #0
    26ac:	d0ae      	beq.n	260c <z_cbvprintf_impl+0x9a8>
    26ae:	2f00      	cmp	r7, #0
    26b0:	dc9b      	bgt.n	25ea <z_cbvprintf_impl+0x986>
			*buf++ = '.';
    26b2:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    26b6:	9b05      	ldr	r3, [sp, #20]
    26b8:	2b00      	cmp	r3, #0
    26ba:	d14e      	bne.n	275a <z_cbvprintf_impl+0xaf6>
	conv->pad0_pre_exp = precision;
    26bc:	9714      	str	r7, [sp, #80]	; 0x50
    26be:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    26c0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    26c4:	2a45      	cmp	r2, #69	; 0x45
    26c6:	d123      	bne.n	2710 <z_cbvprintf_impl+0xaac>
		if (decexp < 0) {
    26c8:	2e00      	cmp	r6, #0
			decexp = -decexp;
    26ca:	bfba      	itte	lt
    26cc:	4276      	neglt	r6, r6
			*buf++ = '-';
    26ce:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    26d0:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    26d2:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    26d4:	bfc8      	it	gt
    26d6:	2164      	movgt	r1, #100	; 0x64
    26d8:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    26da:	bfd1      	iteee	le
    26dc:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    26de:	fbb6 f3f1 	udivgt	r3, r6, r1
    26e2:	1cfa      	addgt	r2, r7, #3
    26e4:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    26e8:	bfc8      	it	gt
    26ea:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    26ee:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    26f2:	bfc8      	it	gt
    26f4:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    26f6:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    26fa:	fbb6 f3f1 	udiv	r3, r6, r1
    26fe:	4617      	mov	r7, r2
    2700:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    2704:	fb01 6313 	mls	r3, r1, r3, r6
    2708:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    270a:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    270e:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    2710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2712:	2b00      	cmp	r3, #0
    2714:	dc2c      	bgt.n	2770 <z_cbvprintf_impl+0xb0c>
    2716:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2718:	2b00      	cmp	r3, #0
    271a:	bfd4      	ite	le
    271c:	2300      	movle	r3, #0
    271e:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    2720:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2724:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    2728:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    272a:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    272e:	703b      	strb	r3, [r7, #0]
	return bps;
    2730:	e699      	b.n	2466 <z_cbvprintf_impl+0x802>
		*buf = _get_digit(&fract, &digit_count);
    2732:	a90b      	add	r1, sp, #44	; 0x2c
    2734:	a80c      	add	r0, sp, #48	; 0x30
    2736:	9207      	str	r2, [sp, #28]
    2738:	f006 fa8a 	bl	8c50 <_get_digit>
		if (*buf++ != '0') {
    273c:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    273e:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    2742:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2744:	bf18      	it	ne
    2746:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    274a:	b912      	cbnz	r2, 2752 <z_cbvprintf_impl+0xaee>
    274c:	2f00      	cmp	r7, #0
    274e:	f340 80f0 	ble.w	2932 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
    2752:	222e      	movs	r2, #46	; 0x2e
    2754:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    2758:	e758      	b.n	260c <z_cbvprintf_impl+0x9a8>
		while (*--buf == '0') {
    275a:	4647      	mov	r7, r8
    275c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2760:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2764:	2a30      	cmp	r2, #48	; 0x30
    2766:	d0f8      	beq.n	275a <z_cbvprintf_impl+0xaf6>
    2768:	2a2e      	cmp	r2, #46	; 0x2e
    276a:	bf08      	it	eq
    276c:	4647      	moveq	r7, r8
    276e:	e7a7      	b.n	26c0 <z_cbvprintf_impl+0xa5c>
		|| (conv->pad0_pre_exp > 0);
    2770:	2301      	movs	r3, #1
    2772:	e7d5      	b.n	2720 <z_cbvprintf_impl+0xabc>
			bpe = bps + 5;
    2774:	4f70      	ldr	r7, [pc, #448]	; (2938 <z_cbvprintf_impl+0xcd4>)
		char sign = 0;
    2776:	4681      	mov	r9, r0
			bps = "(nil)";
    2778:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    277a:	2005      	movs	r0, #5
    277c:	e5aa      	b.n	22d4 <z_cbvprintf_impl+0x670>
		} else if (conv->altform_0) {
    277e:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2780:	bf48      	it	mi
    2782:	3001      	addmi	r0, #1
    2784:	e5ae      	b.n	22e4 <z_cbvprintf_impl+0x680>
					OUTC(pad);
    2786:	4610      	mov	r0, r2
    2788:	9209      	str	r2, [sp, #36]	; 0x24
    278a:	9903      	ldr	r1, [sp, #12]
    278c:	47d0      	blx	sl
    278e:	2800      	cmp	r0, #0
    2790:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2792:	da05      	bge.n	27a0 <z_cbvprintf_impl+0xb3c>
#undef OUTS
#undef OUTC
}
    2794:	b01f      	add	sp, #124	; 0x7c
    2796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    279a:	2220      	movs	r2, #32
					pad = '0';
    279c:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    27a0:	4659      	mov	r1, fp
    27a2:	2900      	cmp	r1, #0
    27a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    27a8:	dced      	bgt.n	2786 <z_cbvprintf_impl+0xb22>
    27aa:	9b04      	ldr	r3, [sp, #16]
    27ac:	f8cd b010 	str.w	fp, [sp, #16]
    27b0:	442b      	add	r3, r5
    27b2:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    27b4:	f1b9 0f00 	cmp.w	r9, #0
    27b8:	d005      	beq.n	27c6 <z_cbvprintf_impl+0xb62>
			OUTC(sign);
    27ba:	9903      	ldr	r1, [sp, #12]
    27bc:	4648      	mov	r0, r9
    27be:	47d0      	blx	sl
    27c0:	2800      	cmp	r0, #0
    27c2:	dbe7      	blt.n	2794 <z_cbvprintf_impl+0xb30>
    27c4:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    27c6:	9b08      	ldr	r3, [sp, #32]
    27c8:	2b00      	cmp	r3, #0
    27ca:	d075      	beq.n	28b8 <z_cbvprintf_impl+0xc54>
			if (conv->specifier_a) {
    27cc:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    27d0:	2b00      	cmp	r3, #0
    27d2:	db28      	blt.n	2826 <z_cbvprintf_impl+0xbc2>
    27d4:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp) != 0) {
    27d6:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    27da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    27de:	2b09      	cmp	r3, #9
    27e0:	46d9      	mov	r9, fp
    27e2:	f10b 0b01 	add.w	fp, fp, #1
    27e6:	d93f      	bls.n	2868 <z_cbvprintf_impl+0xc04>
				if (!conv->pad_postdp) {
    27e8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    27ec:	1bae      	subs	r6, r5, r6
    27ee:	0699      	lsls	r1, r3, #26
    27f0:	444e      	add	r6, r9
    27f2:	d407      	bmi.n	2804 <z_cbvprintf_impl+0xba0>
					while (pad_len-- > 0) {
    27f4:	4642      	mov	r2, r8
    27f6:	2a00      	cmp	r2, #0
    27f8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    27fc:	dc39      	bgt.n	2872 <z_cbvprintf_impl+0xc0e>
    27fe:	9b07      	ldr	r3, [sp, #28]
    2800:	4433      	add	r3, r6
    2802:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    2804:	f899 0000 	ldrb.w	r0, [r9]
    2808:	282e      	cmp	r0, #46	; 0x2e
    280a:	d10a      	bne.n	2822 <z_cbvprintf_impl+0xbbe>
					OUTC(*cp++);
    280c:	9903      	ldr	r1, [sp, #12]
    280e:	47d0      	blx	sl
						OUTC('0');
    2810:	2800      	cmp	r0, #0
    2812:	dbbf      	blt.n	2794 <z_cbvprintf_impl+0xb30>
					while (pad_len-- > 0) {
    2814:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    2818:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    281c:	dc2f      	bgt.n	287e <z_cbvprintf_impl+0xc1a>
					OUTC(*cp++);
    281e:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
    2822:	464d      	mov	r5, r9
    2824:	e035      	b.n	2892 <z_cbvprintf_impl+0xc2e>
    2826:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    2828:	f899 0000 	ldrb.w	r0, [r9]
    282c:	2870      	cmp	r0, #112	; 0x70
    282e:	46c8      	mov	r8, r9
    2830:	f109 0901 	add.w	r9, r9, #1
    2834:	d113      	bne.n	285e <z_cbvprintf_impl+0xbfa>
    2836:	1bae      	subs	r6, r5, r6
    2838:	9d14      	ldr	r5, [sp, #80]	; 0x50
    283a:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    283c:	4435      	add	r5, r6
    283e:	1bab      	subs	r3, r5, r6
    2840:	2b00      	cmp	r3, #0
    2842:	dc31      	bgt.n	28a8 <z_cbvprintf_impl+0xc44>
			OUTS(cp, bpe);
    2844:	9903      	ldr	r1, [sp, #12]
    2846:	463b      	mov	r3, r7
    2848:	4642      	mov	r2, r8
    284a:	4650      	mov	r0, sl
    284c:	f006 fa5d 	bl	8d0a <outs>
    2850:	2800      	cmp	r0, #0
    2852:	db9f      	blt.n	2794 <z_cbvprintf_impl+0xb30>
    2854:	4430      	add	r0, r6
    2856:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    2858:	4605      	mov	r5, r0
    285a:	4406      	add	r6, r0
    285c:	e062      	b.n	2924 <z_cbvprintf_impl+0xcc0>
					OUTC(*cp++);
    285e:	9903      	ldr	r1, [sp, #12]
    2860:	47d0      	blx	sl
    2862:	2800      	cmp	r0, #0
    2864:	dae0      	bge.n	2828 <z_cbvprintf_impl+0xbc4>
    2866:	e795      	b.n	2794 <z_cbvprintf_impl+0xb30>
					OUTC(*cp++);
    2868:	9903      	ldr	r1, [sp, #12]
    286a:	47d0      	blx	sl
    286c:	2800      	cmp	r0, #0
    286e:	dab2      	bge.n	27d6 <z_cbvprintf_impl+0xb72>
    2870:	e790      	b.n	2794 <z_cbvprintf_impl+0xb30>
						OUTC('0');
    2872:	9903      	ldr	r1, [sp, #12]
    2874:	2030      	movs	r0, #48	; 0x30
    2876:	47d0      	blx	sl
    2878:	2800      	cmp	r0, #0
    287a:	dabb      	bge.n	27f4 <z_cbvprintf_impl+0xb90>
    287c:	e78a      	b.n	2794 <z_cbvprintf_impl+0xb30>
						OUTC('0');
    287e:	9903      	ldr	r1, [sp, #12]
    2880:	2030      	movs	r0, #48	; 0x30
    2882:	47d0      	blx	sl
    2884:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2888:	e7c2      	b.n	2810 <z_cbvprintf_impl+0xbac>
					OUTC(*cp++);
    288a:	9903      	ldr	r1, [sp, #12]
    288c:	47d0      	blx	sl
    288e:	2800      	cmp	r0, #0
    2890:	db80      	blt.n	2794 <z_cbvprintf_impl+0xb30>
				while (isdigit((unsigned char)*cp) != 0) {
    2892:	7828      	ldrb	r0, [r5, #0]
    2894:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2898:	2b09      	cmp	r3, #9
    289a:	46a8      	mov	r8, r5
    289c:	f105 0501 	add.w	r5, r5, #1
    28a0:	d9f3      	bls.n	288a <z_cbvprintf_impl+0xc26>
    28a2:	eba6 0609 	sub.w	r6, r6, r9
    28a6:	e7c7      	b.n	2838 <z_cbvprintf_impl+0xbd4>
				OUTC('0');
    28a8:	9903      	ldr	r1, [sp, #12]
    28aa:	2030      	movs	r0, #48	; 0x30
    28ac:	47d0      	blx	sl
    28ae:	2800      	cmp	r0, #0
    28b0:	f6ff af70 	blt.w	2794 <z_cbvprintf_impl+0xb30>
    28b4:	3601      	adds	r6, #1
    28b6:	e7c2      	b.n	283e <z_cbvprintf_impl+0xbda>
			if (conv->altform_0c | conv->altform_0) {
    28b8:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    28bc:	06da      	lsls	r2, r3, #27
    28be:	d401      	bmi.n	28c4 <z_cbvprintf_impl+0xc60>
    28c0:	071b      	lsls	r3, r3, #28
    28c2:	d506      	bpl.n	28d2 <z_cbvprintf_impl+0xc6e>
				OUTC('0');
    28c4:	9903      	ldr	r1, [sp, #12]
    28c6:	2030      	movs	r0, #48	; 0x30
    28c8:	47d0      	blx	sl
    28ca:	2800      	cmp	r0, #0
    28cc:	f6ff af62 	blt.w	2794 <z_cbvprintf_impl+0xb30>
    28d0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    28d2:	9b05      	ldr	r3, [sp, #20]
    28d4:	b13b      	cbz	r3, 28e6 <z_cbvprintf_impl+0xc82>
				OUTC(conv->specifier);
    28d6:	9903      	ldr	r1, [sp, #12]
    28d8:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    28dc:	47d0      	blx	sl
    28de:	2800      	cmp	r0, #0
    28e0:	f6ff af58 	blt.w	2794 <z_cbvprintf_impl+0xb30>
    28e4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    28e6:	44a8      	add	r8, r5
    28e8:	e006      	b.n	28f8 <z_cbvprintf_impl+0xc94>
				OUTC('0');
    28ea:	9903      	ldr	r1, [sp, #12]
    28ec:	2030      	movs	r0, #48	; 0x30
    28ee:	47d0      	blx	sl
    28f0:	2800      	cmp	r0, #0
    28f2:	f6ff af4f 	blt.w	2794 <z_cbvprintf_impl+0xb30>
    28f6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    28f8:	eba8 0305 	sub.w	r3, r8, r5
    28fc:	2b00      	cmp	r3, #0
    28fe:	dcf4      	bgt.n	28ea <z_cbvprintf_impl+0xc86>
			OUTS(bps, bpe);
    2900:	9903      	ldr	r1, [sp, #12]
    2902:	463b      	mov	r3, r7
    2904:	4632      	mov	r2, r6
    2906:	4650      	mov	r0, sl
    2908:	f006 f9ff 	bl	8d0a <outs>
    290c:	2800      	cmp	r0, #0
    290e:	f6ff af41 	blt.w	2794 <z_cbvprintf_impl+0xb30>
    2912:	4428      	add	r0, r5
    2914:	e79f      	b.n	2856 <z_cbvprintf_impl+0xbf2>
			OUTC(' ');
    2916:	9903      	ldr	r1, [sp, #12]
    2918:	2020      	movs	r0, #32
    291a:	47d0      	blx	sl
    291c:	2800      	cmp	r0, #0
    291e:	f6ff af39 	blt.w	2794 <z_cbvprintf_impl+0xb30>
    2922:	3501      	adds	r5, #1
		while (width > 0) {
    2924:	1b73      	subs	r3, r6, r5
    2926:	2b00      	cmp	r3, #0
    2928:	dcf5      	bgt.n	2916 <z_cbvprintf_impl+0xcb2>
    292a:	f7ff bbdf 	b.w	20ec <z_cbvprintf_impl+0x488>
			decexp = 0;
    292e:	4616      	mov	r6, r2
    2930:	e6c1      	b.n	26b6 <z_cbvprintf_impl+0xa52>
		if (*buf++ != '0') {
    2932:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    2936:	e6be      	b.n	26b6 <z_cbvprintf_impl+0xa52>
    2938:	0000a729 	.word	0x0000a729

0000293c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    293c:	b508      	push	{r3, lr}
    293e:	4604      	mov	r4, r0
	__asm__ volatile(
    2940:	f04f 0220 	mov.w	r2, #32
    2944:	f3ef 8311 	mrs	r3, BASEPRI
    2948:	f382 8812 	msr	BASEPRI_MAX, r2
    294c:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
    2950:	f003 f81c 	bl	598c <sys_clock_disable>
	}

	sys_arch_reboot(type);
    2954:	4620      	mov	r0, r4
    2956:	f001 fed3 	bl	4700 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    295a:	4803      	ldr	r0, [pc, #12]	; (2968 <sys_reboot+0x2c>)
    295c:	f006 f83e 	bl	89dc <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2960:	f001 f838 	bl	39d4 <arch_cpu_idle>
    2964:	e7fc      	b.n	2960 <sys_reboot+0x24>
    2966:	bf00      	nop
    2968:	0000a72a 	.word	0x0000a72a

0000296c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    296c:	f003 bc16 	b.w	619c <SystemInit>

00002970 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    2970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2974:	f8df 8058 	ldr.w	r8, [pc, #88]	; 29d0 <activate_foreach_backend+0x60>
{
    2978:	4604      	mov	r4, r0
	while (mask_cpy) {
    297a:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    297c:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    2980:	b914      	cbnz	r4, 2988 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    2982:	4638      	mov	r0, r7
    2984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    2988:	fa94 f5a4 	rbit	r5, r4
    298c:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    2990:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2994:	012e      	lsls	r6, r5, #4
    2996:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    299a:	ea6f 0a03 	mvn.w	sl, r3
    299e:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    29a2:	7b2b      	ldrb	r3, [r5, #12]
    29a4:	2b00      	cmp	r3, #0
    29a6:	d0eb      	beq.n	2980 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    29a8:	f858 3006 	ldr.w	r3, [r8, r6]
    29ac:	691b      	ldr	r3, [r3, #16]
    29ae:	b94b      	cbnz	r3, 29c4 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    29b0:	4446      	add	r6, r8
			log_backend_enable(backend,
    29b2:	2204      	movs	r2, #4
    29b4:	6873      	ldr	r3, [r6, #4]
    29b6:	4628      	mov	r0, r5
    29b8:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    29ba:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    29be:	f000 fa59 	bl	2e74 <log_backend_enable>
    29c2:	e7dd      	b.n	2980 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    29c4:	4628      	mov	r0, r5
    29c6:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    29c8:	2800      	cmp	r0, #0
    29ca:	d1d9      	bne.n	2980 <activate_foreach_backend+0x10>
    29cc:	e7f0      	b.n	29b0 <activate_foreach_backend+0x40>
    29ce:	bf00      	nop
    29d0:	0000a1e0 	.word	0x0000a1e0

000029d4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    29d4:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    29d6:	4910      	ldr	r1, [pc, #64]	; (2a18 <enable_logger+0x44>)
    29d8:	4810      	ldr	r0, [pc, #64]	; (2a1c <enable_logger+0x48>)
{
    29da:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    29dc:	2200      	movs	r2, #0
    29de:	f007 fa01 	bl	9de4 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    29e2:	4d0f      	ldr	r5, [pc, #60]	; (2a20 <enable_logger+0x4c>)
    29e4:	490f      	ldr	r1, [pc, #60]	; (2a24 <enable_logger+0x50>)
    29e6:	2200      	movs	r2, #0
    29e8:	2300      	movs	r3, #0
    29ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
    29ee:	2400      	movs	r4, #0
    29f0:	230e      	movs	r3, #14
    29f2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    29f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    29fa:	4b0b      	ldr	r3, [pc, #44]	; (2a28 <enable_logger+0x54>)
    29fc:	9400      	str	r4, [sp, #0]
    29fe:	f44f 7240 	mov.w	r2, #768	; 0x300
    2a02:	4628      	mov	r0, r5
    2a04:	f004 fe9e 	bl	7744 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    2a08:	4908      	ldr	r1, [pc, #32]	; (2a2c <enable_logger+0x58>)
    2a0a:	4628      	mov	r0, r5
    2a0c:	f004 fe2c 	bl	7668 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    2a10:	4620      	mov	r0, r4
    2a12:	b009      	add	sp, #36	; 0x24
    2a14:	bd30      	pop	{r4, r5, pc}
    2a16:	bf00      	nop
    2a18:	00002a31 	.word	0x00002a31
    2a1c:	200006d8 	.word	0x200006d8
    2a20:	20000220 	.word	0x20000220
    2a24:	20001680 	.word	0x20001680
    2a28:	00002d21 	.word	0x00002d21
    2a2c:	0000a753 	.word	0x0000a753

00002a30 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2a30:	4801      	ldr	r0, [pc, #4]	; (2a38 <log_process_thread_timer_expiry_fn+0x8>)
    2a32:	f004 bfe3 	b.w	79fc <z_impl_k_sem_give>
    2a36:	bf00      	nop
    2a38:	2000020c 	.word	0x2000020c

00002a3c <z_log_init>:
{
    2a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a40:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    2a42:	481f      	ldr	r0, [pc, #124]	; (2ac0 <z_log_init+0x84>)
{
    2a44:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    2a46:	f006 fbe0 	bl	920a <atomic_inc>
    2a4a:	4606      	mov	r6, r0
    2a4c:	2800      	cmp	r0, #0
    2a4e:	d030      	beq.n	2ab2 <z_log_init+0x76>
	uint32_t mask = 0;
    2a50:	2500      	movs	r5, #0
}
    2a52:	4628      	mov	r0, r5
    2a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    2a58:	7b23      	ldrb	r3, [r4, #12]
    2a5a:	b173      	cbz	r3, 2a7a <z_log_init+0x3e>
	if (backend->api->init) {
    2a5c:	6823      	ldr	r3, [r4, #0]
    2a5e:	68db      	ldr	r3, [r3, #12]
    2a60:	b10b      	cbz	r3, 2a66 <z_log_init+0x2a>
		backend->api->init(backend);
    2a62:	4620      	mov	r0, r4
    2a64:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    2a66:	6823      	ldr	r3, [r4, #0]
    2a68:	691b      	ldr	r3, [r3, #16]
    2a6a:	b9d3      	cbnz	r3, 2aa2 <z_log_init+0x66>
				log_backend_enable(backend,
    2a6c:	6863      	ldr	r3, [r4, #4]
    2a6e:	2204      	movs	r2, #4
    2a70:	6819      	ldr	r1, [r3, #0]
    2a72:	4620      	mov	r0, r4
    2a74:	f000 f9fe 	bl	2e74 <log_backend_enable>
			i++;
    2a78:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2a7a:	3410      	adds	r4, #16
    2a7c:	454c      	cmp	r4, r9
    2a7e:	d3eb      	bcc.n	2a58 <z_log_init+0x1c>
	if (blocking) {
    2a80:	f1b8 0f00 	cmp.w	r8, #0
    2a84:	d0e5      	beq.n	2a52 <z_log_init+0x16>
		while (mask) {
    2a86:	2d00      	cmp	r5, #0
    2a88:	d0e2      	beq.n	2a50 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    2a8a:	4628      	mov	r0, r5
    2a8c:	f7ff ff70 	bl	2970 <activate_foreach_backend>
    2a90:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    2a92:	2f00      	cmp	r7, #0
    2a94:	d0f7      	beq.n	2a86 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    2a96:	2100      	movs	r1, #0
    2a98:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2a9c:	f005 faba 	bl	8014 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2aa0:	e7f1      	b.n	2a86 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    2aa2:	4620      	mov	r0, r4
    2aa4:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    2aa6:	2800      	cmp	r0, #0
    2aa8:	d0e0      	beq.n	2a6c <z_log_init+0x30>
				mask |= BIT(i);
    2aaa:	fa0a f306 	lsl.w	r3, sl, r6
    2aae:	431d      	orrs	r5, r3
    2ab0:	e7e2      	b.n	2a78 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2ab2:	4c04      	ldr	r4, [pc, #16]	; (2ac4 <z_log_init+0x88>)
    2ab4:	f8df 9010 	ldr.w	r9, [pc, #16]	; 2ac8 <z_log_init+0x8c>
	uint32_t mask = 0;
    2ab8:	4605      	mov	r5, r0
				mask |= BIT(i);
    2aba:	f04f 0a01 	mov.w	sl, #1
    2abe:	e7dd      	b.n	2a7c <z_log_init+0x40>
    2ac0:	200008c0 	.word	0x200008c0
    2ac4:	0000a1e0 	.word	0x0000a1e0
    2ac8:	0000a200 	.word	0x0000a200

00002acc <log_format_func_t_get>:
}
    2acc:	4b01      	ldr	r3, [pc, #4]	; (2ad4 <log_format_func_t_get+0x8>)
    2ace:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2ad2:	4770      	bx	lr
    2ad4:	0000a25c 	.word	0x0000a25c

00002ad8 <log_set_timestamp_func>:
{
    2ad8:	b508      	push	{r3, lr}
    2ada:	4603      	mov	r3, r0
    2adc:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    2ade:	b12b      	cbz	r3, 2aec <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    2ae0:	4a04      	ldr	r2, [pc, #16]	; (2af4 <log_set_timestamp_func+0x1c>)
    2ae2:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    2ae4:	f000 fc78 	bl	33d8 <log_output_timestamp_freq_set>
	return 0;
    2ae8:	2000      	movs	r0, #0
}
    2aea:	bd08      	pop	{r3, pc}
		return -EINVAL;
    2aec:	f06f 0015 	mvn.w	r0, #21
    2af0:	e7fb      	b.n	2aea <log_set_timestamp_func+0x12>
    2af2:	bf00      	nop
    2af4:	20000004 	.word	0x20000004

00002af8 <z_log_notify_backend_enabled>:
{
    2af8:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    2afa:	4c04      	ldr	r4, [pc, #16]	; (2b0c <z_log_notify_backend_enabled+0x14>)
    2afc:	7823      	ldrb	r3, [r4, #0]
    2afe:	b913      	cbnz	r3, 2b06 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    2b00:	4803      	ldr	r0, [pc, #12]	; (2b10 <z_log_notify_backend_enabled+0x18>)
    2b02:	f004 ff7b 	bl	79fc <z_impl_k_sem_give>
	backend_attached = true;
    2b06:	2301      	movs	r3, #1
    2b08:	7023      	strb	r3, [r4, #0]
}
    2b0a:	bd10      	pop	{r4, pc}
    2b0c:	20001228 	.word	0x20001228
    2b10:	2000020c 	.word	0x2000020c

00002b14 <z_log_dropped>:
{
    2b14:	b510      	push	{r4, lr}
    2b16:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    2b18:	4808      	ldr	r0, [pc, #32]	; (2b3c <z_log_dropped+0x28>)
    2b1a:	f006 fb76 	bl	920a <atomic_inc>
	if (buffered) {
    2b1e:	b15c      	cbz	r4, 2b38 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2b20:	f3bf 8f5b 	dmb	ish
    2b24:	4b06      	ldr	r3, [pc, #24]	; (2b40 <z_log_dropped+0x2c>)
    2b26:	e853 1f00 	ldrex	r1, [r3]
    2b2a:	3901      	subs	r1, #1
    2b2c:	e843 1200 	strex	r2, r1, [r3]
    2b30:	2a00      	cmp	r2, #0
    2b32:	d1f8      	bne.n	2b26 <z_log_dropped+0x12>
    2b34:	f3bf 8f5b 	dmb	ish
}
    2b38:	bd10      	pop	{r4, pc}
    2b3a:	bf00      	nop
    2b3c:	200008b8 	.word	0x200008b8
    2b40:	200008bc 	.word	0x200008bc

00002b44 <z_log_dropped_read_and_clear>:
}
    2b44:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2b46:	4b06      	ldr	r3, [pc, #24]	; (2b60 <z_log_dropped_read_and_clear+0x1c>)
    2b48:	f3bf 8f5b 	dmb	ish
    2b4c:	4601      	mov	r1, r0
    2b4e:	e853 0f00 	ldrex	r0, [r3]
    2b52:	e843 1200 	strex	r2, r1, [r3]
    2b56:	2a00      	cmp	r2, #0
    2b58:	d1f9      	bne.n	2b4e <z_log_dropped_read_and_clear+0xa>
    2b5a:	f3bf 8f5b 	dmb	ish
    2b5e:	4770      	bx	lr
    2b60:	200008b8 	.word	0x200008b8

00002b64 <dropped_notify>:
{
    2b64:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    2b66:	f7ff ffed 	bl	2b44 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2b6a:	4c08      	ldr	r4, [pc, #32]	; (2b8c <dropped_notify+0x28>)
    2b6c:	4e08      	ldr	r6, [pc, #32]	; (2b90 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    2b6e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2b70:	42b4      	cmp	r4, r6
    2b72:	d300      	bcc.n	2b76 <dropped_notify+0x12>
}
    2b74:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2b76:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2b78:	795b      	ldrb	r3, [r3, #5]
    2b7a:	b12b      	cbz	r3, 2b88 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    2b7c:	6823      	ldr	r3, [r4, #0]
    2b7e:	685b      	ldr	r3, [r3, #4]
    2b80:	b113      	cbz	r3, 2b88 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    2b82:	4629      	mov	r1, r5
    2b84:	4620      	mov	r0, r4
    2b86:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2b88:	3410      	adds	r4, #16
    2b8a:	e7f1      	b.n	2b70 <dropped_notify+0xc>
    2b8c:	0000a1e0 	.word	0x0000a1e0
    2b90:	0000a200 	.word	0x0000a200

00002b94 <z_log_msg_init>:
{
    2b94:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    2b96:	4c04      	ldr	r4, [pc, #16]	; (2ba8 <z_log_msg_init+0x14>)
    2b98:	4904      	ldr	r1, [pc, #16]	; (2bac <z_log_msg_init+0x18>)
    2b9a:	4620      	mov	r0, r4
    2b9c:	f006 f9c6 	bl	8f2c <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    2ba0:	4b03      	ldr	r3, [pc, #12]	; (2bb0 <z_log_msg_init+0x1c>)
    2ba2:	601c      	str	r4, [r3, #0]
}
    2ba4:	bd10      	pop	{r4, pc}
    2ba6:	bf00      	nop
    2ba8:	2000016c 	.word	0x2000016c
    2bac:	0000a248 	.word	0x0000a248
    2bb0:	200008b0 	.word	0x200008b0

00002bb4 <log_core_init>:
	panic_mode = false;
    2bb4:	4a08      	ldr	r2, [pc, #32]	; (2bd8 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    2bb6:	4809      	ldr	r0, [pc, #36]	; (2bdc <log_core_init+0x28>)
{
    2bb8:	b508      	push	{r3, lr}
	panic_mode = false;
    2bba:	2300      	movs	r3, #0
    2bbc:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2bbe:	4a08      	ldr	r2, [pc, #32]	; (2be0 <log_core_init+0x2c>)
    2bc0:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    2bc2:	4a08      	ldr	r2, [pc, #32]	; (2be4 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    2bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    2bc8:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    2bca:	f7ff ff85 	bl	2ad8 <log_set_timestamp_func>
}
    2bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    2bd2:	f7ff bfdf 	b.w	2b94 <z_log_msg_init>
    2bd6:	bf00      	nop
    2bd8:	20001229 	.word	0x20001229
    2bdc:	00009207 	.word	0x00009207
    2be0:	200008b8 	.word	0x200008b8
    2be4:	200008bc 	.word	0x200008bc

00002be8 <z_log_msg_alloc>:
{
    2be8:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    2bea:	2200      	movs	r2, #0
    2bec:	4801      	ldr	r0, [pc, #4]	; (2bf4 <z_log_msg_alloc+0xc>)
    2bee:	2300      	movs	r3, #0
    2bf0:	f006 b9bd 	b.w	8f6e <mpsc_pbuf_alloc>
    2bf4:	2000016c 	.word	0x2000016c

00002bf8 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    2bf8:	4801      	ldr	r0, [pc, #4]	; (2c00 <z_log_msg_local_claim+0x8>)
    2bfa:	f006 ba56 	b.w	90aa <mpsc_pbuf_claim>
    2bfe:	bf00      	nop
    2c00:	2000016c 	.word	0x2000016c

00002c04 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    2c04:	4b02      	ldr	r3, [pc, #8]	; (2c10 <z_log_msg_free+0xc>)
{
    2c06:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    2c08:	6818      	ldr	r0, [r3, #0]
    2c0a:	f006 baa0 	b.w	914e <mpsc_pbuf_free>
    2c0e:	bf00      	nop
    2c10:	200008b0 	.word	0x200008b0

00002c14 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    2c14:	4801      	ldr	r0, [pc, #4]	; (2c1c <z_log_msg_pending+0x8>)
    2c16:	f006 bad6 	b.w	91c6 <mpsc_pbuf_is_pending>
    2c1a:	bf00      	nop
    2c1c:	2000016c 	.word	0x2000016c

00002c20 <z_impl_log_process>:
{
    2c20:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    2c22:	4b28      	ldr	r3, [pc, #160]	; (2cc4 <z_impl_log_process+0xa4>)
    2c24:	7818      	ldrb	r0, [r3, #0]
    2c26:	2800      	cmp	r0, #0
    2c28:	d04b      	beq.n	2cc2 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    2c2a:	f7ff ffe5 	bl	2bf8 <z_log_msg_local_claim>
	if (msg) {
    2c2e:	4605      	mov	r5, r0
    2c30:	b190      	cbz	r0, 2c58 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2c32:	f3bf 8f5b 	dmb	ish
    2c36:	4b24      	ldr	r3, [pc, #144]	; (2cc8 <z_impl_log_process+0xa8>)
    2c38:	e853 1f00 	ldrex	r1, [r3]
    2c3c:	3901      	subs	r1, #1
    2c3e:	e843 1200 	strex	r2, r1, [r3]
    2c42:	2a00      	cmp	r2, #0
    2c44:	d1f8      	bne.n	2c38 <z_impl_log_process+0x18>
    2c46:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2c4a:	4c20      	ldr	r4, [pc, #128]	; (2ccc <z_impl_log_process+0xac>)
    2c4c:	4e20      	ldr	r6, [pc, #128]	; (2cd0 <z_impl_log_process+0xb0>)
    2c4e:	42b4      	cmp	r4, r6
    2c50:	d32d      	bcc.n	2cae <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    2c52:	4628      	mov	r0, r5
    2c54:	f7ff ffd6 	bl	2c04 <z_log_msg_free>
	return dropped_cnt > 0;
    2c58:	4b1e      	ldr	r3, [pc, #120]	; (2cd4 <z_impl_log_process+0xb4>)
    2c5a:	4c1f      	ldr	r4, [pc, #124]	; (2cd8 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    2c5c:	681b      	ldr	r3, [r3, #0]
    2c5e:	2b00      	cmp	r3, #0
    2c60:	dd19      	ble.n	2c96 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    2c62:	f007 f8b9 	bl	9dd8 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2c66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c6a:	fba0 0302 	umull	r0, r3, r0, r2
    2c6e:	fb02 3101 	mla	r1, r2, r1, r3
    2c72:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    2c74:	e9d4 2000 	ldrd	r2, r0, [r4]
    2c78:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    2c7c:	1a9b      	subs	r3, r3, r2
    2c7e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    2c82:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    2c86:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    2c8a:	4293      	cmp	r3, r2
    2c8c:	f171 0100 	sbcs.w	r1, r1, #0
    2c90:	d301      	bcc.n	2c96 <z_impl_log_process+0x76>
				dropped_notify();
    2c92:	f7ff ff67 	bl	2b64 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    2c96:	e9d4 3200 	ldrd	r3, r2, [r4]
    2c9a:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    2c9e:	f142 0200 	adc.w	r2, r2, #0
    2ca2:	e9c4 3200 	strd	r3, r2, [r4]
}
    2ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    2caa:	f7ff bfb3 	b.w	2c14 <z_log_msg_pending>
	return backend->cb->active;
    2cae:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    2cb0:	795b      	ldrb	r3, [r3, #5]
    2cb2:	b123      	cbz	r3, 2cbe <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    2cb4:	6823      	ldr	r3, [r4, #0]
    2cb6:	4629      	mov	r1, r5
    2cb8:	681b      	ldr	r3, [r3, #0]
    2cba:	4620      	mov	r0, r4
    2cbc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2cbe:	3410      	adds	r4, #16
    2cc0:	e7c5      	b.n	2c4e <z_impl_log_process+0x2e>
}
    2cc2:	bd70      	pop	{r4, r5, r6, pc}
    2cc4:	20001228 	.word	0x20001228
    2cc8:	200008bc 	.word	0x200008bc
    2ccc:	0000a1e0 	.word	0x0000a1e0
    2cd0:	0000a200 	.word	0x0000a200
    2cd4:	200008b8 	.word	0x200008b8
    2cd8:	200006d0 	.word	0x200006d0

00002cdc <z_impl_log_panic>:
{
    2cdc:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    2cde:	4d0d      	ldr	r5, [pc, #52]	; (2d14 <z_impl_log_panic+0x38>)
    2ce0:	7829      	ldrb	r1, [r5, #0]
    2ce2:	b961      	cbnz	r1, 2cfe <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    2ce4:	2001      	movs	r0, #1
    2ce6:	f7ff fea9 	bl	2a3c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2cea:	4c0b      	ldr	r4, [pc, #44]	; (2d18 <z_impl_log_panic+0x3c>)
    2cec:	4e0b      	ldr	r6, [pc, #44]	; (2d1c <z_impl_log_panic+0x40>)
    2cee:	42b4      	cmp	r4, r6
    2cf0:	d306      	bcc.n	2d00 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    2cf2:	f7ff ff95 	bl	2c20 <z_impl_log_process>
		while (log_process() == true) {
    2cf6:	2800      	cmp	r0, #0
    2cf8:	d1fb      	bne.n	2cf2 <z_impl_log_panic+0x16>
	panic_mode = true;
    2cfa:	2301      	movs	r3, #1
    2cfc:	702b      	strb	r3, [r5, #0]
}
    2cfe:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    2d00:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2d02:	795b      	ldrb	r3, [r3, #5]
    2d04:	b11b      	cbz	r3, 2d0e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    2d06:	6823      	ldr	r3, [r4, #0]
    2d08:	4620      	mov	r0, r4
    2d0a:	689b      	ldr	r3, [r3, #8]
    2d0c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2d0e:	3410      	adds	r4, #16
    2d10:	e7ed      	b.n	2cee <z_impl_log_panic+0x12>
    2d12:	bf00      	nop
    2d14:	20001229 	.word	0x20001229
    2d18:	0000a1e0 	.word	0x0000a1e0
    2d1c:	0000a200 	.word	0x0000a200

00002d20 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    2d20:	2100      	movs	r1, #0
{
    2d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    2d26:	4608      	mov	r0, r1
    2d28:	f7ff fe88 	bl	2a3c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2d2c:	4604      	mov	r4, r0
    2d2e:	b348      	cbz	r0, 2d84 <log_process_thread_func+0x64>
    2d30:	f240 6867 	movw	r8, #1639	; 0x667
    2d34:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    2d38:	f005 f986 	bl	8048 <z_impl_z_current_get>
	proc_tid = process_tid;
    2d3c:	4b1a      	ldr	r3, [pc, #104]	; (2da8 <log_process_thread_func+0x88>)
    2d3e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2d40:	b130      	cbz	r0, 2d50 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2d42:	4b1a      	ldr	r3, [pc, #104]	; (2dac <log_process_thread_func+0x8c>)
	    process_tid &&
    2d44:	681b      	ldr	r3, [r3, #0]
    2d46:	2b09      	cmp	r3, #9
    2d48:	dd02      	ble.n	2d50 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    2d4a:	4819      	ldr	r0, [pc, #100]	; (2db0 <log_process_thread_func+0x90>)
    2d4c:	f004 fe56 	bl	79fc <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2d50:	4f18      	ldr	r7, [pc, #96]	; (2db4 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    2d52:	f8df a05c 	ldr.w	sl, [pc, #92]	; 2db0 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2d56:	2500      	movs	r5, #0
		if (activate_mask) {
    2d58:	b144      	cbz	r4, 2d6c <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    2d5a:	4620      	mov	r0, r4
    2d5c:	f7ff fe08 	bl	2970 <activate_foreach_backend>
			if (!activate_mask) {
    2d60:	4604      	mov	r4, r0
    2d62:	b918      	cbnz	r0, 2d6c <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    2d64:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2d68:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    2d6c:	f7ff ff58 	bl	2c20 <z_impl_log_process>
		if (log_process() == false) {
    2d70:	4606      	mov	r6, r0
    2d72:	b928      	cbnz	r0, 2d80 <log_process_thread_func+0x60>
			if (processed_any) {
    2d74:	b9b5      	cbnz	r5, 2da4 <log_process_thread_func+0x84>
    2d76:	4642      	mov	r2, r8
    2d78:	464b      	mov	r3, r9
    2d7a:	4650      	mov	r0, sl
    2d7c:	f004 fe60 	bl	7a40 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2d80:	4635      	mov	r5, r6
    2d82:	e7e9      	b.n	2d58 <log_process_thread_func+0x38>
    2d84:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2d88:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    2d8c:	e7d4      	b.n	2d38 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    2d8e:	682b      	ldr	r3, [r5, #0]
    2d90:	699b      	ldr	r3, [r3, #24]
    2d92:	b11b      	cbz	r3, 2d9c <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    2d94:	2200      	movs	r2, #0
    2d96:	4611      	mov	r1, r2
    2d98:	4628      	mov	r0, r5
    2d9a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2d9c:	3510      	adds	r5, #16
    2d9e:	42bd      	cmp	r5, r7
    2da0:	d3f5      	bcc.n	2d8e <log_process_thread_func+0x6e>
    2da2:	e7e8      	b.n	2d76 <log_process_thread_func+0x56>
    2da4:	4d04      	ldr	r5, [pc, #16]	; (2db8 <log_process_thread_func+0x98>)
    2da6:	e7fa      	b.n	2d9e <log_process_thread_func+0x7e>
    2da8:	200008b4 	.word	0x200008b4
    2dac:	200008bc 	.word	0x200008bc
    2db0:	2000020c 	.word	0x2000020c
    2db4:	0000a200 	.word	0x0000a200
    2db8:	0000a1e0 	.word	0x0000a1e0

00002dbc <z_log_msg_post_finalize>:
{
    2dbc:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    2dbe:	4818      	ldr	r0, [pc, #96]	; (2e20 <z_log_msg_post_finalize+0x64>)
    2dc0:	f006 fa23 	bl	920a <atomic_inc>
	if (panic_mode) {
    2dc4:	4b17      	ldr	r3, [pc, #92]	; (2e24 <z_log_msg_post_finalize+0x68>)
    2dc6:	781b      	ldrb	r3, [r3, #0]
    2dc8:	b17b      	cbz	r3, 2dea <z_log_msg_post_finalize+0x2e>
    2dca:	f04f 0320 	mov.w	r3, #32
    2dce:	f3ef 8411 	mrs	r4, BASEPRI
    2dd2:	f383 8812 	msr	BASEPRI_MAX, r3
    2dd6:	f3bf 8f6f 	isb	sy
    2dda:	f7ff ff21 	bl	2c20 <z_impl_log_process>
	__asm__ volatile(
    2dde:	f384 8811 	msr	BASEPRI, r4
    2de2:	f3bf 8f6f 	isb	sy
}
    2de6:	b002      	add	sp, #8
    2de8:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    2dea:	4b0f      	ldr	r3, [pc, #60]	; (2e28 <z_log_msg_post_finalize+0x6c>)
    2dec:	681b      	ldr	r3, [r3, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	d0f9      	beq.n	2de6 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    2df2:	b950      	cbnz	r0, 2e0a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    2df4:	2200      	movs	r2, #0
    2df6:	2300      	movs	r3, #0
    2df8:	e9cd 2300 	strd	r2, r3, [sp]
    2dfc:	480b      	ldr	r0, [pc, #44]	; (2e2c <z_log_msg_post_finalize+0x70>)
    2dfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2e02:	2300      	movs	r3, #0
    2e04:	f005 fb56 	bl	84b4 <z_impl_k_timer_start>
    2e08:	e7ed      	b.n	2de6 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2e0a:	280a      	cmp	r0, #10
    2e0c:	d1eb      	bne.n	2de6 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    2e0e:	4807      	ldr	r0, [pc, #28]	; (2e2c <z_log_msg_post_finalize+0x70>)
    2e10:	f006 fff4 	bl	9dfc <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2e14:	4806      	ldr	r0, [pc, #24]	; (2e30 <z_log_msg_post_finalize+0x74>)
}
    2e16:	b002      	add	sp, #8
    2e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2e1c:	f004 bdee 	b.w	79fc <z_impl_k_sem_give>
    2e20:	200008bc 	.word	0x200008bc
    2e24:	20001229 	.word	0x20001229
    2e28:	200008b4 	.word	0x200008b4
    2e2c:	200006d8 	.word	0x200006d8
    2e30:	2000020c 	.word	0x2000020c

00002e34 <z_log_msg_commit>:
{
    2e34:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2e36:	4b06      	ldr	r3, [pc, #24]	; (2e50 <z_log_msg_commit+0x1c>)
    2e38:	681b      	ldr	r3, [r3, #0]
{
    2e3a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2e3c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    2e3e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    2e40:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    2e42:	4804      	ldr	r0, [pc, #16]	; (2e54 <z_log_msg_commit+0x20>)
    2e44:	f006 f911 	bl	906a <mpsc_pbuf_commit>
}
    2e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    2e4c:	f7ff bfb6 	b.w	2dbc <z_log_msg_post_finalize>
    2e50:	20000004 	.word	0x20000004
    2e54:	2000016c 	.word	0x2000016c

00002e58 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2e58:	4a04      	ldr	r2, [pc, #16]	; (2e6c <log_source_name_get+0x14>)
    2e5a:	4b05      	ldr	r3, [pc, #20]	; (2e70 <log_source_name_get+0x18>)
    2e5c:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    2e5e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    2e62:	bf34      	ite	cc
    2e64:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    2e68:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    2e6a:	4770      	bx	lr
    2e6c:	0000a138 	.word	0x0000a138
    2e70:	0000a1e0 	.word	0x0000a1e0

00002e74 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2e74:	4b08      	ldr	r3, [pc, #32]	; (2e98 <log_backend_enable+0x24>)
    2e76:	1ac3      	subs	r3, r0, r3
{
    2e78:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    2e7a:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    2e7c:	6844      	ldr	r4, [r0, #4]
    2e7e:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    2e80:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    2e82:	6843      	ldr	r3, [r0, #4]
    2e84:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    2e86:	6843      	ldr	r3, [r0, #4]
    2e88:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2e8a:	6843      	ldr	r3, [r0, #4]
    2e8c:	2201      	movs	r2, #1
    2e8e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    2e90:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    2e92:	f7ff be31 	b.w	2af8 <z_log_notify_backend_enabled>
    2e96:	bf00      	nop
    2e98:	0000a1e0 	.word	0x0000a1e0

00002e9c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    2e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ea0:	b08f      	sub	sp, #60	; 0x3c
    2ea2:	af04      	add	r7, sp, #16
    2ea4:	f3c1 284a 	ubfx	r8, r1, #9, #11
    2ea8:	60b8      	str	r0, [r7, #8]
    2eaa:	460d      	mov	r5, r1
    2eac:	4691      	mov	r9, r2
    2eae:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    2eb0:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    2eb2:	f1b8 0f00 	cmp.w	r8, #0
    2eb6:	d063      	beq.n	2f80 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    2eb8:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    2eba:	f107 0314 	add.w	r3, r7, #20
    2ebe:	f04f 0b04 	mov.w	fp, #4
    2ec2:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    2ec6:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    2eca:	e9c7 6607 	strd	r6, r6, [r7, #28]
    2ece:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    2ed0:	9301      	str	r3, [sp, #4]
    2ed2:	f8cd b008 	str.w	fp, [sp, #8]
    2ed6:	f8cd a000 	str.w	sl, [sp]
    2eda:	f107 031c 	add.w	r3, r7, #28
    2ede:	68f9      	ldr	r1, [r7, #12]
    2ee0:	4632      	mov	r2, r6
    2ee2:	4648      	mov	r0, r9
    2ee4:	f7fe fbb6 	bl	1654 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    2ee8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    2eec:	4603      	mov	r3, r0
    2eee:	d31c      	bcc.n	2f2a <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    2ef0:	466c      	mov	r4, sp
    2ef2:	b08a      	sub	sp, #40	; 0x28
    2ef4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2ef8:	ab04      	add	r3, sp, #16
    2efa:	4826      	ldr	r0, [pc, #152]	; (2f94 <z_impl_z_log_msg_static_create+0xf8>)
    2efc:	e9c3 0105 	strd	r0, r1, [r3, #20]
    2f00:	f240 71ff 	movw	r1, #2047	; 0x7ff
    2f04:	61d9      	str	r1, [r3, #28]
    2f06:	461a      	mov	r2, r3
    2f08:	f44f 7100 	mov.w	r1, #512	; 0x200
    2f0c:	8419      	strh	r1, [r3, #32]
    2f0e:	4b22      	ldr	r3, [pc, #136]	; (2f98 <z_impl_z_log_msg_static_create+0xfc>)
    2f10:	f842 3f10 	str.w	r3, [r2, #16]!
    2f14:	4821      	ldr	r0, [pc, #132]	; (2f9c <z_impl_z_log_msg_static_create+0x100>)
    2f16:	4633      	mov	r3, r6
    2f18:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    2f1c:	f7ff ffbe 	bl	2e9c <z_impl_z_log_msg_static_create>
    2f20:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    2f22:	372c      	adds	r7, #44	; 0x2c
    2f24:	46bd      	mov	sp, r7
    2f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    2f2a:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    2f2e:	f104 0017 	add.w	r0, r4, #23
    2f32:	4418      	add	r0, r3
    2f34:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2f38:	0880      	lsrs	r0, r0, #2
    2f3a:	603b      	str	r3, [r7, #0]
    2f3c:	f7ff fe54 	bl	2be8 <z_log_msg_alloc>
    2f40:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    2f44:	4604      	mov	r4, r0
    2f46:	b190      	cbz	r0, 2f6e <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    2f48:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    2f4a:	4a15      	ldr	r2, [pc, #84]	; (2fa0 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    2f4c:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    2f50:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    2f54:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    2f58:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    2f5a:	e9cd a300 	strd	sl, r3, [sp]
    2f5e:	f8cd b008 	str.w	fp, [sp, #8]
    2f62:	68f9      	ldr	r1, [r7, #12]
    2f64:	f107 031c 	add.w	r3, r7, #28
    2f68:	4648      	mov	r0, r9
    2f6a:	f7fe fb73 	bl	1654 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    2f6e:	f368 2553 	bfi	r5, r8, #9, #11
    2f72:	687b      	ldr	r3, [r7, #4]
    2f74:	68b9      	ldr	r1, [r7, #8]
    2f76:	462a      	mov	r2, r5
    2f78:	4620      	mov	r0, r4
    2f7a:	f006 f97c 	bl	9276 <z_log_msg_finalize>
    2f7e:	e7d0      	b.n	2f22 <z_impl_z_log_msg_static_create+0x86>
    2f80:	f104 0017 	add.w	r0, r4, #23
    2f84:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2f88:	0880      	lsrs	r0, r0, #2
    2f8a:	f7ff fe2d 	bl	2be8 <z_log_msg_alloc>
    2f8e:	4604      	mov	r4, r0
    2f90:	e7ed      	b.n	2f6e <z_impl_z_log_msg_static_create+0xd2>
    2f92:	bf00      	nop
    2f94:	0000a768 	.word	0x0000a768
    2f98:	01000004 	.word	0x01000004
    2f9c:	0000a180 	.word	0x0000a180
    2fa0:	0000924b 	.word	0x0000924b

00002fa4 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fa8:	b087      	sub	sp, #28
    2faa:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    2fae:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    2fb2:	4604      	mov	r4, r0
    2fb4:	460f      	mov	r7, r1
    2fb6:	4693      	mov	fp, r2
    2fb8:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    2fba:	b3a6      	cbz	r6, 3026 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2fbc:	2110      	movs	r1, #16
    2fbe:	f8cd 9000 	str.w	r9, [sp]
    2fc2:	4633      	mov	r3, r6
    2fc4:	4652      	mov	r2, sl
    2fc6:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    2fc8:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2fcc:	f7fe f96c 	bl	12a8 <cbvprintf_package>
    2fd0:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2fd2:	f105 0017 	add.w	r0, r5, #23
    2fd6:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    2fd8:	4b14      	ldr	r3, [pc, #80]	; (302c <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2fda:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    2fdc:	f004 0407 	and.w	r4, r4, #7
    2fe0:	f00b 0b07 	and.w	fp, fp, #7
    2fe4:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2fe6:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    2fea:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    2fee:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    2ff2:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    2ff4:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    2ff6:	f7ff fdf7 	bl	2be8 <z_log_msg_alloc>
	struct log_msg_desc desc =
    2ffa:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    2ffe:	4605      	mov	r5, r0
    3000:	b140      	cbz	r0, 3014 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    3002:	b13e      	cbz	r6, 3014 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    3004:	9903      	ldr	r1, [sp, #12]
    3006:	f8cd 9000 	str.w	r9, [sp]
    300a:	4633      	mov	r3, r6
    300c:	4652      	mov	r2, sl
    300e:	3010      	adds	r0, #16
    3010:	f7fe f94a 	bl	12a8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    3014:	4643      	mov	r3, r8
    3016:	4622      	mov	r2, r4
    3018:	4639      	mov	r1, r7
    301a:	4628      	mov	r0, r5
	}
}
    301c:	b007      	add	sp, #28
    301e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    3022:	f006 b928 	b.w	9276 <z_log_msg_finalize>
		plen = 0;
    3026:	4631      	mov	r1, r6
    3028:	e7d3      	b.n	2fd2 <z_impl_z_log_msg_runtime_vcreate+0x2e>
    302a:	bf00      	nop
    302c:	000ffe00 	.word	0x000ffe00

00003030 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3030:	b40e      	push	{r1, r2, r3}
    3032:	b503      	push	{r0, r1, lr}
    3034:	ab03      	add	r3, sp, #12
    3036:	4601      	mov	r1, r0
    3038:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    303c:	4804      	ldr	r0, [pc, #16]	; (3050 <print_formatted+0x20>)
	va_start(args, fmt);
    303e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3040:	f006 f93f 	bl	92c2 <cbvprintf>
	va_end(args);

	return length;
}
    3044:	b002      	add	sp, #8
    3046:	f85d eb04 	ldr.w	lr, [sp], #4
    304a:	b003      	add	sp, #12
    304c:	4770      	bx	lr
    304e:	bf00      	nop
    3050:	000092eb 	.word	0x000092eb

00003054 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3054:	06ca      	lsls	r2, r1, #27
    3056:	d405      	bmi.n	3064 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3058:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    305a:	bf4c      	ite	mi
    305c:	4902      	ldrmi	r1, [pc, #8]	; (3068 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    305e:	4903      	ldrpl	r1, [pc, #12]	; (306c <newline_print+0x18>)
    3060:	f7ff bfe6 	b.w	3030 <print_formatted>
	}
}
    3064:	4770      	bx	lr
    3066:	bf00      	nop
    3068:	0000a7a8 	.word	0x0000a7a8
    306c:	0000a7a7 	.word	0x0000a7a7

00003070 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    3070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3074:	b089      	sub	sp, #36	; 0x24
    3076:	469b      	mov	fp, r3
    3078:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    307c:	9304      	str	r3, [sp, #16]
    307e:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    3082:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    3084:	9b04      	ldr	r3, [sp, #16]
{
    3086:	9206      	str	r2, [sp, #24]
    3088:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    308c:	4604      	mov	r4, r0
    308e:	460d      	mov	r5, r1
	if (!raw_string) {
    3090:	2b00      	cmp	r3, #0
    3092:	f000 8087 	beq.w	31a4 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3096:	f006 0308 	and.w	r3, r6, #8
    309a:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    309c:	f006 f8d3 	bl	9246 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    30a0:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    30a4:	4602      	mov	r2, r0
    30a6:	2800      	cmp	r0, #0
    30a8:	d04b      	beq.n	3142 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    30aa:	4986      	ldr	r1, [pc, #536]	; (32c4 <log_output_process+0x254>)
    30ac:	4620      	mov	r0, r4
    30ae:	f7ff ffbf 	bl	3030 <print_formatted>
    30b2:	4680      	mov	r8, r0
	if (stamp) {
    30b4:	f1ba 0f00 	cmp.w	sl, #0
    30b8:	d008      	beq.n	30cc <log_output_process+0x5c>
	if (!format) {
    30ba:	f016 0f44 	tst.w	r6, #68	; 0x44
    30be:	d142      	bne.n	3146 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    30c0:	4981      	ldr	r1, [pc, #516]	; (32c8 <log_output_process+0x258>)
    30c2:	462a      	mov	r2, r5
    30c4:	4620      	mov	r0, r4
    30c6:	f7ff ffb3 	bl	3030 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    30ca:	4480      	add	r8, r0
	if (color) {
    30cc:	f006 0301 	and.w	r3, r6, #1
    30d0:	b15b      	cbz	r3, 30ea <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    30d2:	4b7e      	ldr	r3, [pc, #504]	; (32cc <log_output_process+0x25c>)
    30d4:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    30d6:	497e      	ldr	r1, [pc, #504]	; (32d0 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    30d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    30dc:	4b7d      	ldr	r3, [pc, #500]	; (32d4 <log_output_process+0x264>)
    30de:	4620      	mov	r0, r4
    30e0:	2a00      	cmp	r2, #0
    30e2:	bf08      	it	eq
    30e4:	461a      	moveq	r2, r3
    30e6:	f7ff ffa3 	bl	3030 <print_formatted>
	if (level_on) {
    30ea:	f006 0308 	and.w	r3, r6, #8
    30ee:	2b00      	cmp	r3, #0
    30f0:	d055      	beq.n	319e <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    30f2:	4b79      	ldr	r3, [pc, #484]	; (32d8 <log_output_process+0x268>)
    30f4:	9a04      	ldr	r2, [sp, #16]
    30f6:	4979      	ldr	r1, [pc, #484]	; (32dc <log_output_process+0x26c>)
    30f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    30fc:	4620      	mov	r0, r4
    30fe:	f7ff ff97 	bl	3030 <print_formatted>
    3102:	4605      	mov	r5, r0
	if (domain) {
    3104:	9b06      	ldr	r3, [sp, #24]
    3106:	b12b      	cbz	r3, 3114 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    3108:	4975      	ldr	r1, [pc, #468]	; (32e0 <log_output_process+0x270>)
    310a:	461a      	mov	r2, r3
    310c:	4620      	mov	r0, r4
    310e:	f7ff ff8f 	bl	3030 <print_formatted>
    3112:	4405      	add	r5, r0
	if (source) {
    3114:	f1bb 0f00 	cmp.w	fp, #0
    3118:	d005      	beq.n	3126 <log_output_process+0xb6>
		total += print_formatted(output,
    311a:	4972      	ldr	r1, [pc, #456]	; (32e4 <log_output_process+0x274>)
    311c:	465a      	mov	r2, fp
    311e:	4620      	mov	r0, r4
    3120:	f7ff ff86 	bl	3030 <print_formatted>
    3124:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    3126:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    3128:	f1b9 0f00 	cmp.w	r9, #0
    312c:	d149      	bne.n	31c2 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    312e:	2f00      	cmp	r7, #0
    3130:	d14f      	bne.n	31d2 <log_output_process+0x162>
	if (color) {
    3132:	07f3      	lsls	r3, r6, #31
    3134:	f100 80c0 	bmi.w	32b8 <log_output_process+0x248>
	newline_print(output, flags);
    3138:	4631      	mov	r1, r6
    313a:	4620      	mov	r0, r4
    313c:	f7ff ff8a 	bl	3054 <newline_print>
}
    3140:	e0b4      	b.n	32ac <log_output_process+0x23c>
	uint32_t length = 0U;
    3142:	4680      	mov	r8, r0
    3144:	e7b6      	b.n	30b4 <log_output_process+0x44>
	} else if (freq != 0U) {
    3146:	4b68      	ldr	r3, [pc, #416]	; (32e8 <log_output_process+0x278>)
    3148:	6818      	ldr	r0, [r3, #0]
    314a:	2800      	cmp	r0, #0
    314c:	d0bd      	beq.n	30ca <log_output_process+0x5a>
		timestamp /= timestamp_div;
    314e:	4b67      	ldr	r3, [pc, #412]	; (32ec <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    3150:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    3154:	681b      	ldr	r3, [r3, #0]
    3156:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    315a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    315e:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    3162:	fb00 5513 	mls	r5, r0, r3, r5
    3166:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    316a:	fb0e f505 	mul.w	r5, lr, r5
    316e:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    3172:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3174:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    3178:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    317c:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    3180:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3184:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    3188:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    318a:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    318e:	4958      	ldr	r1, [pc, #352]	; (32f0 <log_output_process+0x280>)
    3190:	e9cd c501 	strd	ip, r5, [sp, #4]
    3194:	4652      	mov	r2, sl
    3196:	4620      	mov	r0, r4
    3198:	f7ff ff4a 	bl	3030 <print_formatted>
    319c:	e795      	b.n	30ca <log_output_process+0x5a>
	int total = 0;
    319e:	f006 0508 	and.w	r5, r6, #8
    31a2:	e7af      	b.n	3104 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    31a4:	f1bb 0f01 	cmp.w	fp, #1
    31a8:	d106      	bne.n	31b8 <log_output_process+0x148>
	if (package) {
    31aa:	f1b9 0f00 	cmp.w	r9, #0
    31ae:	d164      	bne.n	327a <log_output_process+0x20a>
	if (data_len) {
    31b0:	2f00      	cmp	r7, #0
    31b2:	d07b      	beq.n	32ac <log_output_process+0x23c>
		prefix_offset = 0;
    31b4:	2500      	movs	r5, #0
    31b6:	e00c      	b.n	31d2 <log_output_process+0x162>
	if (package) {
    31b8:	f1b9 0f00 	cmp.w	r9, #0
    31bc:	d0f8      	beq.n	31b0 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    31be:	484d      	ldr	r0, [pc, #308]	; (32f4 <log_output_process+0x284>)
    31c0:	e05c      	b.n	327c <log_output_process+0x20c>
		cb = out_func;
    31c2:	484d      	ldr	r0, [pc, #308]	; (32f8 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    31c4:	494d      	ldr	r1, [pc, #308]	; (32fc <log_output_process+0x28c>)
    31c6:	464b      	mov	r3, r9
    31c8:	4622      	mov	r2, r4
    31ca:	f005 fb9c 	bl	8906 <cbpprintf_external>
	if (data_len) {
    31ce:	2f00      	cmp	r7, #0
    31d0:	d068      	beq.n	32a4 <log_output_process+0x234>
		print_formatted(output, " ");
    31d2:	f8df 912c 	ldr.w	r9, [pc, #300]	; 3300 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    31d6:	f8df a12c 	ldr.w	sl, [pc, #300]	; 3304 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    31da:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    31dc:	4631      	mov	r1, r6
    31de:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    31e0:	46b8      	mov	r8, r7
    31e2:	bf28      	it	cs
    31e4:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    31e8:	f7ff ff34 	bl	3054 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    31ec:	f04f 0b00 	mov.w	fp, #0
    31f0:	455d      	cmp	r5, fp
    31f2:	dc45      	bgt.n	3280 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    31f4:	9b05      	ldr	r3, [sp, #20]
    31f6:	4651      	mov	r1, sl
    31f8:	781a      	ldrb	r2, [r3, #0]
    31fa:	4620      	mov	r0, r4
    31fc:	f7ff ff18 	bl	3030 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3200:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    3204:	f01b 0f07 	tst.w	fp, #7
    3208:	d103      	bne.n	3212 <log_output_process+0x1a2>
			print_formatted(output, " ");
    320a:	4649      	mov	r1, r9
    320c:	4620      	mov	r0, r4
    320e:	f7ff ff0f 	bl	3030 <print_formatted>
		if (i < length) {
    3212:	45d8      	cmp	r8, fp
    3214:	d93b      	bls.n	328e <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    3216:	9b05      	ldr	r3, [sp, #20]
    3218:	4651      	mov	r1, sl
    321a:	f813 200b 	ldrb.w	r2, [r3, fp]
    321e:	4620      	mov	r0, r4
    3220:	f7ff ff06 	bl	3030 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3224:	f10b 0b01 	add.w	fp, fp, #1
    3228:	f1bb 0f10 	cmp.w	fp, #16
    322c:	d1ea      	bne.n	3204 <log_output_process+0x194>
	print_formatted(output, "|");
    322e:	4936      	ldr	r1, [pc, #216]	; (3308 <log_output_process+0x298>)
    3230:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3232:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    3236:	f7ff fefb 	bl	3030 <print_formatted>
		if (i < length) {
    323a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    323c:	9b05      	ldr	r3, [sp, #20]
    323e:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    3240:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    3244:	295f      	cmp	r1, #95	; 0x5f
    3246:	bf28      	it	cs
    3248:	222e      	movcs	r2, #46	; 0x2e
    324a:	4930      	ldr	r1, [pc, #192]	; (330c <log_output_process+0x29c>)
    324c:	4620      	mov	r0, r4
    324e:	f7ff feef 	bl	3030 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3252:	f10b 0b01 	add.w	fp, fp, #1
    3256:	f1bb 0f10 	cmp.w	fp, #16
    325a:	d01d      	beq.n	3298 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    325c:	f01b 0f07 	tst.w	fp, #7
    3260:	d103      	bne.n	326a <log_output_process+0x1fa>
			print_formatted(output, " ");
    3262:	4649      	mov	r1, r9
    3264:	4620      	mov	r0, r4
    3266:	f7ff fee3 	bl	3030 <print_formatted>
		if (i < length) {
    326a:	45d8      	cmp	r8, fp
    326c:	465a      	mov	r2, fp
    326e:	d8e5      	bhi.n	323c <log_output_process+0x1cc>
			print_formatted(output, " ");
    3270:	4649      	mov	r1, r9
    3272:	4620      	mov	r0, r4
    3274:	f7ff fedc 	bl	3030 <print_formatted>
    3278:	e7eb      	b.n	3252 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    327a:	481f      	ldr	r0, [pc, #124]	; (32f8 <log_output_process+0x288>)
		prefix_offset = 0;
    327c:	9d04      	ldr	r5, [sp, #16]
    327e:	e7a1      	b.n	31c4 <log_output_process+0x154>
		print_formatted(output, " ");
    3280:	4649      	mov	r1, r9
    3282:	4620      	mov	r0, r4
    3284:	f7ff fed4 	bl	3030 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3288:	f10b 0b01 	add.w	fp, fp, #1
    328c:	e7b0      	b.n	31f0 <log_output_process+0x180>
			print_formatted(output, "   ");
    328e:	4920      	ldr	r1, [pc, #128]	; (3310 <log_output_process+0x2a0>)
    3290:	4620      	mov	r0, r4
    3292:	f7ff fecd 	bl	3030 <print_formatted>
    3296:	e7c5      	b.n	3224 <log_output_process+0x1b4>
		data += length;
    3298:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    329a:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    329e:	4443      	add	r3, r8
    32a0:	9305      	str	r3, [sp, #20]
	} while (len);
    32a2:	d19a      	bne.n	31da <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    32a4:	9b04      	ldr	r3, [sp, #16]
    32a6:	2b00      	cmp	r3, #0
    32a8:	f47f af43 	bne.w	3132 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    32ac:	4620      	mov	r0, r4
}
    32ae:	b009      	add	sp, #36	; 0x24
    32b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    32b4:	f006 b80c 	b.w	92d0 <log_output_flush>
		print_formatted(output, "%s", log_color);
    32b8:	4a06      	ldr	r2, [pc, #24]	; (32d4 <log_output_process+0x264>)
    32ba:	4905      	ldr	r1, [pc, #20]	; (32d0 <log_output_process+0x260>)
    32bc:	4620      	mov	r0, r4
    32be:	f7ff feb7 	bl	3030 <print_formatted>
}
    32c2:	e739      	b.n	3138 <log_output_process+0xc8>
    32c4:	0000a7af 	.word	0x0000a7af
    32c8:	0000a7b3 	.word	0x0000a7b3
    32cc:	0000a26c 	.word	0x0000a26c
    32d0:	0000ad63 	.word	0x0000ad63
    32d4:	0000a7aa 	.word	0x0000a7aa
    32d8:	0000a280 	.word	0x0000a280
    32dc:	0000a7d8 	.word	0x0000a7d8
    32e0:	0000a7de 	.word	0x0000a7de
    32e4:	0000a7e2 	.word	0x0000a7e2
    32e8:	200008c8 	.word	0x200008c8
    32ec:	200008c4 	.word	0x200008c4
    32f0:	0000a7bc 	.word	0x0000a7bc
    32f4:	00009321 	.word	0x00009321
    32f8:	000092eb 	.word	0x000092eb
    32fc:	000092c3 	.word	0x000092c3
    3300:	0000a7ef 	.word	0x0000a7ef
    3304:	0000a7e7 	.word	0x0000a7e7
    3308:	0000a7f1 	.word	0x0000a7f1
    330c:	0000a7f3 	.word	0x0000a7f3
    3310:	0000a7ed 	.word	0x0000a7ed

00003314 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    3314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    3318:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    331a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    331c:	688e      	ldr	r6, [r1, #8]
    331e:	b086      	sub	sp, #24
    3320:	4605      	mov	r5, r0
    3322:	460c      	mov	r4, r1
    3324:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    3326:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    332a:	b15b      	cbz	r3, 3344 <log_output_msg_process+0x30>
    332c:	4a13      	ldr	r2, [pc, #76]	; (337c <log_output_msg_process+0x68>)
    332e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    3330:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    3334:	2900      	cmp	r1, #0
    3336:	db1f      	blt.n	3378 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    3338:	7820      	ldrb	r0, [r4, #0]
    333a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    333e:	f7ff fd8b 	bl	2e58 <log_source_name_get>
    3342:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3344:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    3346:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    3348:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    334c:	9700      	str	r7, [sp, #0]
    334e:	f3c2 224a 	ubfx	r2, r2, #9, #11
    3352:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    3354:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    3358:	f3c0 100b 	ubfx	r0, r0, #4, #12
    335c:	bf08      	it	eq
    335e:	2100      	moveq	r1, #0
    3360:	e9cd 0803 	strd	r0, r8, [sp, #12]
    3364:	e9cd 1401 	strd	r1, r4, [sp, #4]
    3368:	2200      	movs	r2, #0
    336a:	4631      	mov	r1, r6
    336c:	4628      	mov	r0, r5
    336e:	f7ff fe7f 	bl	3070 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    3372:	b006      	add	sp, #24
    3374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    3378:	2300      	movs	r3, #0
    337a:	e7e3      	b.n	3344 <log_output_msg_process+0x30>
    337c:	0000a138 	.word	0x0000a138

00003380 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3380:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3382:	f242 730f 	movw	r3, #9999	; 0x270f
    3386:	428b      	cmp	r3, r1
    3388:	bf28      	it	cs
    338a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    338c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    338e:	4a0f      	ldr	r2, [pc, #60]	; (33cc <log_output_dropped_process+0x4c>)
{
    3390:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3392:	2105      	movs	r1, #5
    3394:	4668      	mov	r0, sp
    3396:	f005 fb2e 	bl	89f6 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    339a:	6863      	ldr	r3, [r4, #4]
    339c:	490c      	ldr	r1, [pc, #48]	; (33d0 <log_output_dropped_process+0x50>)
    339e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    33a0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    33a2:	220b      	movs	r2, #11
    33a4:	4628      	mov	r0, r5
    33a6:	f005 ff7f 	bl	92a8 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    33aa:	6863      	ldr	r3, [r4, #4]
    33ac:	4632      	mov	r2, r6
    33ae:	4669      	mov	r1, sp
    33b0:	4628      	mov	r0, r5
    33b2:	685b      	ldr	r3, [r3, #4]
    33b4:	f005 ff78 	bl	92a8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    33b8:	6863      	ldr	r3, [r4, #4]
    33ba:	4906      	ldr	r1, [pc, #24]	; (33d4 <log_output_dropped_process+0x54>)
    33bc:	685b      	ldr	r3, [r3, #4]
    33be:	221b      	movs	r2, #27
    33c0:	4628      	mov	r0, r5
    33c2:	f005 ff71 	bl	92a8 <buffer_write>
		     output->control_block->ctx);
}
    33c6:	b002      	add	sp, #8
    33c8:	bd70      	pop	{r4, r5, r6, pc}
    33ca:	bf00      	nop
    33cc:	0000aeea 	.word	0x0000aeea
    33d0:	0000a812 	.word	0x0000a812
    33d4:	0000a7f6 	.word	0x0000a7f6

000033d8 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    33d8:	4a07      	ldr	r2, [pc, #28]	; (33f8 <log_output_timestamp_freq_set+0x20>)
    33da:	2100      	movs	r1, #0
    33dc:	2301      	movs	r3, #1
    33de:	4290      	cmp	r0, r2
    33e0:	d806      	bhi.n	33f0 <log_output_timestamp_freq_set+0x18>
    33e2:	4a06      	ldr	r2, [pc, #24]	; (33fc <log_output_timestamp_freq_set+0x24>)
    33e4:	b901      	cbnz	r1, 33e8 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    33e6:	2301      	movs	r3, #1
    33e8:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    33ea:	4b05      	ldr	r3, [pc, #20]	; (3400 <log_output_timestamp_freq_set+0x28>)
    33ec:	6018      	str	r0, [r3, #0]
}
    33ee:	4770      	bx	lr
		frequency /= 2U;
    33f0:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    33f2:	005b      	lsls	r3, r3, #1
    33f4:	2101      	movs	r1, #1
    33f6:	e7f2      	b.n	33de <log_output_timestamp_freq_set+0x6>
    33f8:	000f4240 	.word	0x000f4240
    33fc:	200008c4 	.word	0x200008c4
    3400:	200008c8 	.word	0x200008c8

00003404 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3404:	4b01      	ldr	r3, [pc, #4]	; (340c <log_backend_rtt_init+0x8>)
    3406:	2201      	movs	r2, #1
    3408:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    340a:	4770      	bx	lr
    340c:	2000122a 	.word	0x2000122a

00003410 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    3410:	4b01      	ldr	r3, [pc, #4]	; (3418 <format_set+0x8>)
	return 0;
}
    3412:	2000      	movs	r0, #0
	log_format_current = log_type;
    3414:	6019      	str	r1, [r3, #0]
}
    3416:	4770      	bx	lr
    3418:	200008e0 	.word	0x200008e0

0000341c <panic>:
	panic_mode = true;
    341c:	4b02      	ldr	r3, [pc, #8]	; (3428 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    341e:	4803      	ldr	r0, [pc, #12]	; (342c <panic+0x10>)
    3420:	2201      	movs	r2, #1
    3422:	701a      	strb	r2, [r3, #0]
    3424:	f005 bf54 	b.w	92d0 <log_output_flush>
    3428:	2000122b 	.word	0x2000122b
    342c:	0000a2b0 	.word	0x0000a2b0

00003430 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    3430:	4801      	ldr	r0, [pc, #4]	; (3438 <dropped+0x8>)
    3432:	f7ff bfa5 	b.w	3380 <log_output_dropped_process>
    3436:	bf00      	nop
    3438:	0000a2b0 	.word	0x0000a2b0

0000343c <process>:
{
    343c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    343e:	4b06      	ldr	r3, [pc, #24]	; (3458 <process+0x1c>)
    3440:	6818      	ldr	r0, [r3, #0]
{
    3442:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3444:	f7ff fb42 	bl	2acc <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    3448:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    344a:	4603      	mov	r3, r0
}
    344c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    3450:	4802      	ldr	r0, [pc, #8]	; (345c <process+0x20>)
    3452:	220f      	movs	r2, #15
    3454:	4718      	bx	r3
    3456:	bf00      	nop
    3458:	200008e0 	.word	0x200008e0
    345c:	0000a2b0 	.word	0x0000a2b0

00003460 <on_failed_write>:
	if (retry_cnt == 0) {
    3460:	b910      	cbnz	r0, 3468 <on_failed_write+0x8>
		host_present = false;
    3462:	4b07      	ldr	r3, [pc, #28]	; (3480 <on_failed_write+0x20>)
    3464:	7018      	strb	r0, [r3, #0]
}
    3466:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    3468:	4b06      	ldr	r3, [pc, #24]	; (3484 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    346a:	781b      	ldrb	r3, [r3, #0]
    346c:	b11b      	cbz	r3, 3476 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    346e:	f241 3088 	movw	r0, #5000	; 0x1388
    3472:	f006 bcb3 	b.w	9ddc <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    3476:	20a4      	movs	r0, #164	; 0xa4
    3478:	2100      	movs	r1, #0
    347a:	f004 bdcb 	b.w	8014 <z_impl_k_sleep>
    347e:	bf00      	nop
    3480:	2000122a 	.word	0x2000122a
    3484:	2000122b 	.word	0x2000122b

00003488 <data_out_block_mode>:
{
    3488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    348c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 3504 <data_out_block_mode+0x7c>
    3490:	4f1d      	ldr	r7, [pc, #116]	; (3508 <data_out_block_mode+0x80>)
{
    3492:	4680      	mov	r8, r0
    3494:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3496:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    3498:	f899 5000 	ldrb.w	r5, [r9]
    349c:	b995      	cbnz	r5, 34c4 <data_out_block_mode+0x3c>
			RTT_LOCK();
    349e:	f003 ff01 	bl	72a4 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    34a2:	4628      	mov	r0, r5
    34a4:	4632      	mov	r2, r6
    34a6:	4641      	mov	r1, r8
    34a8:	f003 feaa 	bl	7200 <SEGGER_RTT_WriteSkipNoLock>
    34ac:	4605      	mov	r5, r0
			RTT_UNLOCK();
    34ae:	f003 ff03 	bl	72b8 <zephyr_rtt_mutex_unlock>
		if (ret) {
    34b2:	b1e5      	cbz	r5, 34ee <data_out_block_mode+0x66>
	host_present = true;
    34b4:	2301      	movs	r3, #1
    34b6:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    34b8:	f899 3000 	ldrb.w	r3, [r9]
    34bc:	b973      	cbnz	r3, 34dc <data_out_block_mode+0x54>
}
    34be:	4630      	mov	r0, r6
    34c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    34c4:	4632      	mov	r2, r6
    34c6:	4641      	mov	r1, r8
    34c8:	2000      	movs	r0, #0
    34ca:	f003 fe99 	bl	7200 <SEGGER_RTT_WriteSkipNoLock>
    34ce:	4605      	mov	r5, r0
    34d0:	e7ef      	b.n	34b2 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    34d2:	4620      	mov	r0, r4
    34d4:	f7ff ffc4 	bl	3460 <on_failed_write>
    34d8:	1e65      	subs	r5, r4, #1
    34da:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    34dc:	2000      	movs	r0, #0
    34de:	f003 fed7 	bl	7290 <SEGGER_RTT_HasDataUp>
    34e2:	2800      	cmp	r0, #0
    34e4:	d0eb      	beq.n	34be <data_out_block_mode+0x36>
    34e6:	783b      	ldrb	r3, [r7, #0]
    34e8:	2b00      	cmp	r3, #0
    34ea:	d1f2      	bne.n	34d2 <data_out_block_mode+0x4a>
    34ec:	e7e7      	b.n	34be <data_out_block_mode+0x36>
		} else if (host_present) {
    34ee:	783b      	ldrb	r3, [r7, #0]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d0e4      	beq.n	34be <data_out_block_mode+0x36>
			retry_cnt--;
    34f4:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    34f6:	4620      	mov	r0, r4
    34f8:	f7ff ffb2 	bl	3460 <on_failed_write>
	} while ((ret == 0) && host_present);
    34fc:	783b      	ldrb	r3, [r7, #0]
    34fe:	2b00      	cmp	r3, #0
    3500:	d1ca      	bne.n	3498 <data_out_block_mode+0x10>
    3502:	e7dc      	b.n	34be <data_out_block_mode+0x36>
    3504:	2000122b 	.word	0x2000122b
    3508:	2000122a 	.word	0x2000122a

0000350c <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    350c:	4b01      	ldr	r3, [pc, #4]	; (3514 <format_set+0x8>)
	return 0;
}
    350e:	2000      	movs	r0, #0
	log_format_current = log_type;
    3510:	6019      	str	r1, [r3, #0]
}
    3512:	4770      	bx	lr
    3514:	200008f8 	.word	0x200008f8

00003518 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
    3518:	4b02      	ldr	r3, [pc, #8]	; (3524 <panic+0xc>)
	log_output_flush(output);
    351a:	4803      	ldr	r0, [pc, #12]	; (3528 <panic+0x10>)
    351c:	2201      	movs	r2, #1
    351e:	701a      	strb	r2, [r3, #0]
    3520:	f005 bed6 	b.w	92d0 <log_output_flush>
    3524:	2000123d 	.word	0x2000123d
    3528:	0000a2dc 	.word	0x0000a2dc

0000352c <dropped>:
	log_output_dropped_process(output, cnt);
    352c:	4801      	ldr	r0, [pc, #4]	; (3534 <dropped+0x8>)
    352e:	f7ff bf27 	b.w	3380 <log_output_dropped_process>
    3532:	bf00      	nop
    3534:	0000a2dc 	.word	0x0000a2dc

00003538 <process>:
{
    3538:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    353a:	4b06      	ldr	r3, [pc, #24]	; (3554 <process+0x1c>)
    353c:	6818      	ldr	r0, [r3, #0]
{
    353e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3540:	f7ff fac4 	bl	2acc <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    3544:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3546:	4603      	mov	r3, r0
}
    3548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    354c:	4802      	ldr	r0, [pc, #8]	; (3558 <process+0x20>)
    354e:	220f      	movs	r2, #15
    3550:	4718      	bx	r3
    3552:	bf00      	nop
    3554:	200008f8 	.word	0x200008f8
    3558:	0000a2dc 	.word	0x0000a2dc

0000355c <char_out>:
{
    355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    355e:	4f07      	ldr	r7, [pc, #28]	; (357c <char_out+0x20>)
    3560:	460d      	mov	r5, r1
    3562:	4604      	mov	r4, r0
    3564:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    3566:	42b4      	cmp	r4, r6
    3568:	d101      	bne.n	356e <char_out+0x12>
}
    356a:	4628      	mov	r0, r5
    356c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    356e:	f814 1b01 	ldrb.w	r1, [r4], #1
    3572:	68bb      	ldr	r3, [r7, #8]
    3574:	4801      	ldr	r0, [pc, #4]	; (357c <char_out+0x20>)
    3576:	685b      	ldr	r3, [r3, #4]
    3578:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    357a:	e7f4      	b.n	3566 <char_out+0xa>
    357c:	00009f08 	.word	0x00009f08

00003580 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3584:	4605      	mov	r5, r0
	__asm__ volatile(
    3586:	f04f 0320 	mov.w	r3, #32
    358a:	f3ef 8611 	mrs	r6, BASEPRI
    358e:	f383 8812 	msr	BASEPRI_MAX, r3
    3592:	f3bf 8f6f 	isb	sy
	return list->head;
    3596:	4b0e      	ldr	r3, [pc, #56]	; (35d0 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3598:	4f0e      	ldr	r7, [pc, #56]	; (35d4 <pm_state_notify+0x54>)
    359a:	681c      	ldr	r4, [r3, #0]
    359c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 35d8 <pm_state_notify+0x58>
    35a0:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    35a4:	b92c      	cbnz	r4, 35b2 <pm_state_notify+0x32>
	__asm__ volatile(
    35a6:	f386 8811 	msr	BASEPRI, r6
    35aa:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    35ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    35b2:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    35b6:	2d00      	cmp	r5, #0
    35b8:	bf18      	it	ne
    35ba:	4613      	movne	r3, r2
		if (callback) {
    35bc:	b12b      	cbz	r3, 35ca <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    35be:	f898 2010 	ldrb.w	r2, [r8, #16]
    35c2:	fb09 f202 	mul.w	r2, r9, r2
    35c6:	5cb8      	ldrb	r0, [r7, r2]
    35c8:	4798      	blx	r3
	return node->next;
    35ca:	6824      	ldr	r4, [r4, #0]
    35cc:	e7ea      	b.n	35a4 <pm_state_notify+0x24>
    35ce:	bf00      	nop
    35d0:	20000914 	.word	0x20000914
    35d4:	20000908 	.word	0x20000908
    35d8:	20001018 	.word	0x20001018

000035dc <pm_system_resume>:

void pm_system_resume(void)
{
    35dc:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    35de:	4b19      	ldr	r3, [pc, #100]	; (3644 <pm_system_resume+0x68>)
    35e0:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    35e2:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    35e6:	f004 031f 	and.w	r3, r4, #31
    35ea:	2201      	movs	r2, #1
    35ec:	409a      	lsls	r2, r3
    35ee:	4b16      	ldr	r3, [pc, #88]	; (3648 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    35f0:	0961      	lsrs	r1, r4, #5
    35f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    35f6:	43d0      	mvns	r0, r2
    35f8:	e853 1f00 	ldrex	r1, [r3]
    35fc:	ea01 0500 	and.w	r5, r1, r0
    3600:	e843 5600 	strex	r6, r5, [r3]
    3604:	2e00      	cmp	r6, #0
    3606:	d1f7      	bne.n	35f8 <pm_system_resume+0x1c>
    3608:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    360c:	420a      	tst	r2, r1
    360e:	d013      	beq.n	3638 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    3610:	4b0e      	ldr	r3, [pc, #56]	; (364c <pm_system_resume+0x70>)
    3612:	4d0f      	ldr	r5, [pc, #60]	; (3650 <pm_system_resume+0x74>)
    3614:	b18b      	cbz	r3, 363a <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3616:	230c      	movs	r3, #12
    3618:	4363      	muls	r3, r4
    361a:	18ea      	adds	r2, r5, r3
    361c:	5ce8      	ldrb	r0, [r5, r3]
    361e:	7851      	ldrb	r1, [r2, #1]
    3620:	f005 fef6 	bl	9410 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3624:	2000      	movs	r0, #0
    3626:	f7ff ffab 	bl	3580 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    362a:	230c      	movs	r3, #12
    362c:	435c      	muls	r4, r3
    362e:	192a      	adds	r2, r5, r4
    3630:	2300      	movs	r3, #0
    3632:	512b      	str	r3, [r5, r4]
    3634:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    3638:	bd70      	pop	{r4, r5, r6, pc}
    363a:	f383 8811 	msr	BASEPRI, r3
    363e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3642:	e7ef      	b.n	3624 <pm_system_resume+0x48>
    3644:	20001018 	.word	0x20001018
    3648:	2000091c 	.word	0x2000091c
    364c:	00009411 	.word	0x00009411
    3650:	20000908 	.word	0x20000908

00003654 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    3654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    3658:	4b35      	ldr	r3, [pc, #212]	; (3730 <pm_system_suspend+0xdc>)
{
    365a:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    365c:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    365e:	f04f 0320 	mov.w	r3, #32
    3662:	f3ef 8811 	mrs	r8, BASEPRI
    3666:	f383 8812 	msr	BASEPRI_MAX, r3
    366a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    366e:	240c      	movs	r4, #12
    3670:	4b30      	ldr	r3, [pc, #192]	; (3734 <pm_system_suspend+0xe0>)
    3672:	4e31      	ldr	r6, [pc, #196]	; (3738 <pm_system_suspend+0xe4>)
    3674:	436c      	muls	r4, r5
    3676:	191a      	adds	r2, r3, r4
    3678:	5d19      	ldrb	r1, [r3, r4]
    367a:	2900      	cmp	r1, #0
    367c:	d04c      	beq.n	3718 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    367e:	ca07      	ldmia	r2, {r0, r1, r2}
    3680:	eb06 0c04 	add.w	ip, r6, r4
    3684:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    3688:	2200      	movs	r2, #0
    368a:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    368c:	f388 8811 	msr	BASEPRI, r8
    3690:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3694:	230c      	movs	r3, #12
    3696:	436b      	muls	r3, r5
    3698:	18f2      	adds	r2, r6, r3
    369a:	5cf0      	ldrb	r0, [r6, r3]
    369c:	2800      	cmp	r0, #0
    369e:	d039      	beq.n	3714 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    36a0:	1c7b      	adds	r3, r7, #1
    36a2:	d010      	beq.n	36c6 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    36a4:	f8d2 c008 	ldr.w	ip, [r2, #8]
    36a8:	4c24      	ldr	r4, [pc, #144]	; (373c <pm_system_suspend+0xe8>)
    36aa:	4a25      	ldr	r2, [pc, #148]	; (3740 <pm_system_suspend+0xec>)
    36ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    36b0:	2100      	movs	r1, #0
    36b2:	fbec 4100 	umlal	r4, r1, ip, r0
    36b6:	2300      	movs	r3, #0
    36b8:	4620      	mov	r0, r4
    36ba:	f7fd fb73 	bl	da4 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    36be:	2101      	movs	r1, #1
    36c0:	1a38      	subs	r0, r7, r0
    36c2:	f002 f927 	bl	5914 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    36c6:	f004 fbeb 	bl	7ea0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    36ca:	2001      	movs	r0, #1
    36cc:	f7ff ff58 	bl	3580 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    36d0:	f3bf 8f5b 	dmb	ish
    36d4:	4b1b      	ldr	r3, [pc, #108]	; (3744 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    36d6:	096a      	lsrs	r2, r5, #5
    36d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    36dc:	f005 011f 	and.w	r1, r5, #31
    36e0:	2201      	movs	r2, #1
    36e2:	408a      	lsls	r2, r1
    36e4:	e853 0f00 	ldrex	r0, [r3]
    36e8:	4310      	orrs	r0, r2
    36ea:	e843 0100 	strex	r1, r0, [r3]
    36ee:	2900      	cmp	r1, #0
    36f0:	d1f8      	bne.n	36e4 <pm_system_suspend+0x90>
    36f2:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    36f6:	4b14      	ldr	r3, [pc, #80]	; (3748 <pm_system_suspend+0xf4>)
    36f8:	b13b      	cbz	r3, 370a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    36fa:	230c      	movs	r3, #12
    36fc:	fb03 f005 	mul.w	r0, r3, r5
    3700:	1833      	adds	r3, r6, r0
    3702:	5c30      	ldrb	r0, [r6, r0]
    3704:	7859      	ldrb	r1, [r3, #1]
    3706:	f005 fe77 	bl	93f8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    370a:	f7ff ff67 	bl	35dc <pm_system_resume>
	k_sched_unlock();
    370e:	f004 fbdb 	bl	7ec8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    3712:	2001      	movs	r0, #1
}
    3714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    3718:	4601      	mov	r1, r0
    371a:	4628      	mov	r0, r5
    371c:	f000 f816 	bl	374c <pm_policy_next_state>
		if (info != NULL) {
    3720:	2800      	cmp	r0, #0
    3722:	d0b3      	beq.n	368c <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    3724:	c807      	ldmia	r0, {r0, r1, r2}
    3726:	4434      	add	r4, r6
    3728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    372c:	e7ae      	b.n	368c <pm_system_suspend+0x38>
    372e:	bf00      	nop
    3730:	20001018 	.word	0x20001018
    3734:	200008fc 	.word	0x200008fc
    3738:	20000908 	.word	0x20000908
    373c:	000f423f 	.word	0x000f423f
    3740:	000f4240 	.word	0x000f4240
    3744:	2000091c 	.word	0x2000091c
    3748:	000093f9 	.word	0x000093f9

0000374c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    374c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3750:	b085      	sub	sp, #20
    3752:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3754:	a903      	add	r1, sp, #12
    3756:	f000 f843 	bl	37e0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    375a:	4b1e      	ldr	r3, [pc, #120]	; (37d4 <pm_policy_next_state+0x88>)
    375c:	9d03      	ldr	r5, [sp, #12]
    375e:	f8d3 a000 	ldr.w	sl, [r3]
    3762:	f8df 8074 	ldr.w	r8, [pc, #116]	; 37d8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3766:	1e43      	subs	r3, r0, #1
    3768:	b21b      	sxth	r3, r3
    376a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    376e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3770:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3774:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3778:	f04f 0b00 	mov.w	fp, #0
    377c:	b924      	cbnz	r4, 3788 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    377e:	46a1      	mov	r9, r4
}
    3780:	4648      	mov	r0, r9
    3782:	b005      	add	sp, #20
    3784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3788:	6868      	ldr	r0, [r5, #4]
    378a:	4a14      	ldr	r2, [pc, #80]	; (37dc <pm_policy_next_state+0x90>)
    378c:	46c4      	mov	ip, r8
    378e:	4659      	mov	r1, fp
    3790:	fbe0 c107 	umlal	ip, r1, r0, r7
    3794:	2300      	movs	r3, #0
    3796:	4660      	mov	r0, ip
    3798:	f7fd fb04 	bl	da4 <__aeabi_uldivmod>
    379c:	9001      	str	r0, [sp, #4]
    379e:	68a8      	ldr	r0, [r5, #8]
    37a0:	4a0e      	ldr	r2, [pc, #56]	; (37dc <pm_policy_next_state+0x90>)
    37a2:	46c4      	mov	ip, r8
    37a4:	4659      	mov	r1, fp
    37a6:	fbe0 c107 	umlal	ip, r1, r0, r7
    37aa:	2300      	movs	r3, #0
    37ac:	4660      	mov	r0, ip
    37ae:	f7fd faf9 	bl	da4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    37b2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    37b6:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    37b8:	d001      	beq.n	37be <pm_policy_next_state+0x72>
    37ba:	4582      	cmp	sl, r0
    37bc:	d905      	bls.n	37ca <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    37be:	1c73      	adds	r3, r6, #1
    37c0:	d0de      	beq.n	3780 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    37c2:	9b01      	ldr	r3, [sp, #4]
    37c4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    37c6:	42b0      	cmp	r0, r6
    37c8:	d9da      	bls.n	3780 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    37ca:	3c01      	subs	r4, #1
    37cc:	b2a4      	uxth	r4, r4
    37ce:	3d0c      	subs	r5, #12
    37d0:	e7d4      	b.n	377c <pm_policy_next_state+0x30>
    37d2:	bf00      	nop
    37d4:	20000008 	.word	0x20000008
    37d8:	000f423f 	.word	0x000f423f
    37dc:	000f4240 	.word	0x000f4240

000037e0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    37e0:	b908      	cbnz	r0, 37e6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    37e2:	4b02      	ldr	r3, [pc, #8]	; (37ec <pm_state_cpu_get_all+0xc>)
    37e4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    37e6:	2000      	movs	r0, #0
    37e8:	4770      	bx	lr
    37ea:	bf00      	nop
    37ec:	0000a2ec 	.word	0x0000a2ec

000037f0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    37f0:	4801      	ldr	r0, [pc, #4]	; (37f8 <nrf_cc3xx_platform_abort_init+0x8>)
    37f2:	f004 bedd 	b.w	85b0 <nrf_cc3xx_platform_set_abort>
    37f6:	bf00      	nop
    37f8:	0000a2ec 	.word	0x0000a2ec

000037fc <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    37fc:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    37fe:	4604      	mov	r4, r0
    3800:	b918      	cbnz	r0, 380a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    3802:	4b0f      	ldr	r3, [pc, #60]	; (3840 <mutex_free_platform+0x44>)
    3804:	480f      	ldr	r0, [pc, #60]	; (3844 <mutex_free_platform+0x48>)
    3806:	685b      	ldr	r3, [r3, #4]
    3808:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    380a:	6861      	ldr	r1, [r4, #4]
    380c:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    3810:	d00f      	beq.n	3832 <mutex_free_platform+0x36>
    3812:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    3816:	d00c      	beq.n	3832 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3818:	4d0b      	ldr	r5, [pc, #44]	; (3848 <mutex_free_platform+0x4c>)
    381a:	42a9      	cmp	r1, r5
    381c:	d009      	beq.n	3832 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    381e:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    3822:	d007      	beq.n	3834 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3824:	4809      	ldr	r0, [pc, #36]	; (384c <mutex_free_platform+0x50>)
    3826:	4621      	mov	r1, r4
    3828:	f006 f98d 	bl	9b46 <k_mem_slab_free>
        mutex->mutex = NULL;
    382c:	2300      	movs	r3, #0
    382e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3830:	6065      	str	r5, [r4, #4]
}
    3832:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3834:	6820      	ldr	r0, [r4, #0]
    3836:	2214      	movs	r2, #20
    3838:	f005 fdd0 	bl	93dc <memset>
    383c:	e7f8      	b.n	3830 <mutex_free_platform+0x34>
    383e:	bf00      	nop
    3840:	200000fc 	.word	0x200000fc
    3844:	0000a86b 	.word	0x0000a86b
    3848:	a95c5f2c 	.word	0xa95c5f2c
    384c:	20000e20 	.word	0x20000e20

00003850 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3850:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3852:	b320      	cbz	r0, 389e <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    3854:	6843      	ldr	r3, [r0, #4]
    3856:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    385a:	d110      	bne.n	387e <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    385c:	2201      	movs	r2, #1
    385e:	6803      	ldr	r3, [r0, #0]
    3860:	f3bf 8f5b 	dmb	ish
    3864:	e853 1f00 	ldrex	r1, [r3]
    3868:	2900      	cmp	r1, #0
    386a:	d103      	bne.n	3874 <mutex_lock_platform+0x24>
    386c:	e843 2000 	strex	r0, r2, [r3]
    3870:	2800      	cmp	r0, #0
    3872:	d1f7      	bne.n	3864 <mutex_lock_platform+0x14>
    3874:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3878:	d10d      	bne.n	3896 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    387a:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    387c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    387e:	4a09      	ldr	r2, [pc, #36]	; (38a4 <mutex_lock_platform+0x54>)
    3880:	4293      	cmp	r3, r2
    3882:	d00a      	beq.n	389a <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    3884:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    388a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    388e:	f003 fffd 	bl	788c <z_impl_k_mutex_lock>
        if (ret == 0) {
    3892:	2800      	cmp	r0, #0
    3894:	d0f1      	beq.n	387a <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3896:	4804      	ldr	r0, [pc, #16]	; (38a8 <mutex_lock_platform+0x58>)
    3898:	e7f0      	b.n	387c <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    389a:	4804      	ldr	r0, [pc, #16]	; (38ac <mutex_lock_platform+0x5c>)
    389c:	e7ee      	b.n	387c <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    389e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    38a2:	e7eb      	b.n	387c <mutex_lock_platform+0x2c>
    38a4:	a95c5f2c 	.word	0xa95c5f2c
    38a8:	ffff8fe9 	.word	0xffff8fe9
    38ac:	ffff8fea 	.word	0xffff8fea

000038b0 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    38b0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    38b2:	b1d8      	cbz	r0, 38ec <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    38b4:	6843      	ldr	r3, [r0, #4]
    38b6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    38ba:	d110      	bne.n	38de <mutex_unlock_platform+0x2e>
    38bc:	2200      	movs	r2, #0
    38be:	6803      	ldr	r3, [r0, #0]
    38c0:	f3bf 8f5b 	dmb	ish
    38c4:	e853 1f00 	ldrex	r1, [r3]
    38c8:	2901      	cmp	r1, #1
    38ca:	d103      	bne.n	38d4 <mutex_unlock_platform+0x24>
    38cc:	e843 2000 	strex	r0, r2, [r3]
    38d0:	2800      	cmp	r0, #0
    38d2:	d1f7      	bne.n	38c4 <mutex_unlock_platform+0x14>
    38d4:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    38d8:	d10b      	bne.n	38f2 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    38da:	2000      	movs	r0, #0
    }
}
    38dc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    38de:	4a07      	ldr	r2, [pc, #28]	; (38fc <mutex_unlock_platform+0x4c>)
    38e0:	4293      	cmp	r3, r2
    38e2:	d008      	beq.n	38f6 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    38e4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    38e6:	f004 f84b 	bl	7980 <z_impl_k_mutex_unlock>
    38ea:	e7f6      	b.n	38da <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    38ec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    38f0:	e7f4      	b.n	38dc <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    38f2:	4803      	ldr	r0, [pc, #12]	; (3900 <mutex_unlock_platform+0x50>)
    38f4:	e7f2      	b.n	38dc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    38f6:	4803      	ldr	r0, [pc, #12]	; (3904 <mutex_unlock_platform+0x54>)
    38f8:	e7f0      	b.n	38dc <mutex_unlock_platform+0x2c>
    38fa:	bf00      	nop
    38fc:	a95c5f2c 	.word	0xa95c5f2c
    3900:	ffff8fe9 	.word	0xffff8fe9
    3904:	ffff8fea 	.word	0xffff8fea

00003908 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3908:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    390a:	4604      	mov	r4, r0
    390c:	b918      	cbnz	r0, 3916 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    390e:	4b1d      	ldr	r3, [pc, #116]	; (3984 <mutex_init_platform+0x7c>)
    3910:	481d      	ldr	r0, [pc, #116]	; (3988 <mutex_init_platform+0x80>)
    3912:	685b      	ldr	r3, [r3, #4]
    3914:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3916:	6863      	ldr	r3, [r4, #4]
    3918:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    391c:	d02f      	beq.n	397e <mutex_init_platform+0x76>
    391e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    3922:	d02c      	beq.n	397e <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    3924:	4a19      	ldr	r2, [pc, #100]	; (398c <mutex_init_platform+0x84>)
    3926:	4293      	cmp	r3, r2
    3928:	d119      	bne.n	395e <mutex_init_platform+0x56>
    392a:	6823      	ldr	r3, [r4, #0]
    392c:	bb03      	cbnz	r3, 3970 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    392e:	4818      	ldr	r0, [pc, #96]	; (3990 <mutex_init_platform+0x88>)
    3930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3938:	4621      	mov	r1, r4
    393a:	f003 fe49 	bl	75d0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    393e:	b908      	cbnz	r0, 3944 <mutex_init_platform+0x3c>
    3940:	6823      	ldr	r3, [r4, #0]
    3942:	b91b      	cbnz	r3, 394c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    3944:	4b0f      	ldr	r3, [pc, #60]	; (3984 <mutex_init_platform+0x7c>)
    3946:	4813      	ldr	r0, [pc, #76]	; (3994 <mutex_init_platform+0x8c>)
    3948:	685b      	ldr	r3, [r3, #4]
    394a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    394c:	6820      	ldr	r0, [r4, #0]
    394e:	2214      	movs	r2, #20
    3950:	2100      	movs	r1, #0
    3952:	f005 fd43 	bl	93dc <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3956:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    395a:	6063      	str	r3, [r4, #4]
    395c:	e008      	b.n	3970 <mutex_init_platform+0x68>
    switch(flags){
    395e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    3962:	d80d      	bhi.n	3980 <mutex_init_platform+0x78>
    3964:	2b3a      	cmp	r3, #58	; 0x3a
    3966:	d003      	beq.n	3970 <mutex_init_platform+0x68>
    3968:	f640 62ba 	movw	r2, #3770	; 0xeba
    396c:	4293      	cmp	r3, r2
    396e:	d1de      	bne.n	392e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3970:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3972:	f006 f929 	bl	9bc8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3976:	6863      	ldr	r3, [r4, #4]
    3978:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    397c:	6063      	str	r3, [r4, #4]
}
    397e:	bd10      	pop	{r4, pc}
    switch(flags){
    3980:	4a05      	ldr	r2, [pc, #20]	; (3998 <mutex_init_platform+0x90>)
    3982:	e7f3      	b.n	396c <mutex_init_platform+0x64>
    3984:	200000fc 	.word	0x200000fc
    3988:	0000a86b 	.word	0x0000a86b
    398c:	a95c5f2c 	.word	0xa95c5f2c
    3990:	20000e20 	.word	0x20000e20
    3994:	0000a891 	.word	0x0000a891
    3998:	3a00003a 	.word	0x3a00003a

0000399c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    399c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    399e:	4906      	ldr	r1, [pc, #24]	; (39b8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    39a0:	4806      	ldr	r0, [pc, #24]	; (39bc <nrf_cc3xx_platform_mutex_init+0x20>)
    39a2:	2340      	movs	r3, #64	; 0x40
    39a4:	2214      	movs	r2, #20
    39a6:	f006 f8c0 	bl	9b2a <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    39aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    39ae:	4904      	ldr	r1, [pc, #16]	; (39c0 <nrf_cc3xx_platform_mutex_init+0x24>)
    39b0:	4804      	ldr	r0, [pc, #16]	; (39c4 <nrf_cc3xx_platform_mutex_init+0x28>)
    39b2:	f004 be6f 	b.w	8694 <nrf_cc3xx_platform_set_mutexes>
    39b6:	bf00      	nop
    39b8:	20000920 	.word	0x20000920
    39bc:	20000e20 	.word	0x20000e20
    39c0:	0000a2f4 	.word	0x0000a2f4
    39c4:	0000a308 	.word	0x0000a308

000039c8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    39c8:	4901      	ldr	r1, [pc, #4]	; (39d0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    39ca:	2210      	movs	r2, #16
	str	r2, [r1]
    39cc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    39ce:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    39d0:	e000ed10 	.word	0xe000ed10

000039d4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    39d4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    39d6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    39d8:	f380 8811 	msr	BASEPRI, r0
	isb
    39dc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    39e0:	f3bf 8f4f 	dsb	sy
    39e4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    39e6:	b662      	cpsie	i
	isb
    39e8:	f3bf 8f6f 	isb	sy

	bx	lr
    39ec:	4770      	bx	lr
    39ee:	bf00      	nop

000039f0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    39f0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    39f2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    39f4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    39f8:	f3bf 8f4f 	dsb	sy
    39fc:	bf20      	wfe

	msr	BASEPRI, r0
    39fe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3a02:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3a04:	4770      	bx	lr
    3a06:	bf00      	nop

00003a08 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3a0c:	4681      	mov	r9, r0
    3a0e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    3a10:	460c      	mov	r4, r1
    3a12:	2900      	cmp	r1, #0
    3a14:	d04c      	beq.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3a16:	466e      	mov	r6, sp
    3a18:	b08a      	sub	sp, #40	; 0x28
    3a1a:	e9d1 1200 	ldrd	r1, r2, [r1]
    3a1e:	68a3      	ldr	r3, [r4, #8]
    3a20:	466d      	mov	r5, sp
    3a22:	4827      	ldr	r0, [pc, #156]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3a24:	46a8      	mov	r8, r5
    3a26:	f04f 0a05 	mov.w	sl, #5
    3a2a:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3a2e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3a32:	f848 af10 	str.w	sl, [r8, #16]!
    3a36:	4823      	ldr	r0, [pc, #140]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a38:	4642      	mov	r2, r8
    3a3a:	2300      	movs	r3, #0
    3a3c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3a40:	f7ff fa2c 	bl	2e9c <z_impl_z_log_msg_static_create>
    3a44:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3a46:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    3a4a:	6963      	ldr	r3, [r4, #20]
    3a4c:	46ad      	mov	sp, r5
    3a4e:	481e      	ldr	r0, [pc, #120]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
    3a50:	f8c5 a010 	str.w	sl, [r5, #16]
    3a54:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3a58:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3a5c:	4819      	ldr	r0, [pc, #100]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a5e:	2300      	movs	r3, #0
    3a60:	4642      	mov	r2, r8
    3a62:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3a66:	f7ff fa19 	bl	2e9c <z_impl_z_log_msg_static_create>
    3a6a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3a6c:	b088      	sub	sp, #32
    3a6e:	69e3      	ldr	r3, [r4, #28]
    3a70:	466d      	mov	r5, sp
    3a72:	4a16      	ldr	r2, [pc, #88]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3a74:	46a8      	mov	r8, r5
    3a76:	f04f 0a03 	mov.w	sl, #3
    3a7a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    3a7e:	f848 af10 	str.w	sl, [r8, #16]!
    3a82:	4810      	ldr	r0, [pc, #64]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3a84:	2300      	movs	r3, #0
    3a86:	4642      	mov	r2, r8
    3a88:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3a8c:	f7ff fa06 	bl	2e9c <z_impl_z_log_msg_static_create>
    3a90:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3a92:	69a3      	ldr	r3, [r4, #24]
    3a94:	46ad      	mov	sp, r5
    3a96:	4a0e      	ldr	r2, [pc, #56]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3a98:	f8c5 a010 	str.w	sl, [r5, #16]
    3a9c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    3aa0:	4808      	ldr	r0, [pc, #32]	; (3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>)
    3aa2:	2300      	movs	r3, #0
    3aa4:	4642      	mov	r2, r8
    3aa6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3aaa:	f7ff f9f7 	bl	2e9c <z_impl_z_log_msg_static_create>
    3aae:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3ab0:	4621      	mov	r1, r4
    3ab2:	4648      	mov	r0, r9
    3ab4:	f003 fc06 	bl	72c4 <z_fatal_error>
}
    3ab8:	46bd      	mov	sp, r7
    3aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3abe:	bf00      	nop
    3ac0:	0000a8be 	.word	0x0000a8be
    3ac4:	0000a1b8 	.word	0x0000a1b8
    3ac8:	0000a8ed 	.word	0x0000a8ed
    3acc:	0000a91c 	.word	0x0000a91c
    3ad0:	0000a92b 	.word	0x0000a92b

00003ad4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3ad4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3ad6:	2800      	cmp	r0, #0
    3ad8:	db07      	blt.n	3aea <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ada:	4a04      	ldr	r2, [pc, #16]	; (3aec <arch_irq_enable+0x18>)
    3adc:	0941      	lsrs	r1, r0, #5
    3ade:	2301      	movs	r3, #1
    3ae0:	f000 001f 	and.w	r0, r0, #31
    3ae4:	4083      	lsls	r3, r0
    3ae6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3aea:	4770      	bx	lr
    3aec:	e000e100 	.word	0xe000e100

00003af0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3af0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3af2:	2800      	cmp	r0, #0
    3af4:	db0c      	blt.n	3b10 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3af6:	0943      	lsrs	r3, r0, #5
    3af8:	4906      	ldr	r1, [pc, #24]	; (3b14 <arch_irq_disable+0x24>)
    3afa:	f000 001f 	and.w	r0, r0, #31
    3afe:	3320      	adds	r3, #32
    3b00:	2201      	movs	r2, #1
    3b02:	4082      	lsls	r2, r0
    3b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3b08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b0c:	f3bf 8f6f 	isb	sy
}
    3b10:	4770      	bx	lr
    3b12:	bf00      	nop
    3b14:	e000e100 	.word	0xe000e100

00003b18 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3b18:	4b05      	ldr	r3, [pc, #20]	; (3b30 <arch_irq_is_enabled+0x18>)
    3b1a:	0942      	lsrs	r2, r0, #5
    3b1c:	f000 001f 	and.w	r0, r0, #31
    3b20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3b24:	2301      	movs	r3, #1
    3b26:	fa03 f000 	lsl.w	r0, r3, r0
}
    3b2a:	4010      	ands	r0, r2
    3b2c:	4770      	bx	lr
    3b2e:	bf00      	nop
    3b30:	e000e100 	.word	0xe000e100

00003b34 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3b34:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3b36:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b38:	bfa8      	it	ge
    3b3a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3b3e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b42:	bfb8      	it	lt
    3b44:	4b06      	ldrlt	r3, [pc, #24]	; (3b60 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b46:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3b4a:	bfac      	ite	ge
    3b4c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b50:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b54:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b56:	bfb4      	ite	lt
    3b58:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b5a:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    3b5e:	4770      	bx	lr
    3b60:	e000ed14 	.word	0xe000ed14

00003b64 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3b64:	bf30      	wfi
    b z_SysNmiOnReset
    3b66:	f7ff bffd 	b.w	3b64 <z_SysNmiOnReset>
    3b6a:	bf00      	nop

00003b6c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3b6c:	4a0b      	ldr	r2, [pc, #44]	; (3b9c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3b6e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3b70:	4b0b      	ldr	r3, [pc, #44]	; (3ba0 <z_arm_prep_c+0x34>)
    3b72:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3b76:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3b78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b7c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3b80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3b84:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3b8c:	f003 fc56 	bl	743c <z_bss_zero>
	z_data_copy();
    3b90:	f004 fac4 	bl	811c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3b94:	f000 fbdc 	bl	4350 <z_arm_interrupt_init>
	z_cstart();
    3b98:	f003 fc98 	bl	74cc <z_cstart>
    3b9c:	00000000 	.word	0x00000000
    3ba0:	e000ed00 	.word	0xe000ed00

00003ba4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3ba4:	4a0a      	ldr	r2, [pc, #40]	; (3bd0 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3ba6:	490b      	ldr	r1, [pc, #44]	; (3bd4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3ba8:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3baa:	6809      	ldr	r1, [r1, #0]
    3bac:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3bb0:	4909      	ldr	r1, [pc, #36]	; (3bd8 <arch_swap+0x34>)
	_current->arch.basepri = key;
    3bb2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3bb6:	684b      	ldr	r3, [r1, #4]
    3bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3bbc:	604b      	str	r3, [r1, #4]
    3bbe:	2300      	movs	r3, #0
    3bc0:	f383 8811 	msr	BASEPRI, r3
    3bc4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3bc8:	6893      	ldr	r3, [r2, #8]
}
    3bca:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    3bce:	4770      	bx	lr
    3bd0:	20001018 	.word	0x20001018
    3bd4:	0000a4c4 	.word	0x0000a4c4
    3bd8:	e000ed00 	.word	0xe000ed00

00003bdc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3bdc:	4913      	ldr	r1, [pc, #76]	; (3c2c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3bde:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3be0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3be4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3be6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3bea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3bee:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3bf0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3bf4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3bf8:	4f0d      	ldr	r7, [pc, #52]	; (3c30 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3bfa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3bfe:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3c00:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3c02:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3c04:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    3c08:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3c0a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3c0e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3c12:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3c14:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3c16:	f000 fc3d 	bl	4494 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3c1a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3c1e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3c22:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3c26:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3c2a:	4770      	bx	lr
    ldr r1, =_kernel
    3c2c:	20001018 	.word	0x20001018
    ldr v4, =_SCS_ICSR
    3c30:	e000ed04 	.word	0xe000ed04

00003c34 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3c34:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3c38:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3c3a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3c3e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3c42:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3c44:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3c48:	2902      	cmp	r1, #2
    beq _oops
    3c4a:	d0ff      	beq.n	3c4c <_oops>

00003c4c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3c4c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3c4e:	f005 fb7a 	bl	9346 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3c52:	bd01      	pop	{r0, pc}

00003c54 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3c54:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3c58:	9b00      	ldr	r3, [sp, #0]
    3c5a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3c5e:	490a      	ldr	r1, [pc, #40]	; (3c88 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3c60:	9b01      	ldr	r3, [sp, #4]
    3c62:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3c66:	9b02      	ldr	r3, [sp, #8]
    3c68:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3c6c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3c74:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3c78:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3c7c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3c7e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3c80:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3c82:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3c86:	4770      	bx	lr
    3c88:	00008a11 	.word	0x00008a11

00003c8c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3c8c:	4a0a      	ldr	r2, [pc, #40]	; (3cb8 <z_check_thread_stack_fail+0x2c>)
{
    3c8e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3c90:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3c92:	b178      	cbz	r0, 3cb4 <z_check_thread_stack_fail+0x28>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3c94:	f113 0f16 	cmn.w	r3, #22
    3c98:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    3c9c:	d005      	beq.n	3caa <z_check_thread_stack_fail+0x1e>
    3c9e:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    3ca2:	429a      	cmp	r2, r3
    3ca4:	d805      	bhi.n	3cb2 <z_check_thread_stack_fail+0x26>
    3ca6:	4283      	cmp	r3, r0
    3ca8:	d203      	bcs.n	3cb2 <z_check_thread_stack_fail+0x26>
		return 0;
    3caa:	4281      	cmp	r1, r0
    3cac:	bf28      	it	cs
    3cae:	2000      	movcs	r0, #0
    3cb0:	4770      	bx	lr
    3cb2:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3cb4:	4770      	bx	lr
    3cb6:	bf00      	nop
    3cb8:	20001018 	.word	0x20001018

00003cbc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3cbc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3cbe:	4b09      	ldr	r3, [pc, #36]	; (3ce4 <arch_switch_to_main_thread+0x28>)
{
    3cc0:	460d      	mov	r5, r1
    3cc2:	4614      	mov	r4, r2
	_current = main_thread;
    3cc4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3cc6:	f000 fbe5 	bl	4494 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3cca:	4620      	mov	r0, r4
    3ccc:	f385 8809 	msr	PSP, r5
    3cd0:	2100      	movs	r1, #0
    3cd2:	b663      	cpsie	if
    3cd4:	f381 8811 	msr	BASEPRI, r1
    3cd8:	f3bf 8f6f 	isb	sy
    3cdc:	2200      	movs	r2, #0
    3cde:	2300      	movs	r3, #0
    3ce0:	f004 fe96 	bl	8a10 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3ce4:	20001018 	.word	0x20001018

00003ce8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3ce8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3cea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3cec:	4a0b      	ldr	r2, [pc, #44]	; (3d1c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3cee:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    3cf0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3cf2:	bf1e      	ittt	ne
	movne	r1, #0
    3cf4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3cf6:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    3cf8:	f005 ff57 	blne	9baa <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3cfc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3cfe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3d02:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3d06:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3d0a:	4905      	ldr	r1, [pc, #20]	; (3d20 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3d0c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3d0e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3d10:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3d12:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3d16:	4903      	ldr	r1, [pc, #12]	; (3d24 <_isr_wrapper+0x3c>)
	bx r1
    3d18:	4708      	bx	r1
    3d1a:	0000      	.short	0x0000
	ldr r2, =_kernel
    3d1c:	20001018 	.word	0x20001018
	ldr r1, =_sw_isr_table
    3d20:	00009f80 	.word	0x00009f80
	ldr r1, =z_arm_int_exit
    3d24:	00003d29 	.word	0x00003d29

00003d28 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3d28:	4b04      	ldr	r3, [pc, #16]	; (3d3c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3d2a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3d2c:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3d2e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3d30:	d003      	beq.n	3d3a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3d32:	4903      	ldr	r1, [pc, #12]	; (3d40 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3d38:	600a      	str	r2, [r1, #0]

00003d3a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3d3a:	4770      	bx	lr
	ldr r3, =_kernel
    3d3c:	20001018 	.word	0x20001018
	ldr r1, =_SCS_ICSR
    3d40:	e000ed04 	.word	0xe000ed04

00003d44 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d48:	b086      	sub	sp, #24
    3d4a:	4606      	mov	r6, r0
    3d4c:	af00      	add	r7, sp, #0
    3d4e:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3d50:	4b47      	ldr	r3, [pc, #284]	; (3e70 <bus_fault.constprop.0+0x12c>)
    3d52:	617b      	str	r3, [r7, #20]
    3d54:	2402      	movs	r4, #2
    3d56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3d5a:	4846      	ldr	r0, [pc, #280]	; (3e74 <bus_fault.constprop.0+0x130>)
    3d5c:	613c      	str	r4, [r7, #16]
    3d5e:	f107 0210 	add.w	r2, r7, #16
    3d62:	f005 faff 	bl	9364 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3d66:	4b44      	ldr	r3, [pc, #272]	; (3e78 <bus_fault.constprop.0+0x134>)
    3d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d6a:	04d9      	lsls	r1, r3, #19
    3d6c:	d56d      	bpl.n	3e4a <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    3d6e:	4b43      	ldr	r3, [pc, #268]	; (3e7c <bus_fault.constprop.0+0x138>)
    3d70:	4840      	ldr	r0, [pc, #256]	; (3e74 <bus_fault.constprop.0+0x130>)
    3d72:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3d76:	f107 0210 	add.w	r2, r7, #16
    3d7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3d7e:	f005 faf1 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    3d82:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3d84:	4b3c      	ldr	r3, [pc, #240]	; (3e78 <bus_fault.constprop.0+0x134>)
    3d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d88:	051a      	lsls	r2, r3, #20
    3d8a:	d50b      	bpl.n	3da4 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    3d8c:	4b3c      	ldr	r3, [pc, #240]	; (3e80 <bus_fault.constprop.0+0x13c>)
    3d8e:	617b      	str	r3, [r7, #20]
    3d90:	2302      	movs	r3, #2
    3d92:	4838      	ldr	r0, [pc, #224]	; (3e74 <bus_fault.constprop.0+0x130>)
    3d94:	613b      	str	r3, [r7, #16]
    3d96:	f107 0210 	add.w	r2, r7, #16
    3d9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3d9e:	f005 fae1 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3da2:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3da4:	4c34      	ldr	r4, [pc, #208]	; (3e78 <bus_fault.constprop.0+0x134>)
    3da6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3da8:	059b      	lsls	r3, r3, #22
    3daa:	d523      	bpl.n	3df4 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    3dac:	46e8      	mov	r8, sp
    3dae:	4b35      	ldr	r3, [pc, #212]	; (3e84 <bus_fault.constprop.0+0x140>)
    3db0:	617b      	str	r3, [r7, #20]
    3db2:	2302      	movs	r3, #2
    3db4:	482f      	ldr	r0, [pc, #188]	; (3e74 <bus_fault.constprop.0+0x130>)
    3db6:	613b      	str	r3, [r7, #16]
    3db8:	f107 0210 	add.w	r2, r7, #16
    3dbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3dc0:	f005 fad0 	bl	9364 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3dc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3dc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3dc8:	0410      	lsls	r0, r2, #16
    3dca:	d512      	bpl.n	3df2 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3dcc:	b088      	sub	sp, #32
    3dce:	466a      	mov	r2, sp
    3dd0:	492d      	ldr	r1, [pc, #180]	; (3e88 <bus_fault.constprop.0+0x144>)
    3dd2:	4828      	ldr	r0, [pc, #160]	; (3e74 <bus_fault.constprop.0+0x130>)
    3dd4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3dd8:	2303      	movs	r3, #3
    3dda:	f842 3f10 	str.w	r3, [r2, #16]!
    3dde:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3de2:	f005 fabf 	bl	9364 <z_log_msg_static_create.constprop.0>
    3de6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    3de8:	b11e      	cbz	r6, 3df2 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3dea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3dec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3df0:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3df2:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3df4:	4b20      	ldr	r3, [pc, #128]	; (3e78 <bus_fault.constprop.0+0x134>)
    3df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3df8:	0559      	lsls	r1, r3, #21
    3dfa:	d50b      	bpl.n	3e14 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    3dfc:	4b23      	ldr	r3, [pc, #140]	; (3e8c <bus_fault.constprop.0+0x148>)
    3dfe:	617b      	str	r3, [r7, #20]
    3e00:	2302      	movs	r3, #2
    3e02:	481c      	ldr	r0, [pc, #112]	; (3e74 <bus_fault.constprop.0+0x130>)
    3e04:	613b      	str	r3, [r7, #16]
    3e06:	f107 0210 	add.w	r2, r7, #16
    3e0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e0e:	f005 faa9 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3e12:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3e14:	4b18      	ldr	r3, [pc, #96]	; (3e78 <bus_fault.constprop.0+0x134>)
    3e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3e18:	05d2      	lsls	r2, r2, #23
    3e1a:	d518      	bpl.n	3e4e <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    3e1c:	4b1c      	ldr	r3, [pc, #112]	; (3e90 <bus_fault.constprop.0+0x14c>)
    3e1e:	617b      	str	r3, [r7, #20]
    3e20:	2302      	movs	r3, #2
    3e22:	4814      	ldr	r0, [pc, #80]	; (3e74 <bus_fault.constprop.0+0x130>)
    3e24:	613b      	str	r3, [r7, #16]
    3e26:	f107 0210 	add.w	r2, r7, #16
    3e2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e2e:	f005 fa99 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    3e32:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3e34:	4a10      	ldr	r2, [pc, #64]	; (3e78 <bus_fault.constprop.0+0x134>)
    3e36:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e38:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3e3c:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    3e3e:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    3e40:	2300      	movs	r3, #0
    3e42:	702b      	strb	r3, [r5, #0]
}
    3e44:	46bd      	mov	sp, r7
    3e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    3e4a:	2016      	movs	r0, #22
    3e4c:	e79a      	b.n	3d84 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e50:	049b      	lsls	r3, r3, #18
    3e52:	d5ef      	bpl.n	3e34 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3e54:	4b0f      	ldr	r3, [pc, #60]	; (3e94 <bus_fault.constprop.0+0x150>)
    3e56:	617b      	str	r3, [r7, #20]
    3e58:	2302      	movs	r3, #2
    3e5a:	4806      	ldr	r0, [pc, #24]	; (3e74 <bus_fault.constprop.0+0x130>)
    3e5c:	613b      	str	r3, [r7, #16]
    3e5e:	f107 0210 	add.w	r2, r7, #16
    3e62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e66:	f005 fa7d 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    3e6a:	201c      	movs	r0, #28
    3e6c:	e7e2      	b.n	3e34 <bus_fault.constprop.0+0xf0>
    3e6e:	bf00      	nop
    3e70:	0000a959 	.word	0x0000a959
    3e74:	0000a1b8 	.word	0x0000a1b8
    3e78:	e000ed00 	.word	0xe000ed00
    3e7c:	0000a96f 	.word	0x0000a96f
    3e80:	0000a980 	.word	0x0000a980
    3e84:	0000a993 	.word	0x0000a993
    3e88:	0000a9ac 	.word	0x0000a9ac
    3e8c:	0000a9c1 	.word	0x0000a9c1
    3e90:	0000a9dc 	.word	0x0000a9dc
    3e94:	0000a9f4 	.word	0x0000a9f4

00003e98 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3e98:	b510      	push	{r4, lr}
    3e9a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3e9c:	4b36      	ldr	r3, [pc, #216]	; (3f78 <usage_fault.constprop.0+0xe0>)
    3e9e:	4837      	ldr	r0, [pc, #220]	; (3f7c <usage_fault.constprop.0+0xe4>)
    3ea0:	9305      	str	r3, [sp, #20]
    3ea2:	aa04      	add	r2, sp, #16
    3ea4:	2402      	movs	r4, #2
    3ea6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3eaa:	9404      	str	r4, [sp, #16]
    3eac:	f005 fa5a 	bl	9364 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3eb0:	4b33      	ldr	r3, [pc, #204]	; (3f80 <usage_fault.constprop.0+0xe8>)
    3eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3eb4:	019a      	lsls	r2, r3, #6
    3eb6:	d55d      	bpl.n	3f74 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    3eb8:	4b32      	ldr	r3, [pc, #200]	; (3f84 <usage_fault.constprop.0+0xec>)
    3eba:	4830      	ldr	r0, [pc, #192]	; (3f7c <usage_fault.constprop.0+0xe4>)
    3ebc:	aa04      	add	r2, sp, #16
    3ebe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ec2:	e9cd 4304 	strd	r4, r3, [sp, #16]
    3ec6:	f005 fa4d 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    3eca:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3ecc:	4b2c      	ldr	r3, [pc, #176]	; (3f80 <usage_fault.constprop.0+0xe8>)
    3ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ed0:	01db      	lsls	r3, r3, #7
    3ed2:	d50a      	bpl.n	3eea <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    3ed4:	4b2c      	ldr	r3, [pc, #176]	; (3f88 <usage_fault.constprop.0+0xf0>)
    3ed6:	4829      	ldr	r0, [pc, #164]	; (3f7c <usage_fault.constprop.0+0xe4>)
    3ed8:	9305      	str	r3, [sp, #20]
    3eda:	aa04      	add	r2, sp, #16
    3edc:	2302      	movs	r3, #2
    3ede:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ee2:	9304      	str	r3, [sp, #16]
    3ee4:	f005 fa3e 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3ee8:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3eea:	4b25      	ldr	r3, [pc, #148]	; (3f80 <usage_fault.constprop.0+0xe8>)
    3eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3eee:	031c      	lsls	r4, r3, #12
    3ef0:	d50a      	bpl.n	3f08 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    3ef2:	4b26      	ldr	r3, [pc, #152]	; (3f8c <usage_fault.constprop.0+0xf4>)
    3ef4:	4821      	ldr	r0, [pc, #132]	; (3f7c <usage_fault.constprop.0+0xe4>)
    3ef6:	9305      	str	r3, [sp, #20]
    3ef8:	aa04      	add	r2, sp, #16
    3efa:	2302      	movs	r3, #2
    3efc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f00:	9304      	str	r3, [sp, #16]
    3f02:	f005 fa2f 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3f06:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3f08:	4b1d      	ldr	r3, [pc, #116]	; (3f80 <usage_fault.constprop.0+0xe8>)
    3f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f0c:	0359      	lsls	r1, r3, #13
    3f0e:	d50a      	bpl.n	3f26 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3f10:	4b1f      	ldr	r3, [pc, #124]	; (3f90 <usage_fault.constprop.0+0xf8>)
    3f12:	481a      	ldr	r0, [pc, #104]	; (3f7c <usage_fault.constprop.0+0xe4>)
    3f14:	9305      	str	r3, [sp, #20]
    3f16:	aa04      	add	r2, sp, #16
    3f18:	2302      	movs	r3, #2
    3f1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f1e:	9304      	str	r3, [sp, #16]
    3f20:	f005 fa20 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3f24:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3f26:	4b16      	ldr	r3, [pc, #88]	; (3f80 <usage_fault.constprop.0+0xe8>)
    3f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f2a:	039a      	lsls	r2, r3, #14
    3f2c:	d50a      	bpl.n	3f44 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3f2e:	4b19      	ldr	r3, [pc, #100]	; (3f94 <usage_fault.constprop.0+0xfc>)
    3f30:	4812      	ldr	r0, [pc, #72]	; (3f7c <usage_fault.constprop.0+0xe4>)
    3f32:	9305      	str	r3, [sp, #20]
    3f34:	aa04      	add	r2, sp, #16
    3f36:	2302      	movs	r3, #2
    3f38:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f3c:	9304      	str	r3, [sp, #16]
    3f3e:	f005 fa11 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3f42:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3f44:	4b0e      	ldr	r3, [pc, #56]	; (3f80 <usage_fault.constprop.0+0xe8>)
    3f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f48:	03db      	lsls	r3, r3, #15
    3f4a:	d50a      	bpl.n	3f62 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3f4c:	4b12      	ldr	r3, [pc, #72]	; (3f98 <usage_fault.constprop.0+0x100>)
    3f4e:	480b      	ldr	r0, [pc, #44]	; (3f7c <usage_fault.constprop.0+0xe4>)
    3f50:	9305      	str	r3, [sp, #20]
    3f52:	aa04      	add	r2, sp, #16
    3f54:	2302      	movs	r3, #2
    3f56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f5a:	9304      	str	r3, [sp, #16]
    3f5c:	f005 fa02 	bl	9364 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    3f60:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f62:	4a07      	ldr	r2, [pc, #28]	; (3f80 <usage_fault.constprop.0+0xe8>)
    3f64:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f66:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3f6a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3f6e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3f70:	b006      	add	sp, #24
    3f72:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    3f74:	201d      	movs	r0, #29
    3f76:	e7a9      	b.n	3ecc <usage_fault.constprop.0+0x34>
    3f78:	0000aa23 	.word	0x0000aa23
    3f7c:	0000a1b8 	.word	0x0000a1b8
    3f80:	e000ed00 	.word	0xe000ed00
    3f84:	0000aa3b 	.word	0x0000aa3b
    3f88:	0000aa4e 	.word	0x0000aa4e
    3f8c:	0000aa68 	.word	0x0000aa68
    3f90:	0000aa86 	.word	0x0000aa86
    3f94:	0000aaab 	.word	0x0000aaab
    3f98:	0000aac5 	.word	0x0000aac5

00003f9c <mem_manage_fault>:
{
    3f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fa0:	b086      	sub	sp, #24
    3fa2:	4681      	mov	r9, r0
    3fa4:	af00      	add	r7, sp, #0
    3fa6:	468a      	mov	sl, r1
    3fa8:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3faa:	4b51      	ldr	r3, [pc, #324]	; (40f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf0>)
    3fac:	617b      	str	r3, [r7, #20]
    3fae:	2402      	movs	r4, #2
    3fb0:	4850      	ldr	r0, [pc, #320]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    3fb2:	613c      	str	r4, [r7, #16]
    3fb4:	f107 0210 	add.w	r2, r7, #16
    3fb8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3fbc:	f005 f9d2 	bl	9364 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3fc0:	4b4d      	ldr	r3, [pc, #308]	; (40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>)
    3fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fc4:	06de      	lsls	r6, r3, #27
    3fc6:	d545      	bpl.n	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3fc8:	4b4c      	ldr	r3, [pc, #304]	; (40fc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xfc>)
    3fca:	484a      	ldr	r0, [pc, #296]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    3fcc:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3fd0:	f107 0210 	add.w	r2, r7, #16
    3fd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    3fd8:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    3fda:	f005 f9c3 	bl	9364 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3fde:	4b46      	ldr	r3, [pc, #280]	; (40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>)
    3fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fe2:	071d      	lsls	r5, r3, #28
    3fe4:	d50b      	bpl.n	3ffe <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    3fe6:	4b46      	ldr	r3, [pc, #280]	; (4100 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x100>)
    3fe8:	617b      	str	r3, [r7, #20]
    3fea:	2302      	movs	r3, #2
    3fec:	4841      	ldr	r0, [pc, #260]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    3fee:	613b      	str	r3, [r7, #16]
    3ff0:	f107 0210 	add.w	r2, r7, #16
    3ff4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    3ff8:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    3ffa:	f005 f9b3 	bl	9364 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3ffe:	4d3e      	ldr	r5, [pc, #248]	; (40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>)
    4000:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4002:	0798      	lsls	r0, r3, #30
    4004:	d528      	bpl.n	4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>
		PR_FAULT_INFO("  Data Access Violation");
    4006:	466c      	mov	r4, sp
    4008:	4b3e      	ldr	r3, [pc, #248]	; (4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>)
    400a:	617b      	str	r3, [r7, #20]
    400c:	2302      	movs	r3, #2
    400e:	613b      	str	r3, [r7, #16]
    4010:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4014:	4837      	ldr	r0, [pc, #220]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    4016:	f107 0210 	add.w	r2, r7, #16
    401a:	f005 f9a3 	bl	9364 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    401e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4020:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4022:	0619      	lsls	r1, r3, #24
    4024:	d560      	bpl.n	40e8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe8>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4026:	b088      	sub	sp, #32
    4028:	466a      	mov	r2, sp
    402a:	4b37      	ldr	r3, [pc, #220]	; (4108 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x108>)
    402c:	4831      	ldr	r0, [pc, #196]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    402e:	e9c2 3605 	strd	r3, r6, [r2, #20]
    4032:	2303      	movs	r3, #3
    4034:	f842 3f10 	str.w	r3, [r2, #16]!
    4038:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    403c:	f005 f992 	bl	9364 <z_log_msg_static_create.constprop.0>
    4040:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    4042:	f1ba 0f00 	cmp.w	sl, #0
    4046:	d003      	beq.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4048:	6aab      	ldr	r3, [r5, #40]	; 0x28
    404a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    404e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    4050:	2413      	movs	r4, #19
    4052:	e003      	b.n	405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    4054:	2410      	movs	r4, #16
    4056:	e7c2      	b.n	3fde <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    4058:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    405c:	4b26      	ldr	r3, [pc, #152]	; (40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>)
    405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4060:	07da      	lsls	r2, r3, #31
    4062:	d50b      	bpl.n	407c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7c>
		PR_FAULT_INFO("  Instruction Access Violation");
    4064:	4b29      	ldr	r3, [pc, #164]	; (410c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10c>)
    4066:	617b      	str	r3, [r7, #20]
    4068:	2302      	movs	r3, #2
    406a:	4822      	ldr	r0, [pc, #136]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    406c:	613b      	str	r3, [r7, #16]
    406e:	f107 0210 	add.w	r2, r7, #16
    4072:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    4076:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    4078:	f005 f974 	bl	9364 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    407c:	4b1e      	ldr	r3, [pc, #120]	; (40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>)
    407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4080:	069b      	lsls	r3, r3, #26
    4082:	d50b      	bpl.n	409c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9c>
		PR_FAULT_INFO(
    4084:	4b22      	ldr	r3, [pc, #136]	; (4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>)
    4086:	617b      	str	r3, [r7, #20]
    4088:	2302      	movs	r3, #2
    408a:	481a      	ldr	r0, [pc, #104]	; (40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>)
    408c:	613b      	str	r3, [r7, #16]
    408e:	f107 0210 	add.w	r2, r7, #16
    4092:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    4096:	2415      	movs	r4, #21
		PR_FAULT_INFO(
    4098:	f005 f964 	bl	9364 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    409c:	4b16      	ldr	r3, [pc, #88]	; (40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>)
    409e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40a0:	06d5      	lsls	r5, r2, #27
    40a2:	d402      	bmi.n	40aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaa>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    40a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    40a6:	0790      	lsls	r0, r2, #30
    40a8:	d50a      	bpl.n	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    40aa:	685b      	ldr	r3, [r3, #4]
    40ac:	0519      	lsls	r1, r3, #20
    40ae:	d507      	bpl.n	40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    40b0:	4649      	mov	r1, r9
    40b2:	4630      	mov	r0, r6
    40b4:	f7ff fdea 	bl	3c8c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    40b8:	b110      	cbz	r0, 40c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc0>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    40ba:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    40be:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    40c0:	4b0d      	ldr	r3, [pc, #52]	; (40f8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf8>)
    40c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40c4:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    40c6:	bf42      	ittt	mi
    40c8:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    40ca:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    40ce:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    40d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    40d2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    40d6:	629a      	str	r2, [r3, #40]	; 0x28
}
    40d8:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    40da:	2300      	movs	r3, #0
}
    40dc:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    40de:	f888 3000 	strb.w	r3, [r8]
}
    40e2:	46bd      	mov	sp, r7
    40e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    40e8:	f06f 0615 	mvn.w	r6, #21
    40ec:	e7b0      	b.n	4050 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x50>
    40ee:	bf00      	nop
    40f0:	0000aaf0 	.word	0x0000aaf0
    40f4:	0000a1b8 	.word	0x0000a1b8
    40f8:	e000ed00 	.word	0xe000ed00
    40fc:	0000ab06 	.word	0x0000ab06
    4100:	0000a980 	.word	0x0000a980
    4104:	0000ab39 	.word	0x0000ab39
    4108:	0000ab51 	.word	0x0000ab51
    410c:	0000ab67 	.word	0x0000ab67
    4110:	0000a9f4 	.word	0x0000a9f4

00004114 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4118:	4b77      	ldr	r3, [pc, #476]	; (42f8 <z_arm_fault+0x1e4>)
{
    411a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    411c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    4120:	af00      	add	r7, sp, #0
    4122:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4124:	f3c8 0408 	ubfx	r4, r8, #0, #9
    4128:	2600      	movs	r6, #0
    412a:	f386 8811 	msr	BASEPRI, r6
    412e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4132:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4136:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    413a:	d10e      	bne.n	415a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    413c:	f002 030c 	and.w	r3, r2, #12
    4140:	2b08      	cmp	r3, #8
    4142:	d119      	bne.n	4178 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4144:	4b6d      	ldr	r3, [pc, #436]	; (42fc <z_arm_fault+0x1e8>)
    4146:	61fb      	str	r3, [r7, #28]
    4148:	2302      	movs	r3, #2
    414a:	486d      	ldr	r0, [pc, #436]	; (4300 <z_arm_fault+0x1ec>)
    414c:	61bb      	str	r3, [r7, #24]
    414e:	f107 0218 	add.w	r2, r7, #24
    4152:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4156:	f005 f905 	bl	9364 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    415a:	2600      	movs	r6, #0
		return NULL;
    415c:	4635      	mov	r5, r6
	*recoverable = false;
    415e:	2300      	movs	r3, #0
    4160:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    4162:	1ee3      	subs	r3, r4, #3
    4164:	2b09      	cmp	r3, #9
    4166:	f200 80a6 	bhi.w	42b6 <z_arm_fault+0x1a2>
    416a:	e8df f003 	tbb	[pc, r3]
    416e:	990a      	.short	0x990a
    4170:	a4a4959c 	.word	0xa4a4959c
    4174:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4178:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    417a:	bf4c      	ite	mi
    417c:	460d      	movmi	r5, r1
			*nested_exc = true;
    417e:	2601      	movpl	r6, #1
    4180:	e7ed      	b.n	415e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    4182:	46e9      	mov	r9, sp
    4184:	4b5f      	ldr	r3, [pc, #380]	; (4304 <z_arm_fault+0x1f0>)
    4186:	61fb      	str	r3, [r7, #28]
    4188:	f04f 0802 	mov.w	r8, #2
    418c:	f107 0218 	add.w	r2, r7, #24
    4190:	485b      	ldr	r0, [pc, #364]	; (4300 <z_arm_fault+0x1ec>)
    4192:	f8c7 8018 	str.w	r8, [r7, #24]
    4196:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    419a:	f005 f8e3 	bl	9364 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    419e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    41a0:	4c55      	ldr	r4, [pc, #340]	; (42f8 <z_arm_fault+0x1e4>)
	*recoverable = false;
    41a2:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    41a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    41a6:	079a      	lsls	r2, r3, #30
    41a8:	d50b      	bpl.n	41c2 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    41aa:	4b57      	ldr	r3, [pc, #348]	; (4308 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    41ac:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    41b0:	4853      	ldr	r0, [pc, #332]	; (4300 <z_arm_fault+0x1ec>)
    41b2:	f107 0218 	add.w	r2, r7, #24
    41b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    41ba:	f005 f8d3 	bl	9364 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    41be:	2400      	movs	r4, #0
    41c0:	e041      	b.n	4246 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    41c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    41c4:	2b00      	cmp	r3, #0
    41c6:	da01      	bge.n	41cc <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    41c8:	4b50      	ldr	r3, [pc, #320]	; (430c <z_arm_fault+0x1f8>)
    41ca:	e7ef      	b.n	41ac <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    41cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    41ce:	005b      	lsls	r3, r3, #1
    41d0:	d5f5      	bpl.n	41be <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    41d2:	4b4f      	ldr	r3, [pc, #316]	; (4310 <z_arm_fault+0x1fc>)
    41d4:	484a      	ldr	r0, [pc, #296]	; (4300 <z_arm_fault+0x1ec>)
    41d6:	e9c7 8306 	strd	r8, r3, [r7, #24]
    41da:	f107 0218 	add.w	r2, r7, #24
    41de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    41e2:	f005 f8bf 	bl	9364 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    41e6:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    41e8:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    41ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    41ee:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    41f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    41f4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    41f8:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    41fa:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    41fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4202:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4204:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4208:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    420c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4210:	429a      	cmp	r2, r3
    4212:	d008      	beq.n	4226 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    4214:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4216:	b2db      	uxtb	r3, r3
    4218:	b38b      	cbz	r3, 427e <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    421a:	1dfa      	adds	r2, r7, #7
    421c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    421e:	4628      	mov	r0, r5
    4220:	f7ff febc 	bl	3f9c <mem_manage_fault>
    4224:	e03a      	b.n	429c <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4226:	b088      	sub	sp, #32
    4228:	682b      	ldr	r3, [r5, #0]
    422a:	466a      	mov	r2, sp
    422c:	4939      	ldr	r1, [pc, #228]	; (4314 <z_arm_fault+0x200>)
    422e:	4834      	ldr	r0, [pc, #208]	; (4300 <z_arm_fault+0x1ec>)
    4230:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4234:	2303      	movs	r3, #3
    4236:	f842 3f10 	str.w	r3, [r2, #16]!
    423a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    423e:	f005 f891 	bl	9364 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    4242:	682c      	ldr	r4, [r5, #0]
    4244:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4246:	79fb      	ldrb	r3, [r7, #7]
    4248:	b9ab      	cbnz	r3, 4276 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    424a:	2220      	movs	r2, #32
    424c:	4629      	mov	r1, r5
    424e:	f107 0008 	add.w	r0, r7, #8
    4252:	f005 f8b8 	bl	93c6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4258:	2e00      	cmp	r6, #0
    425a:	d047      	beq.n	42ec <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    425c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4260:	b922      	cbnz	r2, 426c <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4262:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4266:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    426a:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    426c:	f107 0108 	add.w	r1, r7, #8
    4270:	4620      	mov	r0, r4
    4272:	f7ff fbc9 	bl	3a08 <z_arm_fatal_error>
}
    4276:	372c      	adds	r7, #44	; 0x2c
    4278:	46bd      	mov	sp, r7
    427a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    427e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4280:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    4284:	d004      	beq.n	4290 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    4286:	1df9      	adds	r1, r7, #7
    4288:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    428a:	f7ff fd5b 	bl	3d44 <bus_fault.constprop.0>
    428e:	e005      	b.n	429c <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    4290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4296:	d392      	bcc.n	41be <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    4298:	f7ff fdfe 	bl	3e98 <usage_fault.constprop.0>
    429c:	4604      	mov	r4, r0
    429e:	e7d2      	b.n	4246 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    42a0:	1dfa      	adds	r2, r7, #7
    42a2:	2100      	movs	r1, #0
    42a4:	e7bb      	b.n	421e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    42a6:	1df9      	adds	r1, r7, #7
    42a8:	2000      	movs	r0, #0
    42aa:	e7ee      	b.n	428a <z_arm_fault+0x176>
	PR_FAULT_INFO(
    42ac:	4b1a      	ldr	r3, [pc, #104]	; (4318 <z_arm_fault+0x204>)
    42ae:	61fb      	str	r3, [r7, #28]
    42b0:	2302      	movs	r3, #2
    42b2:	61bb      	str	r3, [r7, #24]
    42b4:	e77c      	b.n	41b0 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    42b6:	4a19      	ldr	r2, [pc, #100]	; (431c <z_arm_fault+0x208>)
    42b8:	4b19      	ldr	r3, [pc, #100]	; (4320 <z_arm_fault+0x20c>)
    42ba:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    42be:	46e8      	mov	r8, sp
    42c0:	b08a      	sub	sp, #40	; 0x28
    42c2:	bf18      	it	ne
    42c4:	4613      	movne	r3, r2
    42c6:	466a      	mov	r2, sp
    42c8:	4916      	ldr	r1, [pc, #88]	; (4324 <z_arm_fault+0x210>)
    42ca:	480d      	ldr	r0, [pc, #52]	; (4300 <z_arm_fault+0x1ec>)
    42cc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    42d0:	f44f 7300 	mov.w	r3, #512	; 0x200
    42d4:	8413      	strh	r3, [r2, #32]
    42d6:	3c10      	subs	r4, #16
    42d8:	4b13      	ldr	r3, [pc, #76]	; (4328 <z_arm_fault+0x214>)
    42da:	61d4      	str	r4, [r2, #28]
    42dc:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    42e0:	f842 3f10 	str.w	r3, [r2, #16]!
    42e4:	f005 f83e 	bl	9364 <z_log_msg_static_create.constprop.0>
    42e8:	46c5      	mov	sp, r8
}
    42ea:	e768      	b.n	41be <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    42ec:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    42f0:	f023 0301 	bic.w	r3, r3, #1
    42f4:	e7b9      	b.n	426a <z_arm_fault+0x156>
    42f6:	bf00      	nop
    42f8:	e000ed00 	.word	0xe000ed00
    42fc:	0000abb4 	.word	0x0000abb4
    4300:	0000a1b8 	.word	0x0000a1b8
    4304:	0000abdf 	.word	0x0000abdf
    4308:	0000abf6 	.word	0x0000abf6
    430c:	0000ac17 	.word	0x0000ac17
    4310:	0000ac25 	.word	0x0000ac25
    4314:	0000ac44 	.word	0x0000ac44
    4318:	0000ac60 	.word	0x0000ac60
    431c:	0000ab9b 	.word	0x0000ab9b
    4320:	0000ab86 	.word	0x0000ab86
    4324:	0000ac84 	.word	0x0000ac84
    4328:	01000004 	.word	0x01000004

0000432c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    432c:	4a02      	ldr	r2, [pc, #8]	; (4338 <z_arm_fault_init+0xc>)
    432e:	6953      	ldr	r3, [r2, #20]
    4330:	f043 0310 	orr.w	r3, r3, #16
    4334:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    4336:	4770      	bx	lr
    4338:	e000ed00 	.word	0xe000ed00

0000433c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    433c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4340:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4344:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4346:	4672      	mov	r2, lr
	bl z_arm_fault
    4348:	f7ff fee4 	bl	4114 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    434c:	bd01      	pop	{r0, pc}
    434e:	bf00      	nop

00004350 <z_arm_interrupt_init>:
    4350:	4804      	ldr	r0, [pc, #16]	; (4364 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4352:	2300      	movs	r3, #0
    4354:	2120      	movs	r1, #32
    4356:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4358:	3301      	adds	r3, #1
    435a:	2b30      	cmp	r3, #48	; 0x30
    435c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4360:	d1f9      	bne.n	4356 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4362:	4770      	bx	lr
    4364:	e000e100 	.word	0xe000e100

00004368 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    4368:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    436a:	4913      	ldr	r1, [pc, #76]	; (43b8 <__start+0x50>)
    strb r0, [r1]
    436c:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    436e:	2000      	movs	r0, #0
    msr CONTROL, r0
    4370:	f380 8814 	msr	CONTROL, r0
    isb
    4374:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    4378:	f7fe faf8 	bl	296c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    437c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    437e:	490f      	ldr	r1, [pc, #60]	; (43bc <__start+0x54>)
    str r0, [r1]
    4380:	6008      	str	r0, [r1, #0]
    dsb
    4382:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4386:	480e      	ldr	r0, [pc, #56]	; (43c0 <__start+0x58>)
    msr msp, r0
    4388:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    438c:	f000 f82e 	bl	43ec <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4390:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4392:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4396:	480b      	ldr	r0, [pc, #44]	; (43c4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4398:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    439c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    439e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    43a2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    43a6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    43a8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    43aa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    43ae:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    43b2:	f7ff fbdb 	bl	3b6c <z_arm_prep_c>
    43b6:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    43b8:	20001651 	.word	0x20001651
    ldr r1, =_SCS_MPU_CTRL
    43bc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    43c0:	20002780 	.word	0x20002780
    ldr r0, =z_interrupt_stacks
    43c4:	200019c0 	.word	0x200019c0

000043c8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    43c8:	4907      	ldr	r1, [pc, #28]	; (43e8 <z_arm_clear_arm_mpu_config+0x20>)
    43ca:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    43ce:	2300      	movs	r3, #0
	int num_regions =
    43d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    43d4:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    43d6:	4293      	cmp	r3, r2
    43d8:	db00      	blt.n	43dc <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    43da:	4770      	bx	lr
  MPU->RNR = rnr;
    43dc:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    43e0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    43e4:	3301      	adds	r3, #1
    43e6:	e7f6      	b.n	43d6 <z_arm_clear_arm_mpu_config+0xe>
    43e8:	e000ed00 	.word	0xe000ed00

000043ec <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    43ec:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    43ee:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    43f0:	2300      	movs	r3, #0
    43f2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    43f6:	f7ff ffe7 	bl	43c8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    43fa:	4b14      	ldr	r3, [pc, #80]	; (444c <z_arm_init_arch_hw_at_boot+0x60>)
    43fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    4404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    4408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    440c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    4410:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4414:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    4418:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    441c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4420:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4424:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    4428:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    442c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4430:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    4434:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    4438:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    443c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4440:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4442:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4446:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    444a:	bd08      	pop	{r3, pc}
    444c:	e000e100 	.word	0xe000e100

00004450 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4450:	4b08      	ldr	r3, [pc, #32]	; (4474 <z_impl_k_thread_abort+0x24>)
    4452:	689b      	ldr	r3, [r3, #8]
    4454:	4283      	cmp	r3, r0
    4456:	d10b      	bne.n	4470 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4458:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    445c:	b143      	cbz	r3, 4470 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    445e:	4b06      	ldr	r3, [pc, #24]	; (4478 <z_impl_k_thread_abort+0x28>)
    4460:	685a      	ldr	r2, [r3, #4]
    4462:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    4466:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    4468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    446a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    446e:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    4470:	f003 bdf0 	b.w	8054 <z_thread_abort>
    4474:	20001018 	.word	0x20001018
    4478:	e000ed00 	.word	0xe000ed00

0000447c <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    447c:	4b02      	ldr	r3, [pc, #8]	; (4488 <z_arm_configure_static_mpu_regions+0xc>)
    447e:	4a03      	ldr	r2, [pc, #12]	; (448c <z_arm_configure_static_mpu_regions+0x10>)
    4480:	4803      	ldr	r0, [pc, #12]	; (4490 <z_arm_configure_static_mpu_regions+0x14>)
    4482:	2101      	movs	r1, #1
    4484:	f000 b894 	b.w	45b0 <arm_core_mpu_configure_static_mpu_regions>
    4488:	20040000 	.word	0x20040000
    448c:	20000000 	.word	0x20000000
    4490:	0000a318 	.word	0x0000a318

00004494 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4494:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4498:	4b05      	ldr	r3, [pc, #20]	; (44b0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
    449a:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    449c:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    449e:	4a05      	ldr	r2, [pc, #20]	; (44b4 <z_arm_configure_dynamic_mpu_regions+0x20>)
    44a0:	2140      	movs	r1, #64	; 0x40
    44a2:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    44a6:	4618      	mov	r0, r3
    44a8:	2101      	movs	r1, #1
    44aa:	f000 b88b 	b.w	45c4 <arm_core_mpu_configure_dynamic_mpu_regions>
    44ae:	bf00      	nop
    44b0:	20000e3c 	.word	0x20000e3c
    44b4:	150b0000 	.word	0x150b0000

000044b8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    44b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    44bc:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 4574 <mpu_configure_regions+0xbc>
    44c0:	469c      	mov	ip, r3
    44c2:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    44c4:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    44c6:	2300      	movs	r3, #0
    44c8:	428b      	cmp	r3, r1
    44ca:	da1a      	bge.n	4502 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    44cc:	6844      	ldr	r4, [r0, #4]
    44ce:	2c00      	cmp	r4, #0
    44d0:	d04d      	beq.n	456e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    44d2:	f1bc 0f00 	cmp.w	ip, #0
    44d6:	d01d      	beq.n	4514 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    44d8:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    44da:	4234      	tst	r4, r6
    44dc:	d015      	beq.n	450a <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    44de:	466c      	mov	r4, sp
    44e0:	b088      	sub	sp, #32
    44e2:	466a      	mov	r2, sp
    44e4:	4924      	ldr	r1, [pc, #144]	; (4578 <mpu_configure_regions+0xc0>)
    44e6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    44ea:	2303      	movs	r3, #3
    44ec:	f842 3f10 	str.w	r3, [r2, #16]!
    44f0:	4822      	ldr	r0, [pc, #136]	; (457c <mpu_configure_regions+0xc4>)
    44f2:	2300      	movs	r3, #0
    44f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    44f8:	f7fe fcd0 	bl	2e9c <z_impl_z_log_msg_static_create>
			return -EINVAL;
    44fc:	f06f 0515 	mvn.w	r5, #21
    4500:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4502:	4628      	mov	r0, r5
    4504:	46bd      	mov	sp, r7
    4506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    450a:	2c1f      	cmp	r4, #31
    450c:	d9e7      	bls.n	44de <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    450e:	6802      	ldr	r2, [r0, #0]
		&&
    4510:	4216      	tst	r6, r2
    4512:	d1e4      	bne.n	44de <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4514:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    4516:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4518:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    451a:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    451e:	d914      	bls.n	454a <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    4520:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4524:	d813      	bhi.n	454e <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4526:	3c01      	subs	r4, #1
    4528:	fab4 f484 	clz	r4, r4
    452c:	f1c4 041f 	rsb	r4, r4, #31
    4530:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4532:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4536:	ea46 0604 	orr.w	r6, r6, r4
    453a:	d90a      	bls.n	4552 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    453c:	466c      	mov	r4, sp
    453e:	b088      	sub	sp, #32
    4540:	466a      	mov	r2, sp
    4542:	4b0f      	ldr	r3, [pc, #60]	; (4580 <mpu_configure_regions+0xc8>)
    4544:	e9c2 3505 	strd	r3, r5, [r2, #20]
    4548:	e7cf      	b.n	44ea <mpu_configure_regions+0x32>
		return REGION_32B;
    454a:	2408      	movs	r4, #8
    454c:	e7f1      	b.n	4532 <mpu_configure_regions+0x7a>
		return REGION_4G;
    454e:	243e      	movs	r4, #62	; 0x3e
    4550:	e7ef      	b.n	4532 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4552:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    4556:	432a      	orrs	r2, r5
    4558:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    455c:	f046 0601 	orr.w	r6, r6, #1
    4560:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4564:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    4568:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    456a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    456e:	3301      	adds	r3, #1
    4570:	300c      	adds	r0, #12
    4572:	e7a9      	b.n	44c8 <mpu_configure_regions+0x10>
    4574:	e000ed00 	.word	0xe000ed00
    4578:	0000ac9b 	.word	0x0000ac9b
    457c:	0000a1a0 	.word	0x0000a1a0
    4580:	0000acbe 	.word	0x0000acbe

00004584 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4584:	4b04      	ldr	r3, [pc, #16]	; (4598 <arm_core_mpu_enable+0x14>)
    4586:	2205      	movs	r2, #5
    4588:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    458c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4590:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4594:	4770      	bx	lr
    4596:	bf00      	nop
    4598:	e000ed00 	.word	0xe000ed00

0000459c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    459c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    45a0:	4b02      	ldr	r3, [pc, #8]	; (45ac <arm_core_mpu_disable+0x10>)
    45a2:	2200      	movs	r2, #0
    45a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    45a8:	4770      	bx	lr
    45aa:	bf00      	nop
    45ac:	e000ed00 	.word	0xe000ed00

000045b0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    45b0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    45b2:	4c03      	ldr	r4, [pc, #12]	; (45c0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    45b4:	2301      	movs	r3, #1
    45b6:	7822      	ldrb	r2, [r4, #0]
    45b8:	f7ff ff7e 	bl	44b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    45bc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    45be:	bd10      	pop	{r4, pc}
    45c0:	2000123e 	.word	0x2000123e

000045c4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    45c4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    45c6:	4a09      	ldr	r2, [pc, #36]	; (45ec <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    45c8:	2300      	movs	r3, #0
    45ca:	7812      	ldrb	r2, [r2, #0]
    45cc:	f7ff ff74 	bl	44b8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    45d0:	f110 0f16 	cmn.w	r0, #22
    45d4:	d003      	beq.n	45de <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    45d6:	4b06      	ldr	r3, [pc, #24]	; (45f0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    45d8:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    45da:	2807      	cmp	r0, #7
    45dc:	dd00      	ble.n	45e0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    45de:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    45e0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    45e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    45e8:	3001      	adds	r0, #1
    45ea:	e7f6      	b.n	45da <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    45ec:	2000123e 	.word	0x2000123e
    45f0:	e000ed00 	.word	0xe000ed00

000045f4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    45f4:	4914      	ldr	r1, [pc, #80]	; (4648 <z_arm_mpu_init+0x54>)
    45f6:	6808      	ldr	r0, [r1, #0]
    45f8:	2808      	cmp	r0, #8
{
    45fa:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    45fc:	d821      	bhi.n	4642 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    45fe:	f7ff ffcd 	bl	459c <arm_core_mpu_disable>
    4602:	4c12      	ldr	r4, [pc, #72]	; (464c <z_arm_mpu_init+0x58>)
    4604:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4606:	2200      	movs	r2, #0
    4608:	4290      	cmp	r0, r2
    460a:	f101 010c 	add.w	r1, r1, #12
    460e:	d105      	bne.n	461c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4610:	4b0f      	ldr	r3, [pc, #60]	; (4650 <z_arm_mpu_init+0x5c>)
    4612:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4614:	f7ff ffb6 	bl	4584 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4618:	2000      	movs	r0, #0
}
    461a:	bd10      	pop	{r4, pc}
    461c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4620:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4624:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4628:	4313      	orrs	r3, r2
    462a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    462e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4632:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4636:	f043 0301 	orr.w	r3, r3, #1
    463a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    463e:	3201      	adds	r2, #1
    4640:	e7e2      	b.n	4608 <z_arm_mpu_init+0x14>
		return -1;
    4642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4646:	e7e8      	b.n	461a <z_arm_mpu_init+0x26>
    4648:	0000a324 	.word	0x0000a324
    464c:	e000ed00 	.word	0xe000ed00
    4650:	2000123e 	.word	0x2000123e

00004654 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    4654:	4b01      	ldr	r3, [pc, #4]	; (465c <__stdout_hook_install+0x8>)
    4656:	6018      	str	r0, [r3, #0]
}
    4658:	4770      	bx	lr
    465a:	bf00      	nop
    465c:	2000002c 	.word	0x2000002c

00004660 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    4660:	3902      	subs	r1, #2
    4662:	2901      	cmp	r1, #1
    4664:	d802      	bhi.n	466c <z_impl_zephyr_fputc+0xc>
    4666:	4b03      	ldr	r3, [pc, #12]	; (4674 <z_impl_zephyr_fputc+0x14>)
    4668:	681b      	ldr	r3, [r3, #0]
    466a:	4718      	bx	r3
}
    466c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4670:	4770      	bx	lr
    4672:	bf00      	nop
    4674:	2000002c 	.word	0x2000002c

00004678 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    4678:	b40f      	push	{r0, r1, r2, r3}
    467a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    467c:	ab06      	add	r3, sp, #24
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    467e:	2100      	movs	r1, #0
    4680:	f853 2b04 	ldr.w	r2, [r3], #4
    4684:	4805      	ldr	r0, [pc, #20]	; (469c <printf+0x24>)
    4686:	9100      	str	r1, [sp, #0]
    4688:	2102      	movs	r1, #2
	va_list vargs;
	int     r;

	va_start(vargs, format);
    468a:	9303      	str	r3, [sp, #12]
    468c:	f7fd faea 	bl	1c64 <z_cbvprintf_impl>
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
	va_end(vargs);

	return r;
}
    4690:	b005      	add	sp, #20
    4692:	f85d eb04 	ldr.w	lr, [sp], #4
    4696:	b004      	add	sp, #16
    4698:	4770      	bx	lr
    469a:	bf00      	nop
    469c:	000093f5 	.word	0x000093f5

000046a0 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
    46a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    46a2:	f04f 0320 	mov.w	r3, #32
    46a6:	f3ef 8011 	mrs	r0, BASEPRI
    46aa:	f383 8812 	msr	BASEPRI_MAX, r3
    46ae:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    46b2:	4a11      	ldr	r2, [pc, #68]	; (46f8 <nordicsemi_nrf52_init+0x58>)
    46b4:	2301      	movs	r3, #1
    46b6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    46ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    46be:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    46c2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    46c6:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    46ca:	2c08      	cmp	r4, #8
    46cc:	d108      	bne.n	46e0 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    46ce:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    46d2:	2905      	cmp	r1, #5
    46d4:	d804      	bhi.n	46e0 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    46d6:	4c09      	ldr	r4, [pc, #36]	; (46fc <nordicsemi_nrf52_init+0x5c>)
    46d8:	5c61      	ldrb	r1, [r4, r1]
    46da:	b109      	cbz	r1, 46e0 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    46dc:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    46e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46e4:	2201      	movs	r2, #1
    46e6:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    46ea:	f380 8811 	msr	BASEPRI, r0
    46ee:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    46f2:	2000      	movs	r0, #0
    46f4:	bd10      	pop	{r4, pc}
    46f6:	bf00      	nop
    46f8:	4001e000 	.word	0x4001e000
    46fc:	0000acf3 	.word	0x0000acf3

00004700 <sys_arch_reboot>:
    *p_gpregret = val;
    4700:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4704:	b2c0      	uxtb	r0, r0
    4706:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    470a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    470e:	4905      	ldr	r1, [pc, #20]	; (4724 <sys_arch_reboot+0x24>)
    4710:	4b05      	ldr	r3, [pc, #20]	; (4728 <sys_arch_reboot+0x28>)
    4712:	68ca      	ldr	r2, [r1, #12]
    4714:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4718:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    471a:	60cb      	str	r3, [r1, #12]
    471c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4720:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4722:	e7fd      	b.n	4720 <sys_arch_reboot+0x20>
    4724:	e000ed00 	.word	0xe000ed00
    4728:	05fa0004 	.word	0x05fa0004

0000472c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    472c:	b120      	cbz	r0, 4738 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    472e:	4b03      	ldr	r3, [pc, #12]	; (473c <arch_busy_wait+0x10>)
    4730:	0180      	lsls	r0, r0, #6
    4732:	f043 0301 	orr.w	r3, r3, #1
    4736:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	0000a240 	.word	0x0000a240

00004740 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4740:	4b08      	ldr	r3, [pc, #32]	; (4764 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4742:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4744:	1ac3      	subs	r3, r0, r3
{
    4746:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4748:	4907      	ldr	r1, [pc, #28]	; (4768 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    474a:	109b      	asrs	r3, r3, #2
{
    474c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    474e:	4359      	muls	r1, r3
    4750:	4806      	ldr	r0, [pc, #24]	; (476c <onoff_stop+0x2c>)
    4752:	2240      	movs	r2, #64	; 0x40
    4754:	f004 fe7e 	bl	9454 <stop>
	notify(mgr, res);
    4758:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    475a:	4601      	mov	r1, r0
	notify(mgr, res);
    475c:	4620      	mov	r0, r4
}
    475e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4762:	4718      	bx	r3
    4764:	20000e5c 	.word	0x20000e5c
    4768:	b6db6db7 	.word	0xb6db6db7
    476c:	00009ec0 	.word	0x00009ec0

00004770 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4770:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4772:	4c0c      	ldr	r4, [pc, #48]	; (47a4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4774:	4a0c      	ldr	r2, [pc, #48]	; (47a8 <onoff_start+0x38>)
    4776:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    4778:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    477a:	9300      	str	r3, [sp, #0]
{
    477c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    477e:	460b      	mov	r3, r1
    4780:	490a      	ldr	r1, [pc, #40]	; (47ac <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    4782:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4784:	4361      	muls	r1, r4
{
    4786:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4788:	4809      	ldr	r0, [pc, #36]	; (47b0 <onoff_start+0x40>)
    478a:	f004 fe8f 	bl	94ac <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    478e:	1e01      	subs	r1, r0, #0
    4790:	da05      	bge.n	479e <onoff_start+0x2e>
		notify(mgr, err);
    4792:	4630      	mov	r0, r6
    4794:	462b      	mov	r3, r5
	}
}
    4796:	b002      	add	sp, #8
    4798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    479c:	4718      	bx	r3
}
    479e:	b002      	add	sp, #8
    47a0:	bd70      	pop	{r4, r5, r6, pc}
    47a2:	bf00      	nop
    47a4:	20000e5c 	.word	0x20000e5c
    47a8:	00009517 	.word	0x00009517
    47ac:	b6db6db7 	.word	0xb6db6db7
    47b0:	00009ec0 	.word	0x00009ec0

000047b4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    47b4:	2200      	movs	r2, #0
{
    47b6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    47b8:	2101      	movs	r1, #1
{
    47ba:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    47bc:	4610      	mov	r0, r2
    47be:	f7ff f9b9 	bl	3b34 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    47c2:	480f      	ldr	r0, [pc, #60]	; (4800 <clk_init+0x4c>)
    47c4:	f001 fe6c 	bl	64a0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    47c8:	4b0e      	ldr	r3, [pc, #56]	; (4804 <clk_init+0x50>)
    47ca:	4298      	cmp	r0, r3
    47cc:	d115      	bne.n	47fa <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    47ce:	f005 f837 	bl	9840 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    47d2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    47d4:	490c      	ldr	r1, [pc, #48]	; (4808 <clk_init+0x54>)
    47d6:	4630      	mov	r0, r6
    47d8:	f004 f974 	bl	8ac4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    47dc:	2800      	cmp	r0, #0
    47de:	db0b      	blt.n	47f8 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    47e0:	2501      	movs	r5, #1
    47e2:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    47e4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    47e6:	4908      	ldr	r1, [pc, #32]	; (4808 <clk_init+0x54>)
    47e8:	f104 001c 	add.w	r0, r4, #28
    47ec:	f004 f96a 	bl	8ac4 <onoff_manager_init>
		if (err < 0) {
    47f0:	2800      	cmp	r0, #0
    47f2:	db01      	blt.n	47f8 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    47f4:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    47f6:	2000      	movs	r0, #0
}
    47f8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    47fa:	f06f 0004 	mvn.w	r0, #4
    47fe:	e7fb      	b.n	47f8 <clk_init+0x44>
    4800:	00004841 	.word	0x00004841
    4804:	0bad0000 	.word	0x0bad0000
    4808:	0000a344 	.word	0x0000a344

0000480c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    480c:	b570      	push	{r4, r5, r6, lr}
    480e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4810:	230c      	movs	r3, #12
    4812:	4809      	ldr	r0, [pc, #36]	; (4838 <clkstarted_handle.constprop.0+0x2c>)
    4814:	434b      	muls	r3, r1
    4816:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4818:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    481c:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    481e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4820:	4418      	add	r0, r3
	sub_data->cb = NULL;
    4822:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4824:	f004 fe03 	bl	942e <set_on_state>
	if (callback) {
    4828:	b12d      	cbz	r5, 4836 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    482a:	4632      	mov	r2, r6
    482c:	462b      	mov	r3, r5
    482e:	4803      	ldr	r0, [pc, #12]	; (483c <clkstarted_handle.constprop.0+0x30>)
}
    4830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4834:	4718      	bx	r3
}
    4836:	bd70      	pop	{r4, r5, r6, pc}
    4838:	20000e5c 	.word	0x20000e5c
    483c:	00009ec0 	.word	0x00009ec0

00004840 <clock_event_handler>:
	switch (event) {
    4840:	b110      	cbz	r0, 4848 <clock_event_handler+0x8>
    4842:	2801      	cmp	r0, #1
    4844:	d004      	beq.n	4850 <clock_event_handler+0x10>
    4846:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4848:	4b03      	ldr	r3, [pc, #12]	; (4858 <clock_event_handler+0x18>)
    484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    484c:	075b      	lsls	r3, r3, #29
    484e:	d101      	bne.n	4854 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4850:	f7ff bfdc 	b.w	480c <clkstarted_handle.constprop.0>
}
    4854:	4770      	bx	lr
    4856:	bf00      	nop
    4858:	20000e5c 	.word	0x20000e5c

0000485c <generic_hfclk_start>:
{
    485c:	b508      	push	{r3, lr}
	__asm__ volatile(
    485e:	f04f 0320 	mov.w	r3, #32
    4862:	f3ef 8111 	mrs	r1, BASEPRI
    4866:	f383 8812 	msr	BASEPRI_MAX, r3
    486a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    486e:	4a12      	ldr	r2, [pc, #72]	; (48b8 <generic_hfclk_start+0x5c>)
    4870:	6813      	ldr	r3, [r2, #0]
    4872:	f043 0002 	orr.w	r0, r3, #2
    4876:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4878:	07da      	lsls	r2, r3, #31
    487a:	d408      	bmi.n	488e <generic_hfclk_start+0x32>
	__asm__ volatile(
    487c:	f381 8811 	msr	BASEPRI, r1
    4880:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4884:	2001      	movs	r0, #1
}
    4886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    488a:	f004 bfe6 	b.w	985a <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    488e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4892:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4896:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    489a:	07d3      	lsls	r3, r2, #31
    489c:	d5ee      	bpl.n	487c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    489e:	4807      	ldr	r0, [pc, #28]	; (48bc <generic_hfclk_start+0x60>)
    48a0:	f004 fdc5 	bl	942e <set_on_state>
    48a4:	f381 8811 	msr	BASEPRI, r1
    48a8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    48ac:	2000      	movs	r0, #0
}
    48ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    48b2:	f7ff bfab 	b.w	480c <clkstarted_handle.constprop.0>
    48b6:	bf00      	nop
    48b8:	20000eac 	.word	0x20000eac
    48bc:	20000e9c 	.word	0x20000e9c

000048c0 <api_blocking_start>:
{
    48c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    48c2:	2200      	movs	r2, #0
    48c4:	2301      	movs	r3, #1
    48c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    48ca:	4a09      	ldr	r2, [pc, #36]	; (48f0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    48cc:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    48d0:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    48d2:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    48d6:	f004 fe17 	bl	9508 <api_start>
	if (err < 0) {
    48da:	2800      	cmp	r0, #0
    48dc:	db05      	blt.n	48ea <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    48de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    48e2:	2300      	movs	r3, #0
    48e4:	4668      	mov	r0, sp
    48e6:	f003 f8ab 	bl	7a40 <z_impl_k_sem_take>
}
    48ea:	b005      	add	sp, #20
    48ec:	f85d fb04 	ldr.w	pc, [sp], #4
    48f0:	00009535 	.word	0x00009535

000048f4 <generic_hfclk_stop>:
{
    48f4:	b510      	push	{r4, lr}
	__asm__ volatile(
    48f6:	f04f 0320 	mov.w	r3, #32
    48fa:	f3ef 8411 	mrs	r4, BASEPRI
    48fe:	f383 8812 	msr	BASEPRI_MAX, r3
    4902:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    4906:	4a07      	ldr	r2, [pc, #28]	; (4924 <generic_hfclk_stop+0x30>)
    4908:	6813      	ldr	r3, [r2, #0]
    490a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    490e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    4910:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    4912:	d402      	bmi.n	491a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4914:	2001      	movs	r0, #1
    4916:	f004 ffdc 	bl	98d2 <nrfx_clock_stop>
	__asm__ volatile(
    491a:	f384 8811 	msr	BASEPRI, r4
    491e:	f3bf 8f6f 	isb	sy
}
    4922:	bd10      	pop	{r4, pc}
    4924:	20000eac 	.word	0x20000eac

00004928 <z_nrf_clock_control_get_onoff>:
}
    4928:	4a02      	ldr	r2, [pc, #8]	; (4934 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    492a:	b2c3      	uxtb	r3, r0
}
    492c:	201c      	movs	r0, #28
    492e:	fb03 2000 	mla	r0, r3, r0, r2
    4932:	4770      	bx	lr
    4934:	20000e5c 	.word	0x20000e5c

00004938 <z_nrf_clock_control_lf_on>:
{
    4938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    493c:	4938      	ldr	r1, [pc, #224]	; (4a20 <z_nrf_clock_control_lf_on+0xe8>)
    493e:	f3bf 8f5b 	dmb	ish
    4942:	4607      	mov	r7, r0
    4944:	2201      	movs	r2, #1
    4946:	e851 3f00 	ldrex	r3, [r1]
    494a:	e841 2000 	strex	r0, r2, [r1]
    494e:	2800      	cmp	r0, #0
    4950:	d1f9      	bne.n	4946 <z_nrf_clock_control_lf_on+0xe>
    4952:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4956:	b933      	cbnz	r3, 4966 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4958:	4932      	ldr	r1, [pc, #200]	; (4a24 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    495a:	4833      	ldr	r0, [pc, #204]	; (4a28 <z_nrf_clock_control_lf_on+0xf0>)
    495c:	604b      	str	r3, [r1, #4]
    495e:	60cb      	str	r3, [r1, #12]
    4960:	608a      	str	r2, [r1, #8]
    4962:	f004 f8c2 	bl	8aea <onoff_request>
	switch (start_mode) {
    4966:	1e7b      	subs	r3, r7, #1
    4968:	2b01      	cmp	r3, #1
    496a:	d82b      	bhi.n	49c4 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    496c:	2f01      	cmp	r7, #1
    496e:	d107      	bne.n	4980 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4970:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4974:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4978:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    497c:	2b01      	cmp	r3, #1
    497e:	d021      	beq.n	49c4 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4980:	f005 f90b 	bl	9b9a <k_is_in_isr>
    4984:	4605      	mov	r5, r0
    4986:	b9f8      	cbnz	r0, 49c8 <z_nrf_clock_control_lf_on+0x90>
	return !z_sys_post_kernel;
    4988:	4b28      	ldr	r3, [pc, #160]	; (4a2c <z_nrf_clock_control_lf_on+0xf4>)
    498a:	781b      	ldrb	r3, [r3, #0]
    498c:	b1e3      	cbz	r3, 49c8 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    498e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4992:	2202      	movs	r2, #2
    4994:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4998:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    499a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4a30 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    499e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    49a2:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    49a6:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    49aa:	03d2      	lsls	r2, r2, #15
    49ac:	d516      	bpl.n	49dc <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    49ae:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    49b2:	2b01      	cmp	r3, #1
    49b4:	d001      	beq.n	49ba <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    49b6:	2f01      	cmp	r7, #1
    49b8:	d110      	bne.n	49dc <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    49ba:	b35d      	cbz	r5, 4a14 <z_nrf_clock_control_lf_on+0xdc>
    49bc:	f386 8811 	msr	BASEPRI, r6
    49c0:	f3bf 8f6f 	isb	sy
}
    49c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    49c8:	f04f 0320 	mov.w	r3, #32
    49cc:	f3ef 8611 	mrs	r6, BASEPRI
    49d0:	f383 8812 	msr	BASEPRI_MAX, r3
    49d4:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    49d8:	2501      	movs	r5, #1
    49da:	e7de      	b.n	499a <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    49dc:	b1ad      	cbz	r5, 4a0a <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    49de:	4630      	mov	r0, r6
    49e0:	f7ff f806 	bl	39f0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    49e4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    49e8:	2b00      	cmp	r3, #0
    49ea:	d1da      	bne.n	49a2 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49ec:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    49f0:	2a00      	cmp	r2, #0
    49f2:	d0d6      	beq.n	49a2 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49f4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    49f8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    49fc:	2301      	movs	r3, #1
    49fe:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    4a02:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a06:	60a3      	str	r3, [r4, #8]
}
    4a08:	e7cb      	b.n	49a2 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    4a0a:	2100      	movs	r1, #0
    4a0c:	2021      	movs	r0, #33	; 0x21
    4a0e:	f003 fb01 	bl	8014 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4a12:	e7e7      	b.n	49e4 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    4a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a18:	2202      	movs	r2, #2
    4a1a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4a1e:	e7d1      	b.n	49c4 <z_nrf_clock_control_lf_on+0x8c>
    4a20:	20000e58 	.word	0x20000e58
    4a24:	20000e48 	.word	0x20000e48
    4a28:	20000e78 	.word	0x20000e78
    4a2c:	20001651 	.word	0x20001651
    4a30:	e000e100 	.word	0xe000e100

00004a34 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
    4a34:	b508      	push	{r3, lr}
    4a36:	4807      	ldr	r0, [pc, #28]	; (4a54 <uart_console_init+0x20>)
    4a38:	f005 f852 	bl	9ae0 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    4a3c:	b138      	cbz	r0, 4a4e <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    4a3e:	4806      	ldr	r0, [pc, #24]	; (4a58 <uart_console_init+0x24>)
    4a40:	f7ff fe08 	bl	4654 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4a44:	4804      	ldr	r0, [pc, #16]	; (4a58 <uart_console_init+0x24>)
    4a46:	f7fc ffe3 	bl	1a10 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    4a4a:	2000      	movs	r0, #0
}
    4a4c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    4a4e:	f06f 0012 	mvn.w	r0, #18
    4a52:	e7fb      	b.n	4a4c <uart_console_init+0x18>
    4a54:	00009f08 	.word	0x00009f08
    4a58:	00004a5d 	.word	0x00004a5d

00004a5c <console_out>:
	if ('\n' == c) {
    4a5c:	280a      	cmp	r0, #10
{
    4a5e:	b538      	push	{r3, r4, r5, lr}
    4a60:	4d07      	ldr	r5, [pc, #28]	; (4a80 <console_out+0x24>)
    4a62:	4604      	mov	r4, r0
	if ('\n' == c) {
    4a64:	d104      	bne.n	4a70 <console_out+0x14>
    4a66:	68ab      	ldr	r3, [r5, #8]
    4a68:	210d      	movs	r1, #13
    4a6a:	685b      	ldr	r3, [r3, #4]
    4a6c:	4628      	mov	r0, r5
    4a6e:	4798      	blx	r3
    4a70:	68ab      	ldr	r3, [r5, #8]
    4a72:	4803      	ldr	r0, [pc, #12]	; (4a80 <console_out+0x24>)
    4a74:	685b      	ldr	r3, [r3, #4]
    4a76:	b2e1      	uxtb	r1, r4
    4a78:	4798      	blx	r3
}
    4a7a:	4620      	mov	r0, r4
    4a7c:	bd38      	pop	{r3, r4, r5, pc}
    4a7e:	bf00      	nop
    4a80:	00009f08 	.word	0x00009f08

00004a84 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    4a84:	b530      	push	{r4, r5, lr}
	return port->config;
    4a86:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4a88:	7b05      	ldrb	r5, [r0, #12]
    4a8a:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    4a8e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    4a92:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4a94:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4a98:	d105      	bne.n	4aa6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    4a9a:	4620      	mov	r0, r4
    4a9c:	f001 ff82 	bl	69a4 <nrfx_gpiote_trigger_disable>

		return 0;
    4aa0:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    4aa2:	b005      	add	sp, #20
    4aa4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    4aa6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    4aa8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4aac:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4ab0:	d114      	bne.n	4adc <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4ab6:	bf0c      	ite	eq
    4ab8:	2304      	moveq	r3, #4
    4aba:	2305      	movne	r3, #5
    4abc:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4ac0:	2300      	movs	r3, #0
    4ac2:	4619      	mov	r1, r3
    4ac4:	aa02      	add	r2, sp, #8
    4ac6:	4620      	mov	r0, r4
    4ac8:	f001 fdaa 	bl	6620 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4acc:	4b1f      	ldr	r3, [pc, #124]	; (4b4c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4ace:	4298      	cmp	r0, r3
    4ad0:	d139      	bne.n	4b46 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4ad2:	2101      	movs	r1, #1
    4ad4:	4620      	mov	r0, r4
    4ad6:	f001 ff1d 	bl	6914 <nrfx_gpiote_trigger_enable>
	return 0;
    4ada:	e7e1      	b.n	4aa0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4adc:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4ae0:	d026      	beq.n	4b30 <gpio_nrfx_pin_interrupt_configure+0xac>
    4ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4ae6:	bf14      	ite	ne
    4ae8:	2301      	movne	r3, #1
    4aea:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4aec:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4af0:	6883      	ldr	r3, [r0, #8]
    4af2:	40cb      	lsrs	r3, r1
    4af4:	07d9      	lsls	r1, r3, #31
    4af6:	d4e3      	bmi.n	4ac0 <gpio_nrfx_pin_interrupt_configure+0x3c>
    4af8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4afc:	d1e0      	bne.n	4ac0 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    4afe:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    4b00:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    4b02:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    4b06:	4a12      	ldr	r2, [pc, #72]	; (4b50 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4b08:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    4b0c:	bf18      	it	ne
    4b0e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4b16:	07db      	lsls	r3, r3, #31
    4b18:	d4d2      	bmi.n	4ac0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4b1a:	f10d 0507 	add.w	r5, sp, #7
    4b1e:	4629      	mov	r1, r5
    4b20:	4620      	mov	r0, r4
    4b22:	f001 fea3 	bl	686c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4b26:	4b0b      	ldr	r3, [pc, #44]	; (4b54 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    4b28:	4298      	cmp	r0, r3
    4b2a:	d003      	beq.n	4b34 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    4b2c:	9503      	str	r5, [sp, #12]
    4b2e:	e7c7      	b.n	4ac0 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4b30:	2303      	movs	r3, #3
    4b32:	e7db      	b.n	4aec <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    4b34:	4628      	mov	r0, r5
    4b36:	f001 fee7 	bl	6908 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4b3a:	4b04      	ldr	r3, [pc, #16]	; (4b4c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    4b3c:	4298      	cmp	r0, r3
    4b3e:	d0f5      	beq.n	4b2c <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    4b40:	f06f 000b 	mvn.w	r0, #11
    4b44:	e7ad      	b.n	4aa2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    4b46:	f06f 0015 	mvn.w	r0, #21
    4b4a:	e7aa      	b.n	4aa2 <gpio_nrfx_pin_interrupt_configure+0x1e>
    4b4c:	0bad0000 	.word	0x0bad0000
    4b50:	50000300 	.word	0x50000300
    4b54:	0bad0004 	.word	0x0bad0004

00004b58 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4b58:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4b5a:	f001 fec5 	bl	68e8 <nrfx_gpiote_is_init>
    4b5e:	4604      	mov	r4, r0
    4b60:	b968      	cbnz	r0, 4b7e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4b62:	f001 fe99 	bl	6898 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4b66:	4b08      	ldr	r3, [pc, #32]	; (4b88 <gpio_nrfx_init+0x30>)
    4b68:	4298      	cmp	r0, r3
    4b6a:	d10a      	bne.n	4b82 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4b6c:	4807      	ldr	r0, [pc, #28]	; (4b8c <gpio_nrfx_init+0x34>)
    4b6e:	4621      	mov	r1, r4
    4b70:	f001 fe76 	bl	6860 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4b74:	4622      	mov	r2, r4
    4b76:	2105      	movs	r1, #5
    4b78:	2006      	movs	r0, #6
    4b7a:	f7fe ffdb 	bl	3b34 <z_arm_irq_priority_set>
		return 0;
    4b7e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4b80:	bd10      	pop	{r4, pc}
		return -EIO;
    4b82:	f06f 0004 	mvn.w	r0, #4
    4b86:	e7fb      	b.n	4b80 <gpio_nrfx_init+0x28>
    4b88:	0bad0000 	.word	0x0bad0000
    4b8c:	00004b91 	.word	0x00004b91

00004b90 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4b90:	0942      	lsrs	r2, r0, #5
{
    4b92:	b570      	push	{r4, r5, r6, lr}
    4b94:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4b96:	d002      	beq.n	4b9e <nrfx_gpio_handler+0xe>
    4b98:	2a01      	cmp	r2, #1
    4b9a:	d017      	beq.n	4bcc <nrfx_gpio_handler+0x3c>
}
    4b9c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4b9e:	4e0d      	ldr	r6, [pc, #52]	; (4bd4 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    4ba0:	6932      	ldr	r2, [r6, #16]
    4ba2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4ba4:	2900      	cmp	r1, #0
    4ba6:	d0f9      	beq.n	4b9c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    4ba8:	f003 031f 	and.w	r3, r3, #31
    4bac:	2501      	movs	r5, #1
    4bae:	680c      	ldr	r4, [r1, #0]
    4bb0:	409d      	lsls	r5, r3
    4bb2:	2900      	cmp	r1, #0
    4bb4:	d0f2      	beq.n	4b9c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    4bb6:	688a      	ldr	r2, [r1, #8]
    4bb8:	402a      	ands	r2, r5
    4bba:	d002      	beq.n	4bc2 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4bbc:	684b      	ldr	r3, [r1, #4]
    4bbe:	4630      	mov	r0, r6
    4bc0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4bc2:	b12c      	cbz	r4, 4bd0 <nrfx_gpio_handler+0x40>
    4bc4:	6823      	ldr	r3, [r4, #0]
    4bc6:	4621      	mov	r1, r4
    4bc8:	461c      	mov	r4, r3
    4bca:	e7f2      	b.n	4bb2 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4bcc:	4e02      	ldr	r6, [pc, #8]	; (4bd8 <nrfx_gpio_handler+0x48>)
    4bce:	e7e7      	b.n	4ba0 <nrfx_gpio_handler+0x10>
    4bd0:	4623      	mov	r3, r4
    4bd2:	e7f8      	b.n	4bc6 <nrfx_gpio_handler+0x36>
    4bd4:	00009ef0 	.word	0x00009ef0
    4bd8:	00009ed8 	.word	0x00009ed8

00004bdc <gpio_nrfx_pin_configure>:
{
    4bdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    4be0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4be2:	7b3b      	ldrb	r3, [r7, #12]
    4be4:	f001 051f 	and.w	r5, r1, #31
    4be8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    4bec:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4bee:	4628      	mov	r0, r5
    4bf0:	f10d 0103 	add.w	r1, sp, #3
{
    4bf4:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4bf6:	f001 fe39 	bl	686c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4bfa:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4bfe:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    4c00:	d10b      	bne.n	4c1a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    4c02:	4628      	mov	r0, r5
    4c04:	f001 fef6 	bl	69f4 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    4c08:	4b3d      	ldr	r3, [pc, #244]	; (4d00 <gpio_nrfx_pin_configure+0x124>)
    4c0a:	4598      	cmp	r8, r3
    4c0c:	d103      	bne.n	4c16 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    4c0e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4c12:	f001 fe73 	bl	68fc <nrfx_gpiote_channel_free>
		return 0;
    4c16:	2000      	movs	r0, #0
    4c18:	e00c      	b.n	4c34 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c1a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4c1c:	4619      	mov	r1, r3
    4c1e:	aa02      	add	r2, sp, #8
    4c20:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c22:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4c26:	f001 fcfb 	bl	6620 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4c2a:	4b35      	ldr	r3, [pc, #212]	; (4d00 <gpio_nrfx_pin_configure+0x124>)
    4c2c:	4298      	cmp	r0, r3
    4c2e:	d004      	beq.n	4c3a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    4c30:	f06f 0015 	mvn.w	r0, #21
}
    4c34:	b004      	add	sp, #16
    4c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    4c3a:	4580      	cmp	r8, r0
    4c3c:	d103      	bne.n	4c46 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    4c3e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4c42:	f001 fe5b 	bl	68fc <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4c46:	03a3      	lsls	r3, r4, #14
    4c48:	d54b      	bpl.n	4ce2 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4c4a:	f240 3306 	movw	r3, #774	; 0x306
    4c4e:	4023      	ands	r3, r4
    4c50:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    4c54:	d019      	beq.n	4c8a <gpio_nrfx_pin_configure+0xae>
    4c56:	d80c      	bhi.n	4c72 <gpio_nrfx_pin_configure+0x96>
    4c58:	2b06      	cmp	r3, #6
    4c5a:	d017      	beq.n	4c8c <gpio_nrfx_pin_configure+0xb0>
    4c5c:	d804      	bhi.n	4c68 <gpio_nrfx_pin_configure+0x8c>
    4c5e:	b1ab      	cbz	r3, 4c8c <gpio_nrfx_pin_configure+0xb0>
    4c60:	2b02      	cmp	r3, #2
    4c62:	d1e5      	bne.n	4c30 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    4c64:	2304      	movs	r3, #4
    4c66:	e011      	b.n	4c8c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4c6c:	d1e0      	bne.n	4c30 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    4c6e:	2301      	movs	r3, #1
    4c70:	e00c      	b.n	4c8c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4c72:	f240 2202 	movw	r2, #514	; 0x202
    4c76:	4293      	cmp	r3, r2
    4c78:	d027      	beq.n	4cca <gpio_nrfx_pin_configure+0xee>
    4c7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    4c7e:	d026      	beq.n	4cce <gpio_nrfx_pin_configure+0xf2>
    4c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4c84:	d1d4      	bne.n	4c30 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    4c86:	2302      	movs	r3, #2
    4c88:	e000      	b.n	4c8c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    4c8a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    4c8c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4c90:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4c94:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4c98:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4c9a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    4c9e:	bf54      	ite	pl
    4ca0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4ca4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4ca6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4ca8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4cac:	d511      	bpl.n	4cd2 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4cae:	687a      	ldr	r2, [r7, #4]
    4cb0:	2301      	movs	r3, #1
    4cb2:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4cb4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4cb8:	2200      	movs	r2, #0
    4cba:	a901      	add	r1, sp, #4
    4cbc:	4628      	mov	r0, r5
    4cbe:	f001 fd5d 	bl	677c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4cc2:	4b0f      	ldr	r3, [pc, #60]	; (4d00 <gpio_nrfx_pin_configure+0x124>)
    4cc4:	4298      	cmp	r0, r3
    4cc6:	d0a6      	beq.n	4c16 <gpio_nrfx_pin_configure+0x3a>
    4cc8:	e7b2      	b.n	4c30 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    4cca:	2305      	movs	r3, #5
    4ccc:	e7de      	b.n	4c8c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4cce:	2303      	movs	r3, #3
    4cd0:	e7dc      	b.n	4c8c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4cd2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4cd4:	bf41      	itttt	mi
    4cd6:	2301      	movmi	r3, #1
    4cd8:	687a      	ldrmi	r2, [r7, #4]
    4cda:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    4cdc:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    4ce0:	e7ea      	b.n	4cb8 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    4ce2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4ce4:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    4ce8:	bf54      	ite	pl
    4cea:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4cee:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4cf0:	461a      	mov	r2, r3
    4cf2:	a901      	add	r1, sp, #4
    4cf4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4cf6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4cfa:	f001 fc91 	bl	6620 <nrfx_gpiote_input_configure>
    4cfe:	e7e0      	b.n	4cc2 <gpio_nrfx_pin_configure+0xe6>
    4d00:	0bad0000 	.word	0x0bad0000

00004d04 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    4d04:	b508      	push	{r3, lr}
	const struct i2c_nrfx_twi_config *config = dev->config;
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    4d06:	6843      	ldr	r3, [r0, #4]
    4d08:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
    4d0a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
    4d0e:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    4d12:	f002 f9e1 	bl	70d8 <nrfx_twi_twim_bus_recover>
	sda_pin = nrf_twi_sda_pin_get(config->twi.p_twi);

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    4d16:	4b03      	ldr	r3, [pc, #12]	; (4d24 <i2c_nrfx_twi_recover_bus+0x20>)
    4d18:	4298      	cmp	r0, r3
}
    4d1a:	bf14      	ite	ne
    4d1c:	f06f 000f 	mvnne.w	r0, #15
    4d20:	2000      	moveq	r0, #0
    4d22:	bd08      	pop	{r3, pc}
    4d24:	0bad0000 	.word	0x0bad0000

00004d28 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    4d28:	b5b0      	push	{r4, r5, r7, lr}
    4d2a:	4604      	mov	r4, r0
    4d2c:	b082      	sub	sp, #8
    4d2e:	2200      	movs	r2, #0
    4d30:	af00      	add	r7, sp, #0
    4d32:	2101      	movs	r1, #1
    4d34:	2003      	movs	r0, #3
    4d36:	f7fe fefd 	bl	3b34 <z_arm_irq_priority_set>
    4d3a:	6863      	ldr	r3, [r4, #4]
    4d3c:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    4d3e:	1d3a      	adds	r2, r7, #4
    4d40:	2100      	movs	r1, #0
    4d42:	4628      	mov	r0, r5
    4d44:	f004 fc4e 	bl	95e4 <pinctrl_lookup_state>
	if (ret < 0) {
    4d48:	2800      	cmp	r0, #0
    4d4a:	db27      	blt.n	4d9c <twi_0_init+0x74>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    4d4c:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4d4e:	682a      	ldr	r2, [r5, #0]
    4d50:	7919      	ldrb	r1, [r3, #4]
    4d52:	6818      	ldr	r0, [r3, #0]
    4d54:	f000 f924 	bl	4fa0 <pinctrl_configure_pins>
    4d58:	2800      	cmp	r0, #0
    4d5a:	db1f      	blt.n	4d9c <twi_0_init+0x74>
	const struct i2c_nrfx_twi_config *config = dev->config;
    4d5c:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    4d5e:	6923      	ldr	r3, [r4, #16]
    4d60:	4a11      	ldr	r2, [pc, #68]	; (4da8 <twi_0_init+0x80>)
    4d62:	f100 0108 	add.w	r1, r0, #8
    4d66:	f002 f841 	bl	6dec <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    4d6a:	4b10      	ldr	r3, [pc, #64]	; (4dac <twi_0_init+0x84>)
    4d6c:	4298      	cmp	r0, r3
    4d6e:	d018      	beq.n	4da2 <twi_0_init+0x7a>
		LOG_ERR("Failed to initialize device: %s",
    4d70:	6823      	ldr	r3, [r4, #0]
    4d72:	466c      	mov	r4, sp
    4d74:	b088      	sub	sp, #32
    4d76:	466a      	mov	r2, sp
    4d78:	490d      	ldr	r1, [pc, #52]	; (4db0 <twi_0_init+0x88>)
    4d7a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
    4d82:	8393      	strh	r3, [r2, #28]
    4d84:	4b0b      	ldr	r3, [pc, #44]	; (4db4 <twi_0_init+0x8c>)
    4d86:	f842 3f10 	str.w	r3, [r2, #16]!
    4d8a:	480b      	ldr	r0, [pc, #44]	; (4db8 <twi_0_init+0x90>)
    4d8c:	2300      	movs	r3, #0
    4d8e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    4d92:	f7fe f883 	bl	2e9c <z_impl_z_log_msg_static_create>
		return -EBUSY;
    4d96:	f06f 000f 	mvn.w	r0, #15
    4d9a:	46a5      	mov	sp, r4
I2C_NRFX_TWI_DEVICE(0);
    4d9c:	3708      	adds	r7, #8
    4d9e:	46bd      	mov	sp, r7
    4da0:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
    4da2:	2000      	movs	r0, #0
    4da4:	e7fa      	b.n	4d9c <twi_0_init+0x74>
    4da6:	bf00      	nop
    4da8:	00004dbd 	.word	0x00004dbd
    4dac:	0bad0000 	.word	0x0bad0000
    4db0:	0000ad46 	.word	0x0000ad46
    4db4:	01000003 	.word	0x01000003
    4db8:	0000a178 	.word	0x0000a178

00004dbc <event_handler>:
	switch (p_event->type) {
    4dbc:	7803      	ldrb	r3, [r0, #0]
    4dbe:	2b01      	cmp	r3, #1
    4dc0:	d008      	beq.n	4dd4 <event_handler+0x18>
    4dc2:	2b02      	cmp	r3, #2
    4dc4:	d008      	beq.n	4dd8 <event_handler+0x1c>
    4dc6:	b94b      	cbnz	r3, 4ddc <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    4dc8:	4b05      	ldr	r3, [pc, #20]	; (4de0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    4dca:	620b      	str	r3, [r1, #32]
	z_impl_k_sem_give(sem);
    4dcc:	f101 0010 	add.w	r0, r1, #16
    4dd0:	f002 be14 	b.w	79fc <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    4dd4:	4b03      	ldr	r3, [pc, #12]	; (4de4 <event_handler+0x28>)
    4dd6:	e7f8      	b.n	4dca <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4dd8:	4b03      	ldr	r3, [pc, #12]	; (4de8 <event_handler+0x2c>)
    4dda:	e7f6      	b.n	4dca <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    4ddc:	4b03      	ldr	r3, [pc, #12]	; (4dec <event_handler+0x30>)
    4dde:	e7f4      	b.n	4dca <event_handler+0xe>
    4de0:	0bad0000 	.word	0x0bad0000
    4de4:	0bae0001 	.word	0x0bae0001
    4de8:	0bae0002 	.word	0x0bae0002
    4dec:	0bad0001 	.word	0x0bad0001

00004df0 <i2c_nrfx_twi_configure>:
{
    4df0:	b510      	push	{r4, lr}
	if (I2C_ADDR_10_BITS & dev_config) {
    4df2:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twi_config *config = dev->config;
    4df6:	6842      	ldr	r2, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    4df8:	6904      	ldr	r4, [r0, #16]
{
    4dfa:	b086      	sub	sp, #24
	if (I2C_ADDR_10_BITS & dev_config) {
    4dfc:	d10f      	bne.n	4e1e <i2c_nrfx_twi_configure+0x2e>
	switch (I2C_SPEED_GET(dev_config)) {
    4dfe:	f3c1 0042 	ubfx	r0, r1, #1, #3
    4e02:	2801      	cmp	r0, #1
    4e04:	d00e      	beq.n	4e24 <i2c_nrfx_twi_configure+0x34>
    4e06:	2802      	cmp	r0, #2
    4e08:	d015      	beq.n	4e36 <i2c_nrfx_twi_configure+0x46>
		LOG_ERR("unsupported speed");
    4e0a:	4a0d      	ldr	r2, [pc, #52]	; (4e40 <i2c_nrfx_twi_configure+0x50>)
    4e0c:	9205      	str	r2, [sp, #20]
    4e0e:	2202      	movs	r2, #2
    4e10:	9204      	str	r2, [sp, #16]
    4e12:	480c      	ldr	r0, [pc, #48]	; (4e44 <i2c_nrfx_twi_configure+0x54>)
    4e14:	aa04      	add	r2, sp, #16
    4e16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4e1a:	f7fe f83f 	bl	2e9c <z_impl_z_log_msg_static_create>
		return -EINVAL;
    4e1e:	f06f 0015 	mvn.w	r0, #21
    4e22:	e006      	b.n	4e32 <i2c_nrfx_twi_configure+0x42>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    4e24:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    4e26:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    4e2a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    4e2e:	2000      	movs	r0, #0
	data->dev_config = dev_config;
    4e30:	6261      	str	r1, [r4, #36]	; 0x24
}
    4e32:	b006      	add	sp, #24
    4e34:	bd10      	pop	{r4, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    4e36:	6813      	ldr	r3, [r2, #0]
    4e38:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    4e3c:	e7f5      	b.n	4e2a <i2c_nrfx_twi_configure+0x3a>
    4e3e:	bf00      	nop
    4e40:	0000ad66 	.word	0x0000ad66
    4e44:	0000a178 	.word	0x0000a178

00004e48 <i2c_nrfx_twi_transfer>:
{
    4e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e4c:	b08b      	sub	sp, #44	; 0x2c
    4e4e:	af00      	add	r7, sp, #0
    4e50:	4606      	mov	r6, r0
    4e52:	460c      	mov	r4, r1
    4e54:	4692      	mov	sl, r2
    4e56:	60bb      	str	r3, [r7, #8]
	const struct i2c_nrfx_twi_config *config = dev->config;
    4e58:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    4e5c:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    4e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4e64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e68:	4640      	mov	r0, r8
    4e6a:	f002 fde9 	bl	7a40 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    4e6e:	f108 0310 	add.w	r3, r8, #16
    4e72:	60fb      	str	r3, [r7, #12]
    4e74:	2200      	movs	r2, #0
    4e76:	2300      	movs	r3, #0
    4e78:	f108 0010 	add.w	r0, r8, #16
    4e7c:	f002 fde0 	bl	7a40 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    4e80:	4648      	mov	r0, r9
    4e82:	f002 f815 	bl	6eb0 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    4e86:	f8df b104 	ldr.w	fp, [pc, #260]	; 4f8c <i2c_nrfx_twi_transfer+0x144>
	for (size_t i = 0; i < num_msgs; i++) {
    4e8a:	2500      	movs	r5, #0
    4e8c:	4555      	cmp	r5, sl
    4e8e:	d301      	bcc.n	4e94 <i2c_nrfx_twi_transfer+0x4c>
    4e90:	2400      	movs	r4, #0
    4e92:	e053      	b.n	4f3c <i2c_nrfx_twi_transfer+0xf4>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    4e94:	7a23      	ldrb	r3, [r4, #8]
    4e96:	603b      	str	r3, [r7, #0]
    4e98:	f013 0108 	ands.w	r1, r3, #8
    4e9c:	d172      	bne.n	4f84 <i2c_nrfx_twi_transfer+0x13c>
		nrfx_twi_xfer_desc_t cur_xfer = {
    4e9e:	2212      	movs	r2, #18
    4ea0:	f107 0016 	add.w	r0, r7, #22
    4ea4:	6079      	str	r1, [r7, #4]
    4ea6:	f004 fa99 	bl	93dc <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    4eaa:	683b      	ldr	r3, [r7, #0]
		nrfx_twi_xfer_desc_t cur_xfer = {
    4eac:	6860      	ldr	r0, [r4, #4]
    4eae:	68b9      	ldr	r1, [r7, #8]
    4eb0:	61b8      	str	r0, [r7, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    4eb2:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    4eb6:	6820      	ldr	r0, [r4, #0]
    4eb8:	7579      	strb	r1, [r7, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    4eba:	f013 0f02 	tst.w	r3, #2
    4ebe:	6879      	ldr	r1, [r7, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    4ec0:	753a      	strb	r2, [r7, #20]
    4ec2:	6238      	str	r0, [r7, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    4ec4:	d116      	bne.n	4ef4 <i2c_nrfx_twi_transfer+0xac>
			if ((i < (num_msgs - 1)) &&
    4ec6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    4eca:	42ab      	cmp	r3, r5
    4ecc:	d902      	bls.n	4ed4 <i2c_nrfx_twi_transfer+0x8c>
    4ece:	7d23      	ldrb	r3, [r4, #20]
    4ed0:	075b      	lsls	r3, r3, #29
    4ed2:	d511      	bpl.n	4ef8 <i2c_nrfx_twi_transfer+0xb0>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    4ed4:	2a00      	cmp	r2, #0
    4ed6:	d155      	bne.n	4f84 <i2c_nrfx_twi_transfer+0x13c>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    4ed8:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    4eda:	f107 0114 	add.w	r1, r7, #20
    4ede:	4648      	mov	r0, r9
    4ee0:	f002 f812 	bl	6f08 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    4ee4:	4558      	cmp	r0, fp
    4ee6:	d009      	beq.n	4efc <i2c_nrfx_twi_transfer+0xb4>
			if (res == NRFX_ERROR_BUSY) {
    4ee8:	4b29      	ldr	r3, [pc, #164]	; (4f90 <i2c_nrfx_twi_transfer+0x148>)
    4eea:	4298      	cmp	r0, r3
    4eec:	d124      	bne.n	4f38 <i2c_nrfx_twi_transfer+0xf0>
				ret = -EBUSY;
    4eee:	f06f 040f 	mvn.w	r4, #15
    4ef2:	e023      	b.n	4f3c <i2c_nrfx_twi_transfer+0xf4>
		uint32_t xfer_flags = 0;
    4ef4:	460a      	mov	r2, r1
    4ef6:	e7f0      	b.n	4eda <i2c_nrfx_twi_transfer+0x92>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    4ef8:	2240      	movs	r2, #64	; 0x40
    4efa:	e7ee      	b.n	4eda <i2c_nrfx_twi_transfer+0x92>
    4efc:	2300      	movs	r3, #0
    4efe:	68f8      	ldr	r0, [r7, #12]
    4f00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4f04:	f002 fd9c 	bl	7a40 <z_impl_k_sem_take>
		if (ret != 0) {
    4f08:	4603      	mov	r3, r0
    4f0a:	b310      	cbz	r0, 4f52 <i2c_nrfx_twi_transfer+0x10a>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    4f0c:	466c      	mov	r4, sp
    4f0e:	b088      	sub	sp, #32
    4f10:	466a      	mov	r2, sp
    4f12:	4b20      	ldr	r3, [pc, #128]	; (4f94 <i2c_nrfx_twi_transfer+0x14c>)
    4f14:	e9c2 3505 	strd	r3, r5, [r2, #20]
    4f18:	2303      	movs	r3, #3
    4f1a:	f842 3f10 	str.w	r3, [r2, #16]!
    4f1e:	481e      	ldr	r0, [pc, #120]	; (4f98 <i2c_nrfx_twi_transfer+0x150>)
    4f20:	2300      	movs	r3, #0
    4f22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4f26:	f7fd ffb9 	bl	2e9c <z_impl_z_log_msg_static_create>
			nrfx_twi_disable(&config->twi);
    4f2a:	4648      	mov	r0, r9
    4f2c:	46a5      	mov	sp, r4
    4f2e:	f001 ffcf 	bl	6ed0 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    4f32:	4630      	mov	r0, r6
    4f34:	f7ff fee6 	bl	4d04 <i2c_nrfx_twi_recover_bus>
				ret = -EIO;
    4f38:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    4f3c:	4648      	mov	r0, r9
    4f3e:	f001 ffc7 	bl	6ed0 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    4f42:	4640      	mov	r0, r8
    4f44:	f002 fd5a 	bl	79fc <z_impl_k_sem_give>
}
    4f48:	4620      	mov	r0, r4
    4f4a:	372c      	adds	r7, #44	; 0x2c
    4f4c:	46bd      	mov	sp, r7
    4f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = data->res;
    4f52:	f8d8 1020 	ldr.w	r1, [r8, #32]
		if (res != NRFX_SUCCESS) {
    4f56:	4559      	cmp	r1, fp
    4f58:	f104 040c 	add.w	r4, r4, #12
    4f5c:	d010      	beq.n	4f80 <i2c_nrfx_twi_transfer+0x138>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    4f5e:	466c      	mov	r4, sp
    4f60:	b088      	sub	sp, #32
    4f62:	466a      	mov	r2, sp
    4f64:	480d      	ldr	r0, [pc, #52]	; (4f9c <i2c_nrfx_twi_transfer+0x154>)
    4f66:	61d5      	str	r5, [r2, #28]
    4f68:	e9c2 0105 	strd	r0, r1, [r2, #20]
    4f6c:	2104      	movs	r1, #4
    4f6e:	f842 1f10 	str.w	r1, [r2, #16]!
    4f72:	4809      	ldr	r0, [pc, #36]	; (4f98 <i2c_nrfx_twi_transfer+0x150>)
    4f74:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4f78:	f7fd ff90 	bl	2e9c <z_impl_z_log_msg_static_create>
    4f7c:	46a5      	mov	sp, r4
			break;
    4f7e:	e7db      	b.n	4f38 <i2c_nrfx_twi_transfer+0xf0>
	for (size_t i = 0; i < num_msgs; i++) {
    4f80:	3501      	adds	r5, #1
    4f82:	e783      	b.n	4e8c <i2c_nrfx_twi_transfer+0x44>
			ret = -ENOTSUP;
    4f84:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4f88:	e7d8      	b.n	4f3c <i2c_nrfx_twi_transfer+0xf4>
    4f8a:	bf00      	nop
    4f8c:	0bad0000 	.word	0x0bad0000
    4f90:	0bad000b 	.word	0x0bad000b
    4f94:	0000ad78 	.word	0x0000ad78
    4f98:	0000a178 	.word	0x0000a178
    4f9c:	0000ada2 	.word	0x0000ada2

00004fa0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        case 1: return NRF_P1;
    4fa4:	4e5a      	ldr	r6, [pc, #360]	; (5110 <pinctrl_configure_pins+0x170>)
    4fa6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4faa:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4fac:	4281      	cmp	r1, r0
    4fae:	d102      	bne.n	4fb6 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    4fb0:	2000      	movs	r0, #0
}
    4fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4fb6:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4fb8:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4fbc:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    4fc0:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    4fc2:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    4fc6:	bf08      	it	eq
    4fc8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    4fcc:	2c22      	cmp	r4, #34	; 0x22
    4fce:	f200 809b 	bhi.w	5108 <pinctrl_configure_pins+0x168>
    4fd2:	e8df f004 	tbb	[pc, r4]
    4fd6:	2412      	.short	0x2412
    4fd8:	402c4429 	.word	0x402c4429
    4fdc:	99999944 	.word	0x99999944
    4fe0:	99704799 	.word	0x99704799
    4fe4:	99999999 	.word	0x99999999
    4fe8:	99999999 	.word	0x99999999
    4fec:	817e7b73 	.word	0x817e7b73
    4ff0:	84999999 	.word	0x84999999
    4ff4:	93908d8a 	.word	0x93908d8a
    4ff8:	96          	.byte	0x96
    4ff9:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    4ffa:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    4ffe:	ea4f 1c53 	mov.w	ip, r3, lsr #5
        case 1: return NRF_P1;
    5002:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
    5006:	f003 041f 	and.w	r4, r3, #31
        case 1: return NRF_P1;
    500a:	bf14      	ite	ne
    500c:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    5010:	46b4      	moveq	ip, r6
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5012:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    5016:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    501a:	2401      	movs	r4, #1
    501c:	e002      	b.n	5024 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    501e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5022:	2400      	movs	r4, #0
    5024:	46a6      	mov	lr, r4
    5026:	e024      	b.n	5072 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    5028:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    502c:	e7e7      	b.n	4ffe <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    502e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    5032:	2400      	movs	r4, #0
    return pin_number >> 5;
    5034:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    5038:	f1be 0f01 	cmp.w	lr, #1
    503c:	bf14      	ite	ne
    503e:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    5042:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    5044:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5048:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    504c:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    5050:	f04f 0e01 	mov.w	lr, #1
    5054:	e00d      	b.n	5072 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    5056:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    505a:	2401      	movs	r4, #1
    505c:	e7ea      	b.n	5034 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    505e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    5062:	e7de      	b.n	5022 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    5064:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    5068:	2d00      	cmp	r5, #0
    506a:	d1da      	bne.n	5022 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    506c:	2400      	movs	r4, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    506e:	46a6      	mov	lr, r4
				drive = NRF_DRIVE_S0D1;
    5070:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    5072:	f850 cb04 	ldr.w	ip, [r0], #4
    5076:	f40c 5800 	and.w	r8, ip, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    507a:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    507e:	ea4f 2505 	mov.w	r5, r5, lsl #8
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    5082:	f3cc 18c1 	ubfx	r8, ip, #7, #2
    *p_pin = pin_number & 0x1F;
    5086:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    508a:	ea4f 1353 	mov.w	r3, r3, lsr #5
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    508e:	bf1c      	itt	ne
    5090:	2401      	movne	r4, #1
    5092:	f04f 0e00 	movne.w	lr, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    5096:	ea45 0588 	orr.w	r5, r5, r8, lsl #2
        case 0: return NRF_P0;
    509a:	2b01      	cmp	r3, #1
    509c:	bf0c      	ite	eq
    509e:	4633      	moveq	r3, r6
    50a0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    50a4:	ea45 050e 	orr.w	r5, r5, lr
    reg->PIN_CNF[pin_number] = cnf;
    50a8:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    50ac:	ea45 0544 	orr.w	r5, r5, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    50b0:	f843 502c 	str.w	r5, [r3, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    50b4:	e77a      	b.n	4fac <pinctrl_configure_pins+0xc>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    50b6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    50ba:	e7d5      	b.n	5068 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    50bc:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    50c0:	6804      	ldr	r4, [r0, #0]
    50c2:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    50c6:	2c00      	cmp	r4, #0
    50c8:	d0c7      	beq.n	505a <pinctrl_configure_pins+0xba>
    50ca:	e798      	b.n	4ffe <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    50cc:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    50d0:	e7f6      	b.n	50c0 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    50d2:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    50d6:	e7f3      	b.n	50c0 <pinctrl_configure_pins+0x120>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    50d8:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    50dc:	e7f0      	b.n	50c0 <pinctrl_configure_pins+0x120>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    50de:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    50e2:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    50e4:	f04f 0e00 	mov.w	lr, #0
    50e8:	e7c3      	b.n	5072 <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    50ea:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    50ee:	e786      	b.n	4ffe <pinctrl_configure_pins+0x5e>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    50f0:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    50f4:	e7f5      	b.n	50e2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    50f6:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    50fa:	e7f2      	b.n	50e2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    50fc:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    5100:	e7ef      	b.n	50e2 <pinctrl_configure_pins+0x142>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    5102:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    5106:	e7ec      	b.n	50e2 <pinctrl_configure_pins+0x142>
		switch (NRF_GET_FUN(pins[i])) {
    5108:	f06f 0085 	mvn.w	r0, #133	; 0x85
    510c:	e751      	b.n	4fb2 <pinctrl_configure_pins+0x12>
    510e:	bf00      	nop
    5110:	50000300 	.word	0x50000300

00005114 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    5114:	4b01      	ldr	r3, [pc, #4]	; (511c <hfclk_on_callback+0x8>)
    5116:	2201      	movs	r2, #1
    5118:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    511a:	4770      	bx	lr
    511c:	4000c000 	.word	0x4000c000

00005120 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    5120:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    5122:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    5124:	d10b      	bne.n	513e <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    5126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5128:	4906      	ldr	r1, [pc, #24]	; (5144 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    512a:	4807      	ldr	r0, [pc, #28]	; (5148 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    512c:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    512e:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    5132:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    5136:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    5138:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    513a:	2000      	movs	r0, #0
    513c:	4770      	bx	lr
		return -ENOTSUP;
    513e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    5142:	4770      	bx	lr
    5144:	0003d090 	.word	0x0003d090
    5148:	000f4240 	.word	0x000f4240

0000514c <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    514c:	4b04      	ldr	r3, [pc, #16]	; (5160 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    514e:	6900      	ldr	r0, [r0, #16]
    5150:	2200      	movs	r2, #0
    5152:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5156:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    515a:	f002 bc4f 	b.w	79fc <z_impl_k_sem_give>
    515e:	bf00      	nop
    5160:	4000c000 	.word	0x4000c000

00005164 <temp_nrf5_sample_fetch>:
{
    5164:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    5166:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    5168:	6aab      	ldr	r3, [r5, #40]	; 0x28
    516a:	b363      	cbz	r3, 51c6 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    516c:	2939      	cmp	r1, #57	; 0x39
    516e:	d001      	beq.n	5174 <temp_nrf5_sample_fetch+0x10>
    5170:	290c      	cmp	r1, #12
    5172:	d12b      	bne.n	51cc <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    5174:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    5178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    517c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5180:	4630      	mov	r0, r6
    5182:	f002 fb83 	bl	788c <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    5186:	4b13      	ldr	r3, [pc, #76]	; (51d4 <temp_nrf5_sample_fetch+0x70>)
    5188:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    518a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    518c:	2303      	movs	r3, #3
    518e:	2400      	movs	r4, #0
    5190:	4669      	mov	r1, sp
    5192:	9403      	str	r4, [sp, #12]
    5194:	9302      	str	r3, [sp, #8]
    5196:	f003 fca8 	bl	8aea <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    519a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    519e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    51a2:	4628      	mov	r0, r5
    51a4:	f002 fc4c 	bl	7a40 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    51a8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    51aa:	f003 fcf6 	bl	8b9a <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    51ae:	4b0a      	ldr	r3, [pc, #40]	; (51d8 <temp_nrf5_sample_fetch+0x74>)
    51b0:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    51b4:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    51b6:	2201      	movs	r2, #1
    51b8:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    51ba:	4630      	mov	r0, r6
    51bc:	f002 fbe0 	bl	7980 <z_impl_k_mutex_unlock>
	return 0;
    51c0:	4620      	mov	r0, r4
}
    51c2:	b004      	add	sp, #16
    51c4:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    51c6:	f06f 000a 	mvn.w	r0, #10
    51ca:	e7fa      	b.n	51c2 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    51cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    51d0:	e7f7      	b.n	51c2 <temp_nrf5_sample_fetch+0x5e>
    51d2:	bf00      	nop
    51d4:	00005115 	.word	0x00005115
    51d8:	4000c000 	.word	0x4000c000

000051dc <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    51dc:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    51de:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    51e0:	2000      	movs	r0, #0
    51e2:	f7ff fba1 	bl	4928 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    51e6:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    51e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    51ec:	2100      	movs	r1, #0
    51ee:	4620      	mov	r0, r4
    51f0:	f004 fcf1 	bl	9bd6 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    51f4:	f104 0010 	add.w	r0, r4, #16
    51f8:	f004 fce6 	bl	9bc8 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    51fc:	2200      	movs	r2, #0
    51fe:	2101      	movs	r1, #1
    5200:	200c      	movs	r0, #12
    5202:	f7fe fc97 	bl	3b34 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    5206:	200c      	movs	r0, #12
    5208:	f7fe fc64 	bl	3ad4 <arch_irq_enable>
    p_reg->INTENSET = mask;
    520c:	4b02      	ldr	r3, [pc, #8]	; (5218 <temp_nrf5_init+0x3c>)
    520e:	2201      	movs	r2, #1
    5210:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    5214:	2000      	movs	r0, #0
    5216:	bd10      	pop	{r4, pc}
    5218:	4000c000 	.word	0x4000c000

0000521c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    521c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    521e:	794b      	ldrb	r3, [r1, #5]
    5220:	2b01      	cmp	r3, #1
    5222:	d026      	beq.n	5272 <uarte_nrfx_configure+0x56>
    5224:	2b03      	cmp	r3, #3
    5226:	d121      	bne.n	526c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5228:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    522a:	798b      	ldrb	r3, [r1, #6]
    522c:	2b03      	cmp	r3, #3
    522e:	d11d      	bne.n	526c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    5230:	79ce      	ldrb	r6, [r1, #7]
    5232:	b10e      	cbz	r6, 5238 <uarte_nrfx_configure+0x1c>
    5234:	2e01      	cmp	r6, #1
    5236:	d119      	bne.n	526c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    5238:	790a      	ldrb	r2, [r1, #4]
    523a:	b112      	cbz	r2, 5242 <uarte_nrfx_configure+0x26>
    523c:	2a02      	cmp	r2, #2
    523e:	d115      	bne.n	526c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5240:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5242:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    5244:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    5246:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    524a:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    524c:	d067      	beq.n	531e <uarte_nrfx_configure+0x102>
    524e:	d82d      	bhi.n	52ac <uarte_nrfx_configure+0x90>
    5250:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    5254:	d066      	beq.n	5324 <uarte_nrfx_configure+0x108>
    5256:	d816      	bhi.n	5286 <uarte_nrfx_configure+0x6a>
    5258:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    525c:	d064      	beq.n	5328 <uarte_nrfx_configure+0x10c>
    525e:	d80a      	bhi.n	5276 <uarte_nrfx_configure+0x5a>
    5260:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    5264:	d063      	beq.n	532e <uarte_nrfx_configure+0x112>
    5266:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    526a:	d063      	beq.n	5334 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    526c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5270:	e054      	b.n	531c <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    5272:	2500      	movs	r5, #0
    5274:	e7d9      	b.n	522a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    5276:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    527a:	d05e      	beq.n	533a <uarte_nrfx_configure+0x11e>
    527c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    5280:	d1f4      	bne.n	526c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    5282:	4b38      	ldr	r3, [pc, #224]	; (5364 <uarte_nrfx_configure+0x148>)
    5284:	e03c      	b.n	5300 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5286:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    528a:	d059      	beq.n	5340 <uarte_nrfx_configure+0x124>
    528c:	d807      	bhi.n	529e <uarte_nrfx_configure+0x82>
    528e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    5292:	d057      	beq.n	5344 <uarte_nrfx_configure+0x128>
    5294:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    5298:	d1e8      	bne.n	526c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    529a:	4b33      	ldr	r3, [pc, #204]	; (5368 <uarte_nrfx_configure+0x14c>)
    529c:	e030      	b.n	5300 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    529e:	f647 2412 	movw	r4, #31250	; 0x7a12
    52a2:	42a3      	cmp	r3, r4
    52a4:	d1e2      	bne.n	526c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    52a6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    52aa:	e029      	b.n	5300 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    52ac:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    52b0:	d04a      	beq.n	5348 <uarte_nrfx_configure+0x12c>
    52b2:	d813      	bhi.n	52dc <uarte_nrfx_configure+0xc0>
    52b4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    52b8:	d049      	beq.n	534e <uarte_nrfx_configure+0x132>
    52ba:	d809      	bhi.n	52d0 <uarte_nrfx_configure+0xb4>
    52bc:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    52c0:	42a3      	cmp	r3, r4
    52c2:	d046      	beq.n	5352 <uarte_nrfx_configure+0x136>
    52c4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    52c8:	d1d0      	bne.n	526c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    52ca:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    52ce:	e017      	b.n	5300 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    52d0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    52d4:	d1ca      	bne.n	526c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    52d6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    52da:	e011      	b.n	5300 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    52dc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    52e0:	d03a      	beq.n	5358 <uarte_nrfx_configure+0x13c>
    52e2:	d808      	bhi.n	52f6 <uarte_nrfx_configure+0xda>
    52e4:	4c21      	ldr	r4, [pc, #132]	; (536c <uarte_nrfx_configure+0x150>)
    52e6:	42a3      	cmp	r3, r4
    52e8:	d039      	beq.n	535e <uarte_nrfx_configure+0x142>
    52ea:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    52ee:	d1bd      	bne.n	526c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    52f0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    52f4:	e004      	b.n	5300 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    52f6:	4c1e      	ldr	r4, [pc, #120]	; (5370 <uarte_nrfx_configure+0x154>)
    52f8:	42a3      	cmp	r3, r4
    52fa:	d1b7      	bne.n	526c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    52fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    5300:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    5302:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    5306:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    5308:	4335      	orrs	r5, r6
    530a:	681b      	ldr	r3, [r3, #0]
    530c:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    530e:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    5312:	c903      	ldmia	r1, {r0, r1}
    5314:	1d23      	adds	r3, r4, #4
    5316:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    531a:	2000      	movs	r0, #0
}
    531c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    531e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    5322:	e7ed      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    5324:	4b13      	ldr	r3, [pc, #76]	; (5374 <uarte_nrfx_configure+0x158>)
    5326:	e7eb      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    5328:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    532c:	e7e8      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    532e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    5332:	e7e5      	b.n	5300 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    5334:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    5338:	e7e2      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    533a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    533e:	e7df      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    5340:	4b0d      	ldr	r3, [pc, #52]	; (5378 <uarte_nrfx_configure+0x15c>)
    5342:	e7dd      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    5344:	4b0d      	ldr	r3, [pc, #52]	; (537c <uarte_nrfx_configure+0x160>)
    5346:	e7db      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    5348:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    534c:	e7d8      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    534e:	4b0c      	ldr	r3, [pc, #48]	; (5380 <uarte_nrfx_configure+0x164>)
    5350:	e7d6      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    5352:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    5356:	e7d3      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    5358:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    535c:	e7d0      	b.n	5300 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    535e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    5362:	e7cd      	b.n	5300 <uarte_nrfx_configure+0xe4>
    5364:	0013b000 	.word	0x0013b000
    5368:	004ea000 	.word	0x004ea000
    536c:	0003d090 	.word	0x0003d090
    5370:	000f4240 	.word	0x000f4240
    5374:	00275000 	.word	0x00275000
    5378:	0075c000 	.word	0x0075c000
    537c:	003af000 	.word	0x003af000
    5380:	013a9000 	.word	0x013a9000

00005384 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5388:	2200      	movs	r2, #0
    538a:	b087      	sub	sp, #28
    538c:	4680      	mov	r8, r0
    538e:	2101      	movs	r1, #1
    5390:	2002      	movs	r0, #2
    5392:	f7fe fbcf 	bl	3b34 <z_arm_irq_priority_set>
    5396:	2002      	movs	r0, #2
    5398:	f7fe fb9c 	bl	3ad4 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    539c:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    53a0:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    53a4:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    53a6:	2100      	movs	r1, #0
    53a8:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    53ac:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    53b0:	f8d7 900c 	ldr.w	r9, [r7, #12]
	ret = pinctrl_lookup_state(config, id, &state);
    53b4:	466a      	mov	r2, sp
    53b6:	4648      	mov	r0, r9
    53b8:	f004 f914 	bl	95e4 <pinctrl_lookup_state>
	if (ret < 0) {
    53bc:	1e05      	subs	r5, r0, #0
    53be:	db25      	blt.n	540c <uarte_0_init+0x88>
	return pinctrl_apply_state_direct(config, state);
    53c0:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    53c2:	f8d9 2000 	ldr.w	r2, [r9]
    53c6:	7919      	ldrb	r1, [r3, #4]
    53c8:	6818      	ldr	r0, [r3, #0]
    53ca:	f7ff fde9 	bl	4fa0 <pinctrl_configure_pins>
	if (err < 0) {
    53ce:	1e05      	subs	r5, r0, #0
    53d0:	db1c      	blt.n	540c <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    53d2:	1d31      	adds	r1, r6, #4
    53d4:	4640      	mov	r0, r8
    53d6:	f7ff ff21 	bl	521c <uarte_nrfx_configure>
	if (err) {
    53da:	4605      	mov	r5, r0
    53dc:	b9b0      	cbnz	r0, 540c <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    53de:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    53e0:	0799      	lsls	r1, r3, #30
    53e2:	d52b      	bpl.n	543c <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    53e4:	f106 0018 	add.w	r0, r6, #24
    53e8:	f001 fc06 	bl	6bf8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    53ec:	4b27      	ldr	r3, [pc, #156]	; (548c <uarte_0_init+0x108>)
    53ee:	4298      	cmp	r0, r3
    53f0:	d010      	beq.n	5414 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    53f2:	4b27      	ldr	r3, [pc, #156]	; (5490 <uarte_0_init+0x10c>)
    53f4:	9305      	str	r3, [sp, #20]
    53f6:	2302      	movs	r3, #2
    53f8:	9304      	str	r3, [sp, #16]
    53fa:	4826      	ldr	r0, [pc, #152]	; (5494 <uarte_0_init+0x110>)
    53fc:	462b      	mov	r3, r5
    53fe:	aa04      	add	r2, sp, #16
    5400:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    5404:	f06f 0504 	mvn.w	r5, #4
    5408:	f7fd fd48 	bl	2e9c <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
    540c:	4628      	mov	r0, r5
    540e:	b007      	add	sp, #28
    5410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5414:	7e33      	ldrb	r3, [r6, #24]
    5416:	00db      	lsls	r3, r3, #3
    5418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    541c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    5420:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    5424:	f504 7190 	add.w	r1, r4, #288	; 0x120
    5428:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    542c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    5430:	7e32      	ldrb	r2, [r6, #24]
    5432:	2301      	movs	r3, #1
    5434:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    5436:	4a18      	ldr	r2, [pc, #96]	; (5498 <uarte_0_init+0x114>)
    5438:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    543c:	2308      	movs	r3, #8
    543e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    5442:	7a3b      	ldrb	r3, [r7, #8]
    5444:	b953      	cbnz	r3, 545c <uarte_0_init+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5446:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    544a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    544e:	6973      	ldr	r3, [r6, #20]
    5450:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5454:	2301      	movs	r3, #1
    5456:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    545a:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    545c:	687b      	ldr	r3, [r7, #4]
    545e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    5460:	bf5c      	itt	pl
    5462:	f44f 7380 	movpl.w	r3, #256	; 0x100
    5466:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	06db      	lsls	r3, r3, #27
    546e:	bf44      	itt	mi
    5470:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    5474:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5478:	6933      	ldr	r3, [r6, #16]
    547a:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    547e:	2300      	movs	r3, #0
    5480:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5484:	2301      	movs	r3, #1
    5486:	60a3      	str	r3, [r4, #8]
    5488:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    548a:	e7bf      	b.n	540c <uarte_0_init+0x88>
    548c:	0bad0000 	.word	0x0bad0000
    5490:	0000adf9 	.word	0x0000adf9
    5494:	0000a1d8 	.word	0x0000a1d8
    5498:	4001f000 	.word	0x4001f000

0000549c <uarte_nrfx_poll_out>:
{
    549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    549e:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    54a0:	6907      	ldr	r7, [r0, #16]
{
    54a2:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    54a4:	f004 fb79 	bl	9b9a <k_is_in_isr>
    54a8:	b9b0      	cbnz	r0, 54d8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    54aa:	4b2e      	ldr	r3, [pc, #184]	; (5564 <uarte_nrfx_poll_out+0xc8>)
    54ac:	781b      	ldrb	r3, [r3, #0]
    54ae:	b19b      	cbz	r3, 54d8 <uarte_nrfx_poll_out+0x3c>
{
    54b0:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    54b2:	6860      	ldr	r0, [r4, #4]
    54b4:	f004 f8cc 	bl	9650 <is_tx_ready.isra.0>
    54b8:	bb00      	cbnz	r0, 54fc <uarte_nrfx_poll_out+0x60>
    54ba:	2001      	movs	r0, #1
    54bc:	f004 f9be 	bl	983c <nrfx_busy_wait>
    54c0:	3e01      	subs	r6, #1
    54c2:	d1f6      	bne.n	54b2 <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    54c4:	2100      	movs	r1, #0
    54c6:	2021      	movs	r0, #33	; 0x21
    54c8:	f002 fda4 	bl	8014 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    54cc:	e7f0      	b.n	54b0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    54ce:	f386 8811 	msr	BASEPRI, r6
    54d2:	f3bf 8f6f 	isb	sy
}
    54d6:	e7f5      	b.n	54c4 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    54d8:	f04f 0320 	mov.w	r3, #32
    54dc:	f3ef 8611 	mrs	r6, BASEPRI
    54e0:	f383 8812 	msr	BASEPRI_MAX, r3
    54e4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    54e8:	6860      	ldr	r0, [r4, #4]
    54ea:	4631      	mov	r1, r6
    54ec:	f004 f8b0 	bl	9650 <is_tx_ready.isra.0>
    54f0:	b990      	cbnz	r0, 5518 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    54f2:	f386 8811 	msr	BASEPRI, r6
    54f6:	f3bf 8f6f 	isb	sy
}
    54fa:	e7ed      	b.n	54d8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    54fc:	f04f 0320 	mov.w	r3, #32
    5500:	f3ef 8611 	mrs	r6, BASEPRI
    5504:	f383 8812 	msr	BASEPRI_MAX, r3
    5508:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    550c:	6860      	ldr	r0, [r4, #4]
    550e:	4631      	mov	r1, r6
    5510:	f004 f89e 	bl	9650 <is_tx_ready.isra.0>
    5514:	2800      	cmp	r0, #0
    5516:	d0da      	beq.n	54ce <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    5518:	693b      	ldr	r3, [r7, #16]
    551a:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    551c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    551e:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    5520:	6813      	ldr	r3, [r2, #0]
    5522:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5526:	2001      	movs	r0, #1
    5528:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    552c:	2000      	movs	r0, #0
    552e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    5532:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    5536:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    553a:	6852      	ldr	r2, [r2, #4]
    553c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    5540:	06d2      	lsls	r2, r2, #27
    5542:	d508      	bpl.n	5556 <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    5544:	6862      	ldr	r2, [r4, #4]
    5546:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5548:	2008      	movs	r0, #8
    554a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    554e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5552:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5556:	2201      	movs	r2, #1
    5558:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    555a:	f381 8811 	msr	BASEPRI, r1
    555e:	f3bf 8f6f 	isb	sy
}
    5562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5564:	20001651 	.word	0x20001651

00005568 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5568:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    556a:	2301      	movs	r3, #1
    556c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    556e:	4a0e      	ldr	r2, [pc, #56]	; (55a8 <compare_int_lock+0x40>)
    5570:	f3bf 8f5b 	dmb	ish
    5574:	43dc      	mvns	r4, r3
    5576:	e852 1f00 	ldrex	r1, [r2]
    557a:	ea01 0504 	and.w	r5, r1, r4
    557e:	e842 5600 	strex	r6, r5, [r2]
    5582:	2e00      	cmp	r6, #0
    5584:	d1f7      	bne.n	5576 <compare_int_lock+0xe>
    5586:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    558a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    558e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    5590:	4806      	ldr	r0, [pc, #24]	; (55ac <compare_int_lock+0x44>)
    5592:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5596:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    559a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    559e:	420b      	tst	r3, r1
}
    55a0:	bf14      	ite	ne
    55a2:	2001      	movne	r0, #1
    55a4:	2000      	moveq	r0, #0
    55a6:	bd70      	pop	{r4, r5, r6, pc}
    55a8:	20000ef8 	.word	0x20000ef8
    55ac:	40011000 	.word	0x40011000

000055b0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    55b0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    55b2:	490e      	ldr	r1, [pc, #56]	; (55ec <sys_clock_timeout_handler+0x3c>)
    55b4:	e9d1 3400 	ldrd	r3, r4, [r1]
    55b8:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    55ba:	18c3      	adds	r3, r0, r3
    55bc:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    55c0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    55c4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    55c8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    55cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    55d0:	d209      	bcs.n	55e6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    55d2:	4b07      	ldr	r3, [pc, #28]	; (55f0 <sys_clock_timeout_handler+0x40>)
    55d4:	681b      	ldr	r3, [r3, #0]
    55d6:	0a1a      	lsrs	r2, r3, #8
    55d8:	061b      	lsls	r3, r3, #24
    55da:	199c      	adds	r4, r3, r6
    55dc:	4b05      	ldr	r3, [pc, #20]	; (55f4 <sys_clock_timeout_handler+0x44>)
    55de:	f142 0500 	adc.w	r5, r2, #0
    55e2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    55e6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    55e8:	f002 be6e 	b.w	82c8 <sys_clock_announce>
    55ec:	20000720 	.word	0x20000720
    55f0:	20000efc 	.word	0x20000efc
    55f4:	20000728 	.word	0x20000728

000055f8 <compare_int_unlock>:
	if (key) {
    55f8:	b311      	cbz	r1, 5640 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    55fa:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    55fe:	2301      	movs	r3, #1
    5600:	4a10      	ldr	r2, [pc, #64]	; (5644 <compare_int_unlock+0x4c>)
    5602:	4083      	lsls	r3, r0
    5604:	e852 cf00 	ldrex	ip, [r2]
    5608:	ea4c 0c03 	orr.w	ip, ip, r3
    560c:	e842 c100 	strex	r1, ip, [r2]
    5610:	2900      	cmp	r1, #0
    5612:	d1f7      	bne.n	5604 <compare_int_unlock+0xc>
    5614:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5618:	4a0b      	ldr	r2, [pc, #44]	; (5648 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    561a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    561e:	4083      	lsls	r3, r0
    5620:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5624:	4b09      	ldr	r3, [pc, #36]	; (564c <compare_int_unlock+0x54>)
    5626:	f3bf 8f5b 	dmb	ish
    562a:	681b      	ldr	r3, [r3, #0]
    562c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5630:	40c3      	lsrs	r3, r0
    5632:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5634:	bf42      	ittt	mi
    5636:	4b06      	ldrmi	r3, [pc, #24]	; (5650 <compare_int_unlock+0x58>)
    5638:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    563c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5640:	4770      	bx	lr
    5642:	bf00      	nop
    5644:	20000ef8 	.word	0x20000ef8
    5648:	40011000 	.word	0x40011000
    564c:	20000ef4 	.word	0x20000ef4
    5650:	e000e100 	.word	0xe000e100

00005654 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5654:	4b0d      	ldr	r3, [pc, #52]	; (568c <z_nrf_rtc_timer_read+0x38>)
    5656:	6818      	ldr	r0, [r3, #0]
    5658:	0a01      	lsrs	r1, r0, #8
    565a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    565c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    5660:	4b0b      	ldr	r3, [pc, #44]	; (5690 <z_nrf_rtc_timer_read+0x3c>)
    5662:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5666:	1818      	adds	r0, r3, r0
    5668:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    566c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5670:	d20a      	bcs.n	5688 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5672:	4b08      	ldr	r3, [pc, #32]	; (5694 <z_nrf_rtc_timer_read+0x40>)
    5674:	e9d3 2300 	ldrd	r2, r3, [r3]
    5678:	4290      	cmp	r0, r2
    567a:	eb71 0303 	sbcs.w	r3, r1, r3
    567e:	d203      	bcs.n	5688 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5680:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5684:	f141 0100 	adc.w	r1, r1, #0
}
    5688:	4770      	bx	lr
    568a:	bf00      	nop
    568c:	20000efc 	.word	0x20000efc
    5690:	40011000 	.word	0x40011000
    5694:	20000728 	.word	0x20000728

00005698 <compare_set>:
{
    5698:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    569c:	4616      	mov	r6, r2
    569e:	461f      	mov	r7, r3
    56a0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    56a2:	f7ff ff61 	bl	5568 <compare_int_lock>
    56a6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    56a8:	f7ff ffd4 	bl	5654 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    56ac:	42b0      	cmp	r0, r6
    56ae:	eb71 0307 	sbcs.w	r3, r1, r7
    56b2:	d251      	bcs.n	5758 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    56b4:	4b3a      	ldr	r3, [pc, #232]	; (57a0 <compare_set+0x108>)
    56b6:	1a30      	subs	r0, r6, r0
    56b8:	eb67 0101 	sbc.w	r1, r7, r1
    56bc:	4298      	cmp	r0, r3
    56be:	f171 0100 	sbcs.w	r1, r1, #0
    56c2:	d26a      	bcs.n	579a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    56c4:	4b37      	ldr	r3, [pc, #220]	; (57a4 <compare_set+0x10c>)
    56c6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    56ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    56ce:	429f      	cmp	r7, r3
    56d0:	bf08      	it	eq
    56d2:	4296      	cmpeq	r6, r2
    56d4:	d04e      	beq.n	5774 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    56d6:	4934      	ldr	r1, [pc, #208]	; (57a8 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    56d8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    56dc:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    56e0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    56e4:	00ad      	lsls	r5, r5, #2
    56e6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    56ea:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    56ec:	b2ad      	uxth	r5, r5
    56ee:	f003 fff9 	bl	96e4 <event_clear>
	return absolute_time & COUNTER_MAX;
    56f2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    56f6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    56fa:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    56fe:	4a2b      	ldr	r2, [pc, #172]	; (57ac <compare_set+0x114>)
    5700:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5702:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    5706:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    5708:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    570c:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    570e:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    5712:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    5716:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    571a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    571e:	f06f 0002 	mvn.w	r0, #2
    5722:	eba0 0008 	sub.w	r0, r0, r8
    5726:	4460      	add	r0, ip
    5728:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    572c:	4290      	cmp	r0, r2
    572e:	d921      	bls.n	5774 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5730:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    5732:	b160      	cbz	r0, 574e <compare_set+0xb6>
     return p_reg->COUNTER;
    5734:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5738:	eba8 000b 	sub.w	r0, r8, fp
    573c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    5740:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5744:	d916      	bls.n	5774 <compare_set+0xdc>
					event_clear(chan);
    5746:	4620      	mov	r0, r4
    5748:	f003 ffcc 	bl	96e4 <event_clear>
    574c:	4a17      	ldr	r2, [pc, #92]	; (57ac <compare_set+0x114>)
			cc_val = now + cc_inc;
    574e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    5752:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    5756:	e7d9      	b.n	570c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    5758:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    575a:	4a15      	ldr	r2, [pc, #84]	; (57b0 <compare_set+0x118>)
    575c:	f3bf 8f5b 	dmb	ish
    5760:	40a3      	lsls	r3, r4
    5762:	e852 0f00 	ldrex	r0, [r2]
    5766:	4318      	orrs	r0, r3
    5768:	e842 0100 	strex	r1, r0, [r2]
    576c:	2900      	cmp	r1, #0
    576e:	d1f8      	bne.n	5762 <compare_set+0xca>
    5770:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    5774:	490b      	ldr	r1, [pc, #44]	; (57a4 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    5776:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    5778:	0123      	lsls	r3, r4, #4
    577a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    577e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    5782:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    5784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5786:	6053      	str	r3, [r2, #4]
	return ret;
    5788:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    578a:	4620      	mov	r0, r4
    578c:	9900      	ldr	r1, [sp, #0]
    578e:	f7ff ff33 	bl	55f8 <compare_int_unlock>
}
    5792:	4628      	mov	r0, r5
    5794:	b003      	add	sp, #12
    5796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    579a:	f06f 0515 	mvn.w	r5, #21
    579e:	e7f4      	b.n	578a <compare_set+0xf2>
    57a0:	00800001 	.word	0x00800001
    57a4:	20000710 	.word	0x20000710
    57a8:	40011000 	.word	0x40011000
    57ac:	007ffffd 	.word	0x007ffffd
    57b0:	20000ef4 	.word	0x20000ef4

000057b4 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    57b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    57b6:	4c1b      	ldr	r4, [pc, #108]	; (5824 <sys_clock_driver_init+0x70>)
    57b8:	4b1b      	ldr	r3, [pc, #108]	; (5828 <sys_clock_driver_init+0x74>)
    57ba:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    57be:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    57c2:	4b1a      	ldr	r3, [pc, #104]	; (582c <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    57c4:	2500      	movs	r5, #0
    57c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    57ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    57ce:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    57d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    57d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    57da:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57de:	4b14      	ldr	r3, [pc, #80]	; (5830 <sys_clock_driver_init+0x7c>)
    57e0:	2602      	movs	r6, #2
    57e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    57e6:	2101      	movs	r1, #1
    57e8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    57ec:	2011      	movs	r0, #17
    57ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    57f2:	462a      	mov	r2, r5
    57f4:	f7fe f99e 	bl	3b34 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    57f8:	2011      	movs	r0, #17
    57fa:	f7fe f96b 	bl	3ad4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    57fe:	4a0d      	ldr	r2, [pc, #52]	; (5834 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5800:	2301      	movs	r3, #1
    5802:	60a3      	str	r3, [r4, #8]
    5804:	6023      	str	r3, [r4, #0]
    5806:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5808:	4b0b      	ldr	r3, [pc, #44]	; (5838 <sys_clock_driver_init+0x84>)
    580a:	4a0c      	ldr	r2, [pc, #48]	; (583c <sys_clock_driver_init+0x88>)
    580c:	9300      	str	r3, [sp, #0]
    580e:	9501      	str	r5, [sp, #4]
    5810:	2300      	movs	r3, #0
    5812:	4628      	mov	r0, r5
    5814:	f7ff ff40 	bl	5698 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5818:	4630      	mov	r0, r6
    581a:	f7ff f88d 	bl	4938 <z_nrf_clock_control_lf_on>

	return 0;
}
    581e:	4628      	mov	r0, r5
    5820:	b002      	add	sp, #8
    5822:	bd70      	pop	{r4, r5, r6, pc}
    5824:	40011000 	.word	0x40011000
    5828:	000f0003 	.word	0x000f0003
    582c:	20000710 	.word	0x20000710
    5830:	e000e100 	.word	0xe000e100
    5834:	20000ef8 	.word	0x20000ef8
    5838:	000055b1 	.word	0x000055b1
    583c:	007fffff 	.word	0x007fffff

00005840 <rtc_nrf_isr>:
{
    5840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5844:	4c2f      	ldr	r4, [pc, #188]	; (5904 <rtc_nrf_isr+0xc4>)
    5846:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    584a:	0799      	lsls	r1, r3, #30
    584c:	d50b      	bpl.n	5866 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    584e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5852:	b143      	cbz	r3, 5866 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5854:	4a2c      	ldr	r2, [pc, #176]	; (5908 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5856:	2300      	movs	r3, #0
    5858:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    585c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5860:	6813      	ldr	r3, [r2, #0]
    5862:	3301      	adds	r3, #1
    5864:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    5866:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    586a:	03da      	lsls	r2, r3, #15
    586c:	d52a      	bpl.n	58c4 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    586e:	f3bf 8f5b 	dmb	ish
    5872:	4b26      	ldr	r3, [pc, #152]	; (590c <rtc_nrf_isr+0xcc>)
    5874:	e853 2f00 	ldrex	r2, [r3]
    5878:	f022 0101 	bic.w	r1, r2, #1
    587c:	e843 1000 	strex	r0, r1, [r3]
    5880:	2800      	cmp	r0, #0
    5882:	d1f7      	bne.n	5874 <rtc_nrf_isr+0x34>
    5884:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    5888:	07d3      	lsls	r3, r2, #31
    588a:	d402      	bmi.n	5892 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    588c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    5890:	b1c3      	cbz	r3, 58c4 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5892:	2500      	movs	r5, #0
    5894:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    5898:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    589c:	f7ff feda 	bl	5654 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    58a0:	f04f 0320 	mov.w	r3, #32
    58a4:	f3ef 8211 	mrs	r2, BASEPRI
    58a8:	f383 8812 	msr	BASEPRI_MAX, r3
    58ac:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    58b0:	4b17      	ldr	r3, [pc, #92]	; (5910 <rtc_nrf_isr+0xd0>)
    58b2:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    58b6:	42b0      	cmp	r0, r6
    58b8:	41b9      	sbcs	r1, r7
    58ba:	d206      	bcs.n	58ca <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    58bc:	f382 8811 	msr	BASEPRI, r2
    58c0:	f3bf 8f6f 	isb	sy
}
    58c4:	b003      	add	sp, #12
    58c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    58ca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    58ce:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    58d2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    58d6:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    58da:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    58dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    58e0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    58e4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    58e8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    58ec:	f382 8811 	msr	BASEPRI, r2
    58f0:	f3bf 8f6f 	isb	sy
		if (handler) {
    58f4:	2900      	cmp	r1, #0
    58f6:	d0e5      	beq.n	58c4 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    58f8:	9000      	str	r0, [sp, #0]
    58fa:	4632      	mov	r2, r6
    58fc:	463b      	mov	r3, r7
    58fe:	4628      	mov	r0, r5
    5900:	4788      	blx	r1
    5902:	e7df      	b.n	58c4 <rtc_nrf_isr+0x84>
    5904:	40011000 	.word	0x40011000
    5908:	20000efc 	.word	0x20000efc
    590c:	20000ef4 	.word	0x20000ef4
    5910:	20000710 	.word	0x20000710

00005914 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    5914:	1c43      	adds	r3, r0, #1
{
    5916:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    5918:	d022      	beq.n	5960 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    591a:	2801      	cmp	r0, #1
    591c:	dd22      	ble.n	5964 <sys_clock_set_timeout+0x50>
    591e:	4a12      	ldr	r2, [pc, #72]	; (5968 <sys_clock_set_timeout+0x54>)
    5920:	4b12      	ldr	r3, [pc, #72]	; (596c <sys_clock_set_timeout+0x58>)
    5922:	4290      	cmp	r0, r2
    5924:	bfd4      	ite	le
    5926:	4604      	movle	r4, r0
    5928:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    592a:	f7ff fe93 	bl	5654 <z_nrf_rtc_timer_read>
    592e:	4b10      	ldr	r3, [pc, #64]	; (5970 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    5930:	490e      	ldr	r1, [pc, #56]	; (596c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5932:	e9d3 2300 	ldrd	r2, r3, [r3]
    5936:	1a80      	subs	r0, r0, r2
		cyc = 0;
    5938:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    593c:	bf28      	it	cs
    593e:	2400      	movcs	r4, #0
	cyc += unannounced;
    5940:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    5942:	428c      	cmp	r4, r1
    5944:	bf28      	it	cs
    5946:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    5948:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    594a:	490a      	ldr	r1, [pc, #40]	; (5974 <sys_clock_set_timeout+0x60>)
    594c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    594e:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5952:	9001      	str	r0, [sp, #4]
    5954:	f143 0300 	adc.w	r3, r3, #0
    5958:	f7ff fe9e 	bl	5698 <compare_set>
}
    595c:	b002      	add	sp, #8
    595e:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    5960:	4c02      	ldr	r4, [pc, #8]	; (596c <sys_clock_set_timeout+0x58>)
    5962:	e7e2      	b.n	592a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    5964:	2401      	movs	r4, #1
    5966:	e7e0      	b.n	592a <sys_clock_set_timeout+0x16>
    5968:	007ffffe 	.word	0x007ffffe
    596c:	007fffff 	.word	0x007fffff
    5970:	20000720 	.word	0x20000720
    5974:	000055b1 	.word	0x000055b1

00005978 <sys_clock_elapsed>:
{
    5978:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    597a:	f7ff fe6b 	bl	5654 <z_nrf_rtc_timer_read>
    597e:	4b02      	ldr	r3, [pc, #8]	; (5988 <sys_clock_elapsed+0x10>)
    5980:	681b      	ldr	r3, [r3, #0]
}
    5982:	1ac0      	subs	r0, r0, r3
    5984:	bd08      	pop	{r3, pc}
    5986:	bf00      	nop
    5988:	20000720 	.word	0x20000720

0000598c <sys_clock_disable>:
{
    598c:	b510      	push	{r4, lr}
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    598e:	4c08      	ldr	r4, [pc, #32]	; (59b0 <sys_clock_disable+0x24>)
    5990:	2301      	movs	r3, #1
    5992:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
    5994:	2011      	movs	r0, #17
    5996:	f7fe f8ab 	bl	3af0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    599a:	4b06      	ldr	r3, [pc, #24]	; (59b4 <sys_clock_disable+0x28>)
    599c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    59a0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    59a4:	4b04      	ldr	r3, [pc, #16]	; (59b8 <sys_clock_disable+0x2c>)
    59a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    59aa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    59ae:	bd10      	pop	{r4, pc}
    59b0:	40011000 	.word	0x40011000
    59b4:	000f0003 	.word	0x000f0003
    59b8:	e000e100 	.word	0xe000e100

000059bc <ms8607pt_read_eeprom>:

	return 0;
}

static int ms8607pt_read_eeprom(const struct device *dev) 
{
    59bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    59c0:	b085      	sub	sp, #20
	struct ms8607pt_data *data = dev->data;
    59c2:	6904      	ldr	r4, [r0, #16]
{
    59c4:	af00      	add	r7, sp, #0
    59c6:	4606      	mov	r6, r0
    59c8:	f104 0802 	add.w	r8, r4, #2
	struct ms8607pt_data *data = dev->data;
    59cc:	25a0      	movs	r5, #160	; 0xa0
	buffer[0] = 0;
    59ce:	f04f 0a00 	mov.w	sl, #0
	rc = write_command(dev, command);
    59d2:	6870      	ldr	r0, [r6, #4]
	buffer[0] = 0;
    59d4:	f8a7 a000 	strh.w	sl, [r7]
	rc = write_command(dev, command);
    59d8:	4629      	mov	r1, r5
    59da:	f003 feb5 	bl	9748 <write_command.isra.0>
	if (rc != 0) {
    59de:	4683      	mov	fp, r0
    59e0:	b1a0      	cbz	r0, 5a0c <ms8607pt_read_eeprom+0x50>
		LOG_ERR("Failed to call command 0x%02x - error %d", command, rc);
    59e2:	466c      	mov	r4, sp
    59e4:	b088      	sub	sp, #32
    59e6:	466a      	mov	r2, sp
    59e8:	4b3d      	ldr	r3, [pc, #244]	; (5ae0 <ms8607pt_read_eeprom+0x124>)
    59ea:	61d0      	str	r0, [r2, #28]
    59ec:	e9c2 3505 	strd	r3, r5, [r2, #20]
    59f0:	2304      	movs	r3, #4
    59f2:	f842 3f10 	str.w	r3, [r2, #16]!
    59f6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
		LOG_ERR("Failed to read buffer - error %d", rc);
    59fa:	483a      	ldr	r0, [pc, #232]	; (5ae4 <ms8607pt_read_eeprom+0x128>)
    59fc:	f003 fe91 	bl	9722 <z_log_msg_static_create.constprop.0>
    5a00:	46a5      	mov	sp, r4
		LOG_ERR("Invalid CRC 0x%2x - 0x%02x", cal_crc, crc);
		return -EINVAL;
	}
	data->coeff_is_ready = true;
	return 0;
}
    5a02:	4658      	mov	r0, fp
    5a04:	3714      	adds	r7, #20
    5a06:	46bd      	mov	sp, r7
    5a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	rc = read_register(dev, buffer, sizeof(buffer));
    5a0c:	6873      	ldr	r3, [r6, #4]
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
	msg.len = num_bytes;
    5a0e:	2202      	movs	r2, #2
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    5a10:	f04f 0903 	mov.w	r9, #3
 * @return a value from i2c_read()
 */
static inline int i2c_read_dt(const struct i2c_dt_spec *spec,
			      uint8_t *buf, uint32_t num_bytes)
{
	return i2c_read(spec->bus, buf, num_bytes, spec->addr);
    5a14:	6818      	ldr	r0, [r3, #0]
    5a16:	889b      	ldrh	r3, [r3, #4]
	msg.buf = buf;
    5a18:	607f      	str	r7, [r7, #4]
	msg.len = num_bytes;
    5a1a:	60ba      	str	r2, [r7, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    5a1c:	f887 900c 	strb.w	r9, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    5a20:	6882      	ldr	r2, [r0, #8]
    5a22:	1d39      	adds	r1, r7, #4
    5a24:	f8d2 b008 	ldr.w	fp, [r2, #8]
    5a28:	2201      	movs	r2, #1
    5a2a:	47d8      	blx	fp
	if (rc != 0) {
    5a2c:	4683      	mov	fp, r0
    5a2e:	b150      	cbz	r0, 5a46 <ms8607pt_read_eeprom+0x8a>
		LOG_ERR("Failed to read buffer - error %d", rc);
    5a30:	466c      	mov	r4, sp
    5a32:	b088      	sub	sp, #32
    5a34:	466a      	mov	r2, sp
    5a36:	4b2c      	ldr	r3, [pc, #176]	; (5ae8 <ms8607pt_read_eeprom+0x12c>)
    5a38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5a3c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5a40:	f842 9f10 	str.w	r9, [r2, #16]!
    5a44:	e7d9      	b.n	59fa <ms8607pt_read_eeprom+0x3e>
	*coeff = (buffer[0] << 8) | buffer[1];
    5a46:	883b      	ldrh	r3, [r7, #0]
    5a48:	ba5a      	rev16	r2, r3
    5a4a:	f828 2f02 	strh.w	r2, [r8, #2]!
	if (*coeff == 0) {
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d040      	beq.n	5ad4 <ms8607pt_read_eeprom+0x118>
	for(int i = 0 ; i < COEFFICIENT_NUMBERS ;i++)
    5a52:	3502      	adds	r5, #2
    5a54:	b2ed      	uxtb	r5, r5
    5a56:	2dae      	cmp	r5, #174	; 0xae
    5a58:	d1bb      	bne.n	59d2 <ms8607pt_read_eeprom+0x16>
	crc_read = n_prom[0];
    5a5a:	88a0      	ldrh	r0, [r4, #4]
	n_prom[COEFFICIENT_NUMBERS] = 0;
    5a5c:	f8a4 b012 	strh.w	fp, [r4, #18]
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
    5a60:	f3c0 030b 	ubfx	r3, r0, #0, #12
    5a64:	80a3      	strh	r3, [r4, #4]
		rc = ms8607pt_read_eeprom_coeff(dev, PROM_ADDRESS_READ_ADDRESS_0 + i * 2, data->eeprom_coeff + i);
    5a66:	1d25      	adds	r5, r4, #4
	n_prom[0] = (0x0FFF & (n_prom[0]));    // Clear the CRC byte
    5a68:	465a      	mov	r2, fp
	n_rem = 0x00;
    5a6a:	465b      	mov	r3, fp
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
    5a6c:	f3c2 0146 	ubfx	r1, r2, #1, #7
		if (cnt%2 == 1)
    5a70:	07d6      	lsls	r6, r2, #31
			n_rem ^=  n_prom[cnt>>1] & 0x00FF ;
    5a72:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    5a76:	bf46      	itte	mi
    5a78:	b2c9      	uxtbmi	r1, r1
    5a7a:	404b      	eormi	r3, r1
			n_rem ^=  n_prom[cnt>>1]>>8 ;
    5a7c:	ea83 2311 	eorpl.w	r3, r3, r1, lsr #8
	n_rem = 0x00;
    5a80:	2108      	movs	r1, #8
			if( n_rem & 0x8000 )
    5a82:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5a86:	ea4f 0343 	mov.w	r3, r3, lsl #1
				n_rem = (n_rem << 1) ^ 0x3000;
    5a8a:	bf18      	it	ne
    5a8c:	f483 5340 	eorne.w	r3, r3, #12288	; 0x3000
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
    5a90:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
				n_rem = (n_rem << 1) ^ 0x3000;
    5a94:	bf18      	it	ne
    5a96:	b21b      	sxthne	r3, r3
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
    5a98:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
				n_rem <<= 1;
    5a9c:	b29b      	uxth	r3, r3
		for( n_bit = 8; n_bit > 0 ; n_bit-- ) {
    5a9e:	d1f0      	bne.n	5a82 <ms8607pt_read_eeprom+0xc6>
	for( cnt = 0 ; cnt < (COEFFICIENT_NUMBERS+1)*2 ; cnt++ ) {
    5aa0:	3201      	adds	r2, #1
    5aa2:	2a10      	cmp	r2, #16
    5aa4:	d1e2      	bne.n	5a6c <ms8607pt_read_eeprom+0xb0>
	n_rem >>= 12;
    5aa6:	0b1d      	lsrs	r5, r3, #12
	if (cal_crc != crc) {
    5aa8:	ebb5 3f10 	cmp.w	r5, r0, lsr #12
	n_prom[0] = crc_read;
    5aac:	80a0      	strh	r0, [r4, #4]
	uint8_t crc = (data->eeprom_coeff[CRC_INDEX] & 0xF000) >> 12;
    5aae:	ea4f 3110 	mov.w	r1, r0, lsr #12
	if (cal_crc != crc) {
    5ab2:	d012      	beq.n	5ada <ms8607pt_read_eeprom+0x11e>
		LOG_ERR("Invalid CRC 0x%2x - 0x%02x", cal_crc, crc);
    5ab4:	466c      	mov	r4, sp
    5ab6:	b088      	sub	sp, #32
    5ab8:	466a      	mov	r2, sp
    5aba:	4b0c      	ldr	r3, [pc, #48]	; (5aec <ms8607pt_read_eeprom+0x130>)
    5abc:	61d1      	str	r1, [r2, #28]
    5abe:	e9c2 3505 	strd	r3, r5, [r2, #20]
    5ac2:	2304      	movs	r3, #4
    5ac4:	f842 3f10 	str.w	r3, [r2, #16]!
    5ac8:	4806      	ldr	r0, [pc, #24]	; (5ae4 <ms8607pt_read_eeprom+0x128>)
    5aca:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    5ace:	f003 fe28 	bl	9722 <z_log_msg_static_create.constprop.0>
    5ad2:	46a5      	mov	sp, r4
		return -EINVAL;
    5ad4:	f06f 0b15 	mvn.w	fp, #21
    5ad8:	e793      	b.n	5a02 <ms8607pt_read_eeprom+0x46>
	data->coeff_is_ready = true;
    5ada:	2301      	movs	r3, #1
    5adc:	7523      	strb	r3, [r4, #20]
	return 0;
    5ade:	e790      	b.n	5a02 <ms8607pt_read_eeprom+0x46>
    5ae0:	0000ae36 	.word	0x0000ae36
    5ae4:	0000a1b0 	.word	0x0000a1b0
    5ae8:	0000ae5f 	.word	0x0000ae5f
    5aec:	0000ae80 	.word	0x0000ae80

00005af0 <ms8607pt_init>:
	.channel_get = ms8607pt_channel_get,
	.attr_set = ms8607pt_attr_set,
};

static int ms8607pt_init(const struct device *dev)
{
    5af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5af2:	b087      	sub	sp, #28
    5af4:	6843      	ldr	r3, [r0, #4]
	struct ms8607pt_data *data = dev->data;
    5af6:	6906      	ldr	r6, [r0, #16]
{
    5af8:	af00      	add	r7, sp, #0
    5afa:	4605      	mov	r5, r0
    5afc:	6818      	ldr	r0, [r3, #0]
    5afe:	f003 ffef 	bl	9ae0 <z_device_is_ready>
	const struct ms8607pt_config *cfg = dev->config;
	int rc = 0;
	if (!i2c_is_ready_dt(&cfg->i2c)) {
    5b02:	b980      	cbnz	r0, 5b26 <ms8607pt_init+0x36>
		LOG_ERR("I2C bus device not ready");
    5b04:	4b1e      	ldr	r3, [pc, #120]	; (5b80 <ms8607pt_init+0x90>)
    5b06:	617b      	str	r3, [r7, #20]
    5b08:	481e      	ldr	r0, [pc, #120]	; (5b84 <ms8607pt_init+0x94>)
    5b0a:	2302      	movs	r3, #2
    5b0c:	f107 0210 	add.w	r2, r7, #16
    5b10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    5b14:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("I2C bus device not ready");
    5b18:	613b      	str	r3, [r7, #16]
    5b1a:	f003 fe02 	bl	9722 <z_log_msg_static_create.constprop.0>
		LOG_ERR("Failed to erad EEPROM %d", rc);
		return rc;
	}

	return 0;
}
    5b1e:	4620      	mov	r0, r4
    5b20:	371c      	adds	r7, #28
    5b22:	46bd      	mov	sp, r7
    5b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_msleep(5);
    5b26:	2005      	movs	r0, #5
    5b28:	f003 fdfe 	bl	9728 <k_msleep.isra.0>
	rc = write_command(dev, PSENSOR_RESET_COMMAND);
    5b2c:	6868      	ldr	r0, [r5, #4]
    5b2e:	211e      	movs	r1, #30
    5b30:	f003 fe0a 	bl	9748 <write_command.isra.0>
	if (rc != 0) {
    5b34:	4604      	mov	r4, r0
    5b36:	b178      	cbz	r0, 5b58 <ms8607pt_init+0x68>
		LOG_ERR("Failed to call RESET command %d", rc);
    5b38:	466d      	mov	r5, sp
    5b3a:	b088      	sub	sp, #32
    5b3c:	466a      	mov	r2, sp
    5b3e:	4b12      	ldr	r3, [pc, #72]	; (5b88 <ms8607pt_init+0x98>)
		LOG_ERR("Failed to erad EEPROM %d", rc);
    5b40:	4810      	ldr	r0, [pc, #64]	; (5b84 <ms8607pt_init+0x94>)
    5b42:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5b46:	2303      	movs	r3, #3
    5b48:	f842 3f10 	str.w	r3, [r2, #16]!
    5b4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5b50:	f003 fde7 	bl	9722 <z_log_msg_static_create.constprop.0>
    5b54:	46ad      	mov	sp, r5
		return rc;
    5b56:	e7e2      	b.n	5b1e <ms8607pt_init+0x2e>
	k_msleep(5);
    5b58:	2005      	movs	r0, #5
    5b5a:	f003 fde5 	bl	9728 <k_msleep.isra.0>
	data->pressure = 0;
    5b5e:	2300      	movs	r3, #0
    5b60:	61f3      	str	r3, [r6, #28]
	data->temperature = 0;
    5b62:	61b3      	str	r3, [r6, #24]
	data->resolution = ms8607_pressure_resolution_osr_8192;
    5b64:	2305      	movs	r3, #5
	data->coeff_is_ready = false;
    5b66:	82b4      	strh	r4, [r6, #20]
	data->resolution = ms8607_pressure_resolution_osr_8192;
    5b68:	75b3      	strb	r3, [r6, #22]
	rc = ms8607pt_read_eeprom(dev);
    5b6a:	4628      	mov	r0, r5
    5b6c:	f7ff ff26 	bl	59bc <ms8607pt_read_eeprom>
	if (rc != 0) {
    5b70:	4604      	mov	r4, r0
    5b72:	2800      	cmp	r0, #0
    5b74:	d0d3      	beq.n	5b1e <ms8607pt_init+0x2e>
		LOG_ERR("Failed to erad EEPROM %d", rc);
    5b76:	466d      	mov	r5, sp
    5b78:	b088      	sub	sp, #32
    5b7a:	466a      	mov	r2, sp
    5b7c:	4b03      	ldr	r3, [pc, #12]	; (5b8c <ms8607pt_init+0x9c>)
    5b7e:	e7df      	b.n	5b40 <ms8607pt_init+0x50>
    5b80:	0000ae9b 	.word	0x0000ae9b
    5b84:	0000a1b0 	.word	0x0000a1b0
    5b88:	0000aeb4 	.word	0x0000aeb4
    5b8c:	0000aed4 	.word	0x0000aed4

00005b90 <ms8607pt_conversion_and_read_adc>:
{
    5b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b94:	b084      	sub	sp, #16
    5b96:	af00      	add	r7, sp, #0
	buffer[0] = 0;
    5b98:	2300      	movs	r3, #0
{
    5b9a:	4605      	mov	r5, r0
	rc = write_command(dev, cmd);
    5b9c:	6840      	ldr	r0, [r0, #4]
	buffer[0] = 0;
    5b9e:	803b      	strh	r3, [r7, #0]
{
    5ba0:	4688      	mov	r8, r1
    5ba2:	4616      	mov	r6, r2
	buffer[2] = 0;
    5ba4:	70bb      	strb	r3, [r7, #2]
	rc = write_command(dev, cmd);
    5ba6:	f003 fdcf 	bl	9748 <write_command.isra.0>
	if (rc != 0) {
    5baa:	4604      	mov	r4, r0
    5bac:	b1a0      	cbz	r0, 5bd8 <ms8607pt_conversion_and_read_adc+0x48>
		LOG_ERR("Failed to call COMMAND 0x%02x - error %d", cmd, rc);
    5bae:	466d      	mov	r5, sp
    5bb0:	b088      	sub	sp, #32
    5bb2:	466a      	mov	r2, sp
    5bb4:	4b24      	ldr	r3, [pc, #144]	; (5c48 <ms8607pt_conversion_and_read_adc+0xb8>)
    5bb6:	61d4      	str	r4, [r2, #28]
    5bb8:	e9c2 3805 	strd	r3, r8, [r2, #20]
    5bbc:	2304      	movs	r3, #4
    5bbe:	f842 3f10 	str.w	r3, [r2, #16]!
    5bc2:	4822      	ldr	r0, [pc, #136]	; (5c4c <ms8607pt_conversion_and_read_adc+0xbc>)
    5bc4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    5bc8:	f003 fdab 	bl	9722 <z_log_msg_static_create.constprop.0>
    5bcc:	46ad      	mov	sp, r5
}
    5bce:	4620      	mov	r0, r4
    5bd0:	3710      	adds	r7, #16
    5bd2:	46bd      	mov	sp, r7
    5bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_msleep(psensor_conversion_time[(cmd & PSENSOR_CONVERSION_OSR_MASK)/2 ]/1000 );
    5bd8:	f3c8 0242 	ubfx	r2, r8, #1, #3
    5bdc:	4b1c      	ldr	r3, [pc, #112]	; (5c50 <ms8607pt_conversion_and_read_adc+0xc0>)
    5bde:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    5be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5be6:	fbb0 f0f3 	udiv	r0, r0, r3
    5bea:	f003 fd9d 	bl	9728 <k_msleep.isra.0>
	rc = write_command(dev, PSENSOR_READ_ADC);
    5bee:	4621      	mov	r1, r4
    5bf0:	6868      	ldr	r0, [r5, #4]
    5bf2:	f003 fda9 	bl	9748 <write_command.isra.0>
	if (rc != 0) {
    5bf6:	4604      	mov	r4, r0
    5bf8:	2800      	cmp	r0, #0
    5bfa:	d1d8      	bne.n	5bae <ms8607pt_conversion_and_read_adc+0x1e>
	rc = read_register(dev, buffer, sizeof(buffer));
    5bfc:	686b      	ldr	r3, [r5, #4]
	msg.len = num_bytes;
    5bfe:	2503      	movs	r5, #3
	return i2c_read(spec->bus, buf, num_bytes, spec->addr);
    5c00:	6818      	ldr	r0, [r3, #0]
    5c02:	889b      	ldrh	r3, [r3, #4]
	msg.buf = buf;
    5c04:	607f      	str	r7, [r7, #4]
	msg.len = num_bytes;
    5c06:	60bd      	str	r5, [r7, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    5c08:	733d      	strb	r5, [r7, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    5c0a:	6882      	ldr	r2, [r0, #8]
    5c0c:	1d39      	adds	r1, r7, #4
    5c0e:	6894      	ldr	r4, [r2, #8]
    5c10:	2201      	movs	r2, #1
    5c12:	47a0      	blx	r4
	if (rc != 0) {
    5c14:	4604      	mov	r4, r0
    5c16:	b170      	cbz	r0, 5c36 <ms8607pt_conversion_and_read_adc+0xa6>
		LOG_ERR("Failed to read buffer from READ PT %d", rc);
    5c18:	466e      	mov	r6, sp
    5c1a:	b088      	sub	sp, #32
    5c1c:	466a      	mov	r2, sp
    5c1e:	4b0d      	ldr	r3, [pc, #52]	; (5c54 <ms8607pt_conversion_and_read_adc+0xc4>)
    5c20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5c24:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5c28:	f842 5f10 	str.w	r5, [r2, #16]!
    5c2c:	4807      	ldr	r0, [pc, #28]	; (5c4c <ms8607pt_conversion_and_read_adc+0xbc>)
    5c2e:	f003 fd78 	bl	9722 <z_log_msg_static_create.constprop.0>
    5c32:	46b5      	mov	sp, r6
		return rc;
    5c34:	e7cb      	b.n	5bce <ms8607pt_conversion_and_read_adc+0x3e>
	*adc = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
    5c36:	787b      	ldrb	r3, [r7, #1]
    5c38:	783a      	ldrb	r2, [r7, #0]
    5c3a:	021b      	lsls	r3, r3, #8
    5c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    5c40:	78ba      	ldrb	r2, [r7, #2]
    5c42:	4313      	orrs	r3, r2
    5c44:	6033      	str	r3, [r6, #0]
	return 0;
    5c46:	e7c2      	b.n	5bce <ms8607pt_conversion_and_read_adc+0x3e>
    5c48:	0000aeed 	.word	0x0000aeed
    5c4c:	0000a1b0 	.word	0x0000a1b0
    5c50:	0000a490 	.word	0x0000a490
    5c54:	0000af16 	.word	0x0000af16

00005c58 <ms8607pt_sample_fetch>:
{
    5c58:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c5a:	b089      	sub	sp, #36	; 0x24
	if (chan != SENSOR_CHAN_ALL) {
    5c5c:	2939      	cmp	r1, #57	; 0x39
	struct ms8607pt_data *data = dev->data;
    5c5e:	6906      	ldr	r6, [r0, #16]
{
    5c60:	af00      	add	r7, sp, #0
    5c62:	4605      	mov	r5, r0
	if (chan != SENSOR_CHAN_ALL) {
    5c64:	d14f      	bne.n	5d06 <ms8607pt_sample_fetch+0xae>
	uint32_t adc_temperature = 0, adc_pressure = 0;
    5c66:	2300      	movs	r3, #0
    5c68:	607b      	str	r3, [r7, #4]
	if (data->coeff_is_ready == false) {
    5c6a:	7d33      	ldrb	r3, [r6, #20]
    5c6c:	b993      	cbnz	r3, 5c94 <ms8607pt_sample_fetch+0x3c>
		rc = ms8607pt_read_eeprom(dev);
    5c6e:	f7ff fea5 	bl	59bc <ms8607pt_read_eeprom>
		if (rc != 0) {
    5c72:	4604      	mov	r4, r0
    5c74:	b170      	cbz	r0, 5c94 <ms8607pt_sample_fetch+0x3c>
			LOG_ERR("Failed to read eeprom");
    5c76:	4b25      	ldr	r3, [pc, #148]	; (5d0c <ms8607pt_sample_fetch+0xb4>)
    5c78:	61fb      	str	r3, [r7, #28]
    5c7a:	2302      	movs	r3, #2
    5c7c:	4824      	ldr	r0, [pc, #144]	; (5d10 <ms8607pt_sample_fetch+0xb8>)
    5c7e:	61bb      	str	r3, [r7, #24]
    5c80:	f107 0218 	add.w	r2, r7, #24
    5c84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5c88:	f003 fd4b 	bl	9722 <z_log_msg_static_create.constprop.0>
}
    5c8c:	4620      	mov	r0, r4
    5c8e:	3724      	adds	r7, #36	; 0x24
    5c90:	46bd      	mov	sp, r7
    5c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	cmd = data->resolution * 2;
    5c94:	7db1      	ldrb	r1, [r6, #22]
    5c96:	0049      	lsls	r1, r1, #1
    5c98:	b2c9      	uxtb	r1, r1
	rc = ms8607pt_conversion_and_read_adc(dev, cmd, &adc_temperature);
    5c9a:	1d3a      	adds	r2, r7, #4
    5c9c:	f041 0150 	orr.w	r1, r1, #80	; 0x50
    5ca0:	4628      	mov	r0, r5
    5ca2:	f7ff ff75 	bl	5b90 <ms8607pt_conversion_and_read_adc>
	if (rc != 0) {
    5ca6:	4604      	mov	r4, r0
    5ca8:	b178      	cbz	r0, 5cca <ms8607pt_sample_fetch+0x72>
		LOG_ERR("Failed to read temperature error %d", rc);
    5caa:	466d      	mov	r5, sp
    5cac:	b088      	sub	sp, #32
    5cae:	466a      	mov	r2, sp
    5cb0:	4b18      	ldr	r3, [pc, #96]	; (5d14 <ms8607pt_sample_fetch+0xbc>)
		LOG_ERR("Failed to read pressure error %d", rc);
    5cb2:	4817      	ldr	r0, [pc, #92]	; (5d10 <ms8607pt_sample_fetch+0xb8>)
    5cb4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5cb8:	2303      	movs	r3, #3
    5cba:	f842 3f10 	str.w	r3, [r2, #16]!
    5cbe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5cc2:	f003 fd2e 	bl	9722 <z_log_msg_static_create.constprop.0>
    5cc6:	46ad      	mov	sp, r5
		return rc;
    5cc8:	e7e0      	b.n	5c8c <ms8607pt_sample_fetch+0x34>
	cmd = data->resolution * 2;
    5cca:	7db1      	ldrb	r1, [r6, #22]
    5ccc:	0049      	lsls	r1, r1, #1
    5cce:	b2c9      	uxtb	r1, r1
	rc = ms8607pt_conversion_and_read_adc(dev, cmd, &adc_temperature);
    5cd0:	1d3a      	adds	r2, r7, #4
    5cd2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    5cd6:	4628      	mov	r0, r5
    5cd8:	f7ff ff5a 	bl	5b90 <ms8607pt_conversion_and_read_adc>
	if (rc != 0) {
    5cdc:	4604      	mov	r4, r0
    5cde:	b120      	cbz	r0, 5cea <ms8607pt_sample_fetch+0x92>
		LOG_ERR("Failed to read pressure error %d", rc);
    5ce0:	466d      	mov	r5, sp
    5ce2:	b088      	sub	sp, #32
    5ce4:	466a      	mov	r2, sp
    5ce6:	4b0c      	ldr	r3, [pc, #48]	; (5d18 <ms8607pt_sample_fetch+0xc0>)
    5ce8:	e7e3      	b.n	5cb2 <ms8607pt_sample_fetch+0x5a>
		LOG_ERR("Invalid value from ADC of temperature and pressure");
    5cea:	4b0c      	ldr	r3, [pc, #48]	; (5d1c <ms8607pt_sample_fetch+0xc4>)
    5cec:	61fb      	str	r3, [r7, #28]
    5cee:	2302      	movs	r3, #2
    5cf0:	4807      	ldr	r0, [pc, #28]	; (5d10 <ms8607pt_sample_fetch+0xb8>)
    5cf2:	61bb      	str	r3, [r7, #24]
    5cf4:	f107 0218 	add.w	r2, r7, #24
    5cf8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5cfc:	f003 fd11 	bl	9722 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    5d00:	f06f 0415 	mvn.w	r4, #21
    5d04:	e7c2      	b.n	5c8c <ms8607pt_sample_fetch+0x34>
		return -ENOTSUP;
    5d06:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5d0a:	e7bf      	b.n	5c8c <ms8607pt_sample_fetch+0x34>
    5d0c:	0000af3c 	.word	0x0000af3c
    5d10:	0000a1b0 	.word	0x0000a1b0
    5d14:	0000af52 	.word	0x0000af52
    5d18:	0000af76 	.word	0x0000af76
    5d1c:	0000af97 	.word	0x0000af97

00005d20 <ms8607h_channel_get>:
}

static int ms8607h_channel_get(const struct device *dev,
				     enum sensor_channel chan,
				     struct sensor_value *val)
{
    5d20:	b538      	push	{r3, r4, r5, lr}
	struct ms8607h_data *data = dev->data;

	if (chan != SENSOR_CHAN_HUMIDITY) {
    5d22:	2910      	cmp	r1, #16
	struct ms8607h_data *data = dev->data;
    5d24:	6903      	ldr	r3, [r0, #16]
{
    5d26:	4614      	mov	r4, r2
	if (chan != SENSOR_CHAN_HUMIDITY) {
    5d28:	d11f      	bne.n	5d6a <ms8607h_channel_get+0x4a>
		return -ENOTSUP;
	}

	if (data->ready) {
    5d2a:	7ada      	ldrb	r2, [r3, #11]
    5d2c:	b302      	cbz	r2, 5d70 <ms8607h_channel_get+0x50>
		float humid = (float)(data->humid * HUMIDITY_COEFF_MUL) / (float)(1UL<<16) + (float)HUMIDITY_COEFF_ADD;
    5d2e:	891b      	ldrh	r3, [r3, #8]
    5d30:	207d      	movs	r0, #125	; 0x7d
    5d32:	4358      	muls	r0, r3
    5d34:	f7fa fe6c 	bl	a10 <__aeabi_i2f>
    5d38:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
    5d3c:	f7fa febc 	bl	ab8 <__aeabi_fmul>
    5d40:	490d      	ldr	r1, [pc, #52]	; (5d78 <ms8607h_channel_get+0x58>)
    5d42:	f7fa fdaf 	bl	8a4 <__aeabi_fsub>
    5d46:	4605      	mov	r5, r0
		val->val1 = (int32_t)humid;
    5d48:	f7fb f806 	bl	d58 <__aeabi_f2iz>
    5d4c:	6020      	str	r0, [r4, #0]
		val->val2 = (humid - (float)val->val1) * 1000000;
    5d4e:	f7fa fe5f 	bl	a10 <__aeabi_i2f>
    5d52:	4601      	mov	r1, r0
    5d54:	4628      	mov	r0, r5
    5d56:	f7fa fda5 	bl	8a4 <__aeabi_fsub>
    5d5a:	4908      	ldr	r1, [pc, #32]	; (5d7c <ms8607h_channel_get+0x5c>)
    5d5c:	f7fa feac 	bl	ab8 <__aeabi_fmul>
    5d60:	f7fa fffa 	bl	d58 <__aeabi_f2iz>
    5d64:	6060      	str	r0, [r4, #4]
		return 0;
    5d66:	2000      	movs	r0, #0
	}

	return -EIO;
}
    5d68:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
    5d6a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5d6e:	e7fb      	b.n	5d68 <ms8607h_channel_get+0x48>
	return -EIO;
    5d70:	f06f 0004 	mvn.w	r0, #4
    5d74:	e7f8      	b.n	5d68 <ms8607h_channel_get+0x48>
    5d76:	bf00      	nop
    5d78:	40c00000 	.word	0x40c00000
    5d7c:	49742400 	.word	0x49742400

00005d80 <ms8607h_attr_set>:


static int ms8607h_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
    5d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t reg_value, tmp=0;
	uint32_t conversion_time = HSENSOR_CONVERSION_TIME_12b;
	struct ms8607h_data *data = dev->data;

	if (attr == SENSOR_ATTR_FULL_SCALE) {
    5d84:	2a07      	cmp	r2, #7
{
    5d86:	b082      	sub	sp, #8
    5d88:	4604      	mov	r4, r0
    5d8a:	af00      	add	r7, sp, #0
	if (attr == SENSOR_ATTR_FULL_SCALE) {
    5d8c:	d004      	beq.n	5d98 <ms8607h_attr_set+0x18>
		if (rc != 0) {
			LOG_ERR("Failed to set attribute %d", rc);
			return -EIO;
		}
	}
	return 0;
    5d8e:	2000      	movs	r0, #0
}
    5d90:	3708      	adds	r7, #8
    5d92:	46bd      	mov	sp, r7
    5d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		enum ms8607_humidity_resolution res = (enum ms8607_humidity_resolution)val->val1;
    5d98:	781d      	ldrb	r5, [r3, #0]
		if( res == ms8607_humidity_resolution_12b) {
    5d9a:	b31d      	cbz	r5, 5de4 <ms8607h_attr_set+0x64>
		else if( res == ms8607_humidity_resolution_10b) {
    5d9c:	1e6b      	subs	r3, r5, #1
    5d9e:	b2db      	uxtb	r3, r3
    5da0:	2b02      	cmp	r3, #2
    5da2:	d822      	bhi.n	5dea <ms8607h_attr_set+0x6a>
    5da4:	4a1b      	ldr	r2, [pc, #108]	; (5e14 <ms8607h_attr_set+0x94>)
    5da6:	5cd5      	ldrb	r5, [r2, r3]
    5da8:	4a1b      	ldr	r2, [pc, #108]	; (5e18 <ms8607h_attr_set+0x98>)
    5daa:	f832 6013 	ldrh.w	r6, [r2, r3, lsl #1]
		int rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    5dae:	6860      	ldr	r0, [r4, #4]
	struct ms8607h_data *data = dev->data;
    5db0:	f8d4 8010 	ldr.w	r8, [r4, #16]
		uint8_t rx_buf[1] = {0x00};
    5db4:	2300      	movs	r3, #0
		int rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    5db6:	1d39      	adds	r1, r7, #4
		uint8_t rx_buf[1] = {0x00};
    5db8:	713b      	strb	r3, [r7, #4]
		int rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    5dba:	f003 fcf7 	bl	97ac <read_register.constprop.0.isra.0>
		if (rc != 0) {
    5dbe:	b1c0      	cbz	r0, 5df2 <ms8607h_attr_set+0x72>
			LOG_ERR("Failed to read user data %d", rc);
    5dc0:	466c      	mov	r4, sp
    5dc2:	b088      	sub	sp, #32
    5dc4:	466a      	mov	r2, sp
    5dc6:	4b15      	ldr	r3, [pc, #84]	; (5e1c <ms8607h_attr_set+0x9c>)
			LOG_ERR("Failed to set attribute %d", rc);
    5dc8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5dcc:	2303      	movs	r3, #3
    5dce:	4814      	ldr	r0, [pc, #80]	; (5e20 <ms8607h_attr_set+0xa0>)
    5dd0:	f842 3f10 	str.w	r3, [r2, #16]!
    5dd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5dd8:	f003 fce5 	bl	97a6 <z_log_msg_static_create.constprop.0>
			return -EIO;
    5ddc:	f06f 0004 	mvn.w	r0, #4
    5de0:	46a5      	mov	sp, r4
			return -EIO;
    5de2:	e7d5      	b.n	5d90 <ms8607h_attr_set+0x10>
			conversion_time = HSENSOR_CONVERSION_TIME_12b;
    5de4:	f44f 567a 	mov.w	r6, #16000	; 0x3e80
    5de8:	e7e1      	b.n	5dae <ms8607h_attr_set+0x2e>
    5dea:	f44f 567a 	mov.w	r6, #16000	; 0x3e80
			tmp = HSENSOR_USER_REG_RESOLUTION_12b;
    5dee:	2500      	movs	r5, #0
    5df0:	e7dd      	b.n	5dae <ms8607h_attr_set+0x2e>
		reg_value = rx_buf[0];
    5df2:	7939      	ldrb	r1, [r7, #4]
		data->conversion_time = conversion_time;
    5df4:	f8c8 6004 	str.w	r6, [r8, #4]
		reg_value &= ~HSENSOR_USER_REG_RESOLUTION_MASK;
    5df8:	f001 017e 	and.w	r1, r1, #126	; 0x7e
		rc = write_register(dev, reg_value);
    5dfc:	4329      	orrs	r1, r5
    5dfe:	4620      	mov	r0, r4
    5e00:	f003 fcee 	bl	97e0 <write_register>
		if (rc != 0) {
    5e04:	2800      	cmp	r0, #0
    5e06:	d0c2      	beq.n	5d8e <ms8607h_attr_set+0xe>
			LOG_ERR("Failed to set attribute %d", rc);
    5e08:	466c      	mov	r4, sp
    5e0a:	b088      	sub	sp, #32
    5e0c:	466a      	mov	r2, sp
    5e0e:	4b05      	ldr	r3, [pc, #20]	; (5e24 <ms8607h_attr_set+0xa4>)
    5e10:	e7da      	b.n	5dc8 <ms8607h_attr_set+0x48>
    5e12:	bf00      	nop
    5e14:	0000b09d 	.word	0x0000b09d
    5e18:	0000a57c 	.word	0x0000a57c
    5e1c:	0000afdc 	.word	0x0000afdc
    5e20:	0000a1a8 	.word	0x0000a1a8
    5e24:	0000aff8 	.word	0x0000aff8

00005e28 <ms8607h_init>:
	.channel_get = ms8607h_channel_get,
	.attr_set = ms8607h_attr_set,
};

static int ms8607h_init(const struct device *dev)
{
    5e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e2a:	b087      	sub	sp, #28
    5e2c:	6843      	ldr	r3, [r0, #4]
	struct ms8607h_data *data = dev->data;
    5e2e:	6906      	ldr	r6, [r0, #16]
{
    5e30:	af00      	add	r7, sp, #0
    5e32:	4605      	mov	r5, r0
    5e34:	6818      	ldr	r0, [r3, #0]
    5e36:	f003 fe53 	bl	9ae0 <z_device_is_ready>
	const struct ms8607h_config *cfg = dev->config;
	int rc = 0;
	if (!i2c_is_ready_dt(&cfg->i2c)) {
    5e3a:	b980      	cbnz	r0, 5e5e <ms8607h_init+0x36>
		LOG_ERR("I2C bus device not ready");
    5e3c:	4b24      	ldr	r3, [pc, #144]	; (5ed0 <ms8607h_init+0xa8>)
    5e3e:	617b      	str	r3, [r7, #20]
    5e40:	2302      	movs	r3, #2
    5e42:	4824      	ldr	r0, [pc, #144]	; (5ed4 <ms8607h_init+0xac>)
    5e44:	613b      	str	r3, [r7, #16]
    5e46:	f107 0210 	add.w	r2, r7, #16
    5e4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    5e4e:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("I2C bus device not ready");
    5e52:	f003 fca8 	bl	97a6 <z_log_msg_static_create.constprop.0>
	data->conversion_time = HSENSOR_CONVERSION_TIME_12b;
	data->mode = ms8607_i2c_no_hold;
	data->ready = false;
	data->heater_on = false;
	return 0;
}
    5e56:	4620      	mov	r0, r4
    5e58:	371c      	adds	r7, #28
    5e5a:	46bd      	mov	sp, r7
    5e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	int rc = i2c_write_dt(&cfg->i2c, NULL, 0);
    5e5e:	2200      	movs	r2, #0
    5e60:	6868      	ldr	r0, [r5, #4]
    5e62:	4611      	mov	r1, r2
    5e64:	f003 fc90 	bl	9788 <i2c_write_dt>
	if (rc != 0) {
    5e68:	4604      	mov	r4, r0
    5e6a:	b158      	cbz	r0, 5e84 <ms8607h_init+0x5c>
		LOG_ERR("The humidity is not ready");
    5e6c:	4b1a      	ldr	r3, [pc, #104]	; (5ed8 <ms8607h_init+0xb0>)
    5e6e:	617b      	str	r3, [r7, #20]
    5e70:	2302      	movs	r3, #2
    5e72:	4818      	ldr	r0, [pc, #96]	; (5ed4 <ms8607h_init+0xac>)
    5e74:	613b      	str	r3, [r7, #16]
    5e76:	f107 0210 	add.w	r2, r7, #16
    5e7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e7e:	f003 fc92 	bl	97a6 <z_log_msg_static_create.constprop.0>
		return rc;
    5e82:	e7e8      	b.n	5e56 <ms8607h_init+0x2e>
	uint8_t tx_buf[1] = {command};
    5e84:	23fe      	movs	r3, #254	; 0xfe
	rc = i2c_write_dt(&cfg->i2c, tx_buf, sizeof(tx_buf));
    5e86:	6868      	ldr	r0, [r5, #4]
	uint8_t tx_buf[1] = {command};
    5e88:	703b      	strb	r3, [r7, #0]
	rc = i2c_write_dt(&cfg->i2c, tx_buf, sizeof(tx_buf));
    5e8a:	2201      	movs	r2, #1
    5e8c:	4639      	mov	r1, r7
    5e8e:	f003 fc7b 	bl	9788 <i2c_write_dt>
	if (rc != 0) {
    5e92:	4604      	mov	r4, r0
    5e94:	b178      	cbz	r0, 5eb6 <ms8607h_init+0x8e>
		LOG_ERR("Failed to call RESET command %d", rc);
    5e96:	466d      	mov	r5, sp
    5e98:	b088      	sub	sp, #32
    5e9a:	466a      	mov	r2, sp
    5e9c:	4b0f      	ldr	r3, [pc, #60]	; (5edc <ms8607h_init+0xb4>)
    5e9e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5ea2:	2303      	movs	r3, #3
    5ea4:	f842 3f10 	str.w	r3, [r2, #16]!
    5ea8:	480a      	ldr	r0, [pc, #40]	; (5ed4 <ms8607h_init+0xac>)
    5eaa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5eae:	f003 fc7a 	bl	97a6 <z_log_msg_static_create.constprop.0>
    5eb2:	46ad      	mov	sp, r5
		return rc;
    5eb4:	e7cf      	b.n	5e56 <ms8607h_init+0x2e>
    5eb6:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
    5eba:	2100      	movs	r1, #0
    5ebc:	f002 f8aa 	bl	8014 <z_impl_k_sleep>
	data->conversion_time = HSENSOR_CONVERSION_TIME_12b;
    5ec0:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
    5ec4:	6073      	str	r3, [r6, #4]
	data->mode = ms8607_i2c_no_hold;
    5ec6:	2301      	movs	r3, #1
    5ec8:	7033      	strb	r3, [r6, #0]
	data->heater_on = false;
    5eca:	8174      	strh	r4, [r6, #10]
	return 0;
    5ecc:	e7c3      	b.n	5e56 <ms8607h_init+0x2e>
    5ece:	bf00      	nop
    5ed0:	0000ae9b 	.word	0x0000ae9b
    5ed4:	0000a1a8 	.word	0x0000a1a8
    5ed8:	0000b013 	.word	0x0000b013
    5edc:	0000aeb4 	.word	0x0000aeb4

00005ee0 <ms8607h_sample_fetch>:
{
    5ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ee4:	b084      	sub	sp, #16
	if (chan != SENSOR_CHAN_ALL) {
    5ee6:	2939      	cmp	r1, #57	; 0x39
	struct ms8607h_data *data = dev->data;
    5ee8:	f8d0 8010 	ldr.w	r8, [r0, #16]
{
    5eec:	af00      	add	r7, sp, #0
    5eee:	4605      	mov	r5, r0
	if (chan != SENSOR_CHAN_ALL) {
    5ef0:	f040 8090 	bne.w	6014 <ms8607h_sample_fetch+0x134>
	buffer[0] = 0;
    5ef4:	2600      	movs	r6, #0
    5ef6:	803e      	strh	r6, [r7, #0]
	buffer[2] = 0;
    5ef8:	70be      	strb	r6, [r7, #2]
	if( data->mode == ms8607_i2c_hold) 
    5efa:	f898 3000 	ldrb.w	r3, [r8]
	rc = i2c_write_dt(&cfg->i2c, tx_buf, sizeof(tx_buf));
    5efe:	6840      	ldr	r0, [r0, #4]
	if( data->mode == ms8607_i2c_hold) 
    5f00:	b9db      	cbnz	r3, 5f3a <ms8607h_sample_fetch+0x5a>
	uint8_t tx_buf[1] = {command};
    5f02:	23e5      	movs	r3, #229	; 0xe5
    5f04:	713b      	strb	r3, [r7, #4]
	rc = i2c_write_dt(&cfg->i2c, tx_buf, sizeof(tx_buf));
    5f06:	2201      	movs	r2, #1
    5f08:	1d39      	adds	r1, r7, #4
    5f0a:	f003 fc3d 	bl	9788 <i2c_write_dt>
    5f0e:	4604      	mov	r4, r0
	if (rc != 0) 
    5f10:	b37c      	cbz	r4, 5f72 <ms8607h_sample_fetch+0x92>
		LOG_ERR("Failed to call READ HUMIDITY command %d", rc);
    5f12:	466d      	mov	r5, sp
    5f14:	b088      	sub	sp, #32
    5f16:	466a      	mov	r2, sp
    5f18:	4b40      	ldr	r3, [pc, #256]	; (601c <ms8607h_sample_fetch+0x13c>)
    5f1a:	4841      	ldr	r0, [pc, #260]	; (6020 <ms8607h_sample_fetch+0x140>)
    5f1c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5f20:	2303      	movs	r3, #3
    5f22:	f842 3f10 	str.w	r3, [r2, #16]!
    5f26:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5f2a:	f003 fc3c 	bl	97a6 <z_log_msg_static_create.constprop.0>
    5f2e:	46ad      	mov	sp, r5
}
    5f30:	4620      	mov	r0, r4
    5f32:	3710      	adds	r7, #16
    5f34:	46bd      	mov	sp, r7
    5f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t tx_buf[1] = {command};
    5f3a:	23f5      	movs	r3, #245	; 0xf5
    5f3c:	713b      	strb	r3, [r7, #4]
	rc = i2c_write_dt(&cfg->i2c, tx_buf, sizeof(tx_buf));
    5f3e:	1d39      	adds	r1, r7, #4
    5f40:	2201      	movs	r2, #1
    5f42:	f003 fc21 	bl	9788 <i2c_write_dt>
			return ((t * to_hz + off) / from_hz);
    5f46:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    5f4a:	4604      	mov	r4, r0
    5f4c:	4631      	mov	r1, r6
    5f4e:	f240 30e7 	movw	r0, #999	; 0x3e7
		k_msleep(data->conversion_time / 1000);
    5f52:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5f5a:	fbb3 fcf2 	udiv	ip, r3, r2
    5f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5f62:	2300      	movs	r3, #0
    5f64:	fbec 010e 	umlal	r0, r1, ip, lr
    5f68:	f7fa ff1c 	bl	da4 <__aeabi_uldivmod>
    5f6c:	f002 f852 	bl	8014 <z_impl_k_sleep>
    5f70:	e7ce      	b.n	5f10 <ms8607h_sample_fetch+0x30>
	rc = read_data(dev, buffer, sizeof(buffer));
    5f72:	686b      	ldr	r3, [r5, #4]
	msg.len = num_bytes;
    5f74:	2503      	movs	r5, #3
	return i2c_read(spec->bus, buf, num_bytes, spec->addr);
    5f76:	6818      	ldr	r0, [r3, #0]
    5f78:	889b      	ldrh	r3, [r3, #4]
	msg.buf = buf;
    5f7a:	607f      	str	r7, [r7, #4]
	msg.len = num_bytes;
    5f7c:	60bd      	str	r5, [r7, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    5f7e:	733d      	strb	r5, [r7, #12]
	return i2c_transfer(dev, &msg, 1, addr);
    5f80:	2201      	movs	r2, #1
    5f82:	1d39      	adds	r1, r7, #4
    5f84:	f003 fbfa 	bl	977c <i2c_transfer>
	if (rc != 0) {
    5f88:	4604      	mov	r4, r0
    5f8a:	b170      	cbz	r0, 5faa <ms8607h_sample_fetch+0xca>
		LOG_ERR("Failed to read buffer from READ HUMIDITY %d", rc);
    5f8c:	466e      	mov	r6, sp
    5f8e:	b088      	sub	sp, #32
    5f90:	466a      	mov	r2, sp
    5f92:	4b24      	ldr	r3, [pc, #144]	; (6024 <ms8607h_sample_fetch+0x144>)
    5f94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5f98:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5f9c:	f842 5f10 	str.w	r5, [r2, #16]!
    5fa0:	481f      	ldr	r0, [pc, #124]	; (6020 <ms8607h_sample_fetch+0x140>)
    5fa2:	f003 fc00 	bl	97a6 <z_log_msg_static_create.constprop.0>
    5fa6:	46b5      	mov	sp, r6
		return rc;
    5fa8:	e7c2      	b.n	5f30 <ms8607h_sample_fetch+0x50>
	_adc = (buffer[0] << 8) | buffer[1];
    5faa:	883a      	ldrh	r2, [r7, #0]
	crc = buffer[2];
    5fac:	78b9      	ldrb	r1, [r7, #2]
	uint32_t mask    = 0xFF8000;
    5fae:	4e1e      	ldr	r6, [pc, #120]	; (6028 <ms8607h_sample_fetch+0x148>)
	uint32_t polynom = 0x988000; // x^8 + x^5 + x^4 + 1
    5fb0:	4d1e      	ldr	r5, [pc, #120]	; (602c <ms8607h_sample_fetch+0x14c>)
    5fb2:	ba52      	rev16	r2, r2
    5fb4:	b293      	uxth	r3, r2
	uint32_t result  = (uint32_t)value<<8; // Pad with zeros as specified in spec
    5fb6:	021b      	lsls	r3, r3, #8
    5fb8:	2010      	movs	r0, #16
	uint32_t msb     = 0x800000;
    5fba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
		if( result & msb )
    5fbe:	ea13 0f0c 	tst.w	r3, ip
			result = ((result ^ polynom) & mask) | ( result & ~mask);
    5fc2:	bf1c      	itt	ne
    5fc4:	ea05 0e06 	andne.w	lr, r5, r6
    5fc8:	ea83 030e 	eorne.w	r3, r3, lr
	while( msb != 0x80 ) {
    5fcc:	3801      	subs	r0, #1
		msb >>= 1;
    5fce:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
		mask >>= 1;
    5fd2:	ea4f 0656 	mov.w	r6, r6, lsr #1
		polynom >>=1;
    5fd6:	ea4f 0555 	mov.w	r5, r5, lsr #1
	while( msb != 0x80 ) {
    5fda:	d1f0      	bne.n	5fbe <ms8607h_sample_fetch+0xde>
	if (cal_crc != crc) {
    5fdc:	b2db      	uxtb	r3, r3
    5fde:	4299      	cmp	r1, r3
    5fe0:	d005      	beq.n	5fee <ms8607h_sample_fetch+0x10e>
		data->ready= true;
    5fe2:	2301      	movs	r3, #1
		data->humid = _adc;
    5fe4:	f8a8 2008 	strh.w	r2, [r8, #8]
		data->ready= true;
    5fe8:	f888 300b 	strb.w	r3, [r8, #11]
		return 0;
    5fec:	e7a0      	b.n	5f30 <ms8607h_sample_fetch+0x50>
	LOG_ERR("CRC invalid 0x%02x - 0x%02x", cal_crc, crc);
    5fee:	466c      	mov	r4, sp
    5ff0:	b088      	sub	sp, #32
    5ff2:	466a      	mov	r2, sp
    5ff4:	4b0e      	ldr	r3, [pc, #56]	; (6030 <ms8607h_sample_fetch+0x150>)
    5ff6:	61d1      	str	r1, [r2, #28]
    5ff8:	e9c2 3105 	strd	r3, r1, [r2, #20]
    5ffc:	2304      	movs	r3, #4
    5ffe:	f842 3f10 	str.w	r3, [r2, #16]!
    6002:	4807      	ldr	r0, [pc, #28]	; (6020 <ms8607h_sample_fetch+0x140>)
    6004:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    6008:	f003 fbcd 	bl	97a6 <z_log_msg_static_create.constprop.0>
    600c:	46a5      	mov	sp, r4
	return -EINVAL;
    600e:	f06f 0415 	mvn.w	r4, #21
    6012:	e78d      	b.n	5f30 <ms8607h_sample_fetch+0x50>
		return -ENOTSUP;
    6014:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6018:	e78a      	b.n	5f30 <ms8607h_sample_fetch+0x50>
    601a:	bf00      	nop
    601c:	0000b02d 	.word	0x0000b02d
    6020:	0000a1a8 	.word	0x0000a1a8
    6024:	0000b055 	.word	0x0000b055
    6028:	00ff8000 	.word	0x00ff8000
    602c:	00988000 	.word	0x00988000
    6030:	0000b081 	.word	0x0000b081

00006034 <ms8607_enable_heater>:

int ms8607_enable_heater(const struct device *dev) {
    6034:	b5b0      	push	{r4, r5, r7, lr}
    6036:	b082      	sub	sp, #8
    6038:	af00      	add	r7, sp, #0
	struct ms8607h_data *data = dev->data;
    603a:	6905      	ldr	r5, [r0, #16]
int ms8607_enable_heater(const struct device *dev) {
    603c:	4604      	mov	r4, r0
	uint8_t rx_buf[1] = {0x00};
    603e:	2300      	movs	r3, #0
	int rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    6040:	6840      	ldr	r0, [r0, #4]
	uint8_t rx_buf[1] = {0x00};
    6042:	713b      	strb	r3, [r7, #4]
	int rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    6044:	1d39      	adds	r1, r7, #4
    6046:	f003 fbb1 	bl	97ac <read_register.constprop.0.isra.0>
	if (rc != 0) {
    604a:	b198      	cbz	r0, 6074 <ms8607_enable_heater+0x40>
		LOG_ERR("Failed to read user data %d", rc);
    604c:	466c      	mov	r4, sp
    604e:	b088      	sub	sp, #32
    6050:	466a      	mov	r2, sp
    6052:	4b0d      	ldr	r3, [pc, #52]	; (6088 <ms8607_enable_heater+0x54>)
    6054:	e9c2 3005 	strd	r3, r0, [r2, #20]
    6058:	2303      	movs	r3, #3
    605a:	480c      	ldr	r0, [pc, #48]	; (608c <ms8607_enable_heater+0x58>)
    605c:	f842 3f10 	str.w	r3, [r2, #16]!
    6060:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6064:	f003 fb9f 	bl	97a6 <z_log_msg_static_create.constprop.0>
		return -EIO;
    6068:	f06f 0004 	mvn.w	r0, #4
    606c:	46a5      	mov	sp, r4
	rx_buf[0] |= HSENSOR_USER_REG_ONCHIP_HEATER_ENABLE;
	data->heater_on = true;
	
	rc = write_register(dev, rx_buf[0]);
	return rc;
}
    606e:	3708      	adds	r7, #8
    6070:	46bd      	mov	sp, r7
    6072:	bdb0      	pop	{r4, r5, r7, pc}
	rx_buf[0] |= HSENSOR_USER_REG_ONCHIP_HEATER_ENABLE;
    6074:	7939      	ldrb	r1, [r7, #4]
	data->heater_on = true;
    6076:	2301      	movs	r3, #1
	rx_buf[0] |= HSENSOR_USER_REG_ONCHIP_HEATER_ENABLE;
    6078:	f041 0104 	orr.w	r1, r1, #4
	data->heater_on = true;
    607c:	72ab      	strb	r3, [r5, #10]
	rc = write_register(dev, rx_buf[0]);
    607e:	4620      	mov	r0, r4
	rx_buf[0] |= HSENSOR_USER_REG_ONCHIP_HEATER_ENABLE;
    6080:	7139      	strb	r1, [r7, #4]
	rc = write_register(dev, rx_buf[0]);
    6082:	f003 fbad 	bl	97e0 <write_register>
	return rc;
    6086:	e7f2      	b.n	606e <ms8607_enable_heater+0x3a>
    6088:	0000afdc 	.word	0x0000afdc
    608c:	0000a1a8 	.word	0x0000a1a8

00006090 <ms8607_disable_heater>:

int ms8607_disable_heater(const struct device *dev) {
    6090:	b5b0      	push	{r4, r5, r7, lr}
    6092:	b082      	sub	sp, #8
    6094:	af00      	add	r7, sp, #0
	struct ms8607h_data *data = dev->data;
    6096:	6905      	ldr	r5, [r0, #16]
int ms8607_disable_heater(const struct device *dev) {
    6098:	4604      	mov	r4, r0
	uint8_t rx_buf[1] = {0x00};
    609a:	2300      	movs	r3, #0
	int rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    609c:	6840      	ldr	r0, [r0, #4]
	uint8_t rx_buf[1] = {0x00};
    609e:	713b      	strb	r3, [r7, #4]
	int rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    60a0:	1d39      	adds	r1, r7, #4
    60a2:	f003 fb83 	bl	97ac <read_register.constprop.0.isra.0>
	if (rc != 0) {
    60a6:	b198      	cbz	r0, 60d0 <ms8607_disable_heater+0x40>
		LOG_ERR("Failed to read user data %d", rc);
    60a8:	466c      	mov	r4, sp
    60aa:	b088      	sub	sp, #32
    60ac:	466a      	mov	r2, sp
    60ae:	4b0d      	ldr	r3, [pc, #52]	; (60e4 <ms8607_disable_heater+0x54>)
    60b0:	e9c2 3005 	strd	r3, r0, [r2, #20]
    60b4:	2303      	movs	r3, #3
    60b6:	480c      	ldr	r0, [pc, #48]	; (60e8 <ms8607_disable_heater+0x58>)
    60b8:	f842 3f10 	str.w	r3, [r2, #16]!
    60bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    60c0:	f003 fb71 	bl	97a6 <z_log_msg_static_create.constprop.0>
		return -EIO;
    60c4:	f06f 0004 	mvn.w	r0, #4
    60c8:	46a5      	mov	sp, r4
	rx_buf[0] &= ~HSENSOR_USER_REG_ONCHIP_HEATER_ENABLE;
	data->heater_on = true;
	
	rc = write_register(dev, rx_buf[0]);
	return rc;
}
    60ca:	3708      	adds	r7, #8
    60cc:	46bd      	mov	sp, r7
    60ce:	bdb0      	pop	{r4, r5, r7, pc}
	rx_buf[0] &= ~HSENSOR_USER_REG_ONCHIP_HEATER_ENABLE;
    60d0:	7939      	ldrb	r1, [r7, #4]
	data->heater_on = true;
    60d2:	2301      	movs	r3, #1
	rx_buf[0] &= ~HSENSOR_USER_REG_ONCHIP_HEATER_ENABLE;
    60d4:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
	data->heater_on = true;
    60d8:	72ab      	strb	r3, [r5, #10]
	rc = write_register(dev, rx_buf[0]);
    60da:	4620      	mov	r0, r4
	rx_buf[0] &= ~HSENSOR_USER_REG_ONCHIP_HEATER_ENABLE;
    60dc:	7139      	strb	r1, [r7, #4]
	rc = write_register(dev, rx_buf[0]);
    60de:	f003 fb7f 	bl	97e0 <write_register>
	return rc;
    60e2:	e7f2      	b.n	60ca <ms8607_disable_heater+0x3a>
    60e4:	0000afdc 	.word	0x0000afdc
    60e8:	0000a1a8 	.word	0x0000a1a8

000060ec <ms8607_get_battery_status>:

int ms8607_get_battery_status(const struct device *dev, enum ms8607_battery_status *status) {
    60ec:	b590      	push	{r4, r7, lr}
    60ee:	b083      	sub	sp, #12
    60f0:	af00      	add	r7, sp, #0
    60f2:	460c      	mov	r4, r1
	uint8_t rx_buf[1] = {0x00};
    60f4:	2300      	movs	r3, #0
	int rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    60f6:	6840      	ldr	r0, [r0, #4]
	uint8_t rx_buf[1] = {0x00};
    60f8:	713b      	strb	r3, [r7, #4]
	int rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    60fa:	1d39      	adds	r1, r7, #4
    60fc:	f003 fb56 	bl	97ac <read_register.constprop.0.isra.0>
	if (rc != 0) {
    6100:	b198      	cbz	r0, 612a <ms8607_get_battery_status+0x3e>
		LOG_ERR("Failed to read user data %d", rc);
    6102:	466c      	mov	r4, sp
    6104:	b088      	sub	sp, #32
    6106:	466a      	mov	r2, sp
    6108:	4b0a      	ldr	r3, [pc, #40]	; (6134 <ms8607_get_battery_status+0x48>)
    610a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    610e:	2303      	movs	r3, #3
    6110:	4809      	ldr	r0, [pc, #36]	; (6138 <ms8607_get_battery_status+0x4c>)
    6112:	f842 3f10 	str.w	r3, [r2, #16]!
    6116:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    611a:	f003 fb44 	bl	97a6 <z_log_msg_static_create.constprop.0>
		return -EIO;
    611e:	f06f 0004 	mvn.w	r0, #4
    6122:	46a5      	mov	sp, r4
	{
		*status = ms8607_battery_ok;
	}
	
	return 0;
}
    6124:	370c      	adds	r7, #12
    6126:	46bd      	mov	sp, r7
    6128:	bd90      	pop	{r4, r7, pc}
	if( rx_buf[0] & HSENSOR_USER_REG_END_OF_BATTERY_VDD_BELOW_2_25V )
    612a:	793b      	ldrb	r3, [r7, #4]
    612c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		*status = ms8607_battery_low;
    6130:	7023      	strb	r3, [r4, #0]
    6132:	e7f7      	b.n	6124 <ms8607_get_battery_status+0x38>
    6134:	0000afdc 	.word	0x0000afdc
    6138:	0000a1a8 	.word	0x0000a1a8

0000613c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    613c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    613e:	f7fc fdcd 	bl	2cdc <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    6142:	4b07      	ldr	r3, [pc, #28]	; (6160 <k_sys_fatal_error_handler+0x24>)
    6144:	9305      	str	r3, [sp, #20]
    6146:	2302      	movs	r3, #2
    6148:	9304      	str	r3, [sp, #16]
    614a:	4806      	ldr	r0, [pc, #24]	; (6164 <k_sys_fatal_error_handler+0x28>)
    614c:	2300      	movs	r3, #0
    614e:	aa04      	add	r2, sp, #16
    6150:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6154:	f7fc fea2 	bl	2e9c <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    6158:	2000      	movs	r0, #0
    615a:	f7fe fad1 	bl	4700 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    615e:	bf00      	nop
    6160:	0000b0b1 	.word	0x0000b0b1
    6164:	0000a168 	.word	0x0000a168

00006168 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6168:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    616c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6170:	2a08      	cmp	r2, #8
    6172:	d106      	bne.n	6182 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6174:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    6178:	2b05      	cmp	r3, #5
    617a:	d802      	bhi.n	6182 <nrf52_errata_103+0x1a>
    617c:	4a02      	ldr	r2, [pc, #8]	; (6188 <nrf52_errata_103+0x20>)
    617e:	5cd0      	ldrb	r0, [r2, r3]
    6180:	4770      	bx	lr
                        return false;
    6182:	2000      	movs	r0, #0
}
    6184:	4770      	bx	lr
    6186:	bf00      	nop
    6188:	0000b0d4 	.word	0x0000b0d4

0000618c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    618c:	4a02      	ldr	r2, [pc, #8]	; (6198 <nvmc_wait+0xc>)
    618e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    6192:	2b00      	cmp	r3, #0
    6194:	d0fb      	beq.n	618e <nvmc_wait+0x2>
}
    6196:	4770      	bx	lr
    6198:	4001e000 	.word	0x4001e000

0000619c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    619c:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    619e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    61a2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    61a6:	2a08      	cmp	r2, #8
    61a8:	d14e      	bne.n	6248 <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    61aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    61ae:	2100      	movs	r1, #0
    61b0:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    61b4:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    61b8:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    61bc:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    61c0:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    61c4:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    61c8:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    61cc:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    61d0:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    61d4:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    61d8:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    61dc:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    61e0:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    61e4:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    61e8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    61ec:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    61f0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    61f4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    61f8:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    61fc:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    6200:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    6204:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6208:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    620c:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    6210:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    6214:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    6218:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    621c:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    6220:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    6224:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6228:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    622c:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    6230:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    6234:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6238:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    623c:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    6240:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    6244:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    6248:	f7ff ff8e 	bl	6168 <nrf52_errata_103>
    624c:	b118      	cbz	r0, 6256 <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    624e:	4b3a      	ldr	r3, [pc, #232]	; (6338 <SystemInit+0x19c>)
    6250:	4a3a      	ldr	r2, [pc, #232]	; (633c <SystemInit+0x1a0>)
    6252:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    6256:	f7ff ff87 	bl	6168 <nrf52_errata_103>
    625a:	b118      	cbz	r0, 6264 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    625c:	4b38      	ldr	r3, [pc, #224]	; (6340 <SystemInit+0x1a4>)
    625e:	22fb      	movs	r2, #251	; 0xfb
    6260:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    6264:	f7ff ff80 	bl	6168 <nrf52_errata_103>
    6268:	b170      	cbz	r0, 6288 <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    626a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    626e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6272:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    6276:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    627a:	f022 020f 	bic.w	r2, r2, #15
    627e:	f003 030f 	and.w	r3, r3, #15
    6282:	4313      	orrs	r3, r2
    6284:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    6288:	f7ff ff6e 	bl	6168 <nrf52_errata_103>
    628c:	b120      	cbz	r0, 6298 <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    628e:	4b2d      	ldr	r3, [pc, #180]	; (6344 <SystemInit+0x1a8>)
    6290:	f44f 7200 	mov.w	r2, #512	; 0x200
    6294:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6298:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    629c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    62a0:	2b08      	cmp	r3, #8
    62a2:	d11a      	bne.n	62da <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    62a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    62a8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    62ac:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    62ae:	bf44      	itt	mi
    62b0:	f06f 0201 	mvnmi.w	r2, #1
    62b4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    62b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    62bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    62c0:	2b05      	cmp	r3, #5
    62c2:	d802      	bhi.n	62ca <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    62c4:	4a20      	ldr	r2, [pc, #128]	; (6348 <SystemInit+0x1ac>)
    62c6:	5cd3      	ldrb	r3, [r2, r3]
    62c8:	b13b      	cbz	r3, 62da <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    62ca:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    62ce:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    62d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    62d6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    62da:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    62de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    62e2:	2a00      	cmp	r2, #0
    62e4:	db03      	blt.n	62ee <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    62e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    62ea:	2b00      	cmp	r3, #0
    62ec:	da22      	bge.n	6334 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    62ee:	4917      	ldr	r1, [pc, #92]	; (634c <SystemInit+0x1b0>)
    62f0:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    62f2:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    62f6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    62fa:	2412      	movs	r4, #18
    nvmc_wait();
    62fc:	f7ff ff46 	bl	618c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6300:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    6304:	f7ff ff42 	bl	618c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    6308:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    630c:	f7ff ff3e 	bl	618c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6310:	2300      	movs	r3, #0
    6312:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    6316:	f7ff ff39 	bl	618c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    631a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    631e:	490c      	ldr	r1, [pc, #48]	; (6350 <SystemInit+0x1b4>)
    6320:	4b0c      	ldr	r3, [pc, #48]	; (6354 <SystemInit+0x1b8>)
    6322:	68ca      	ldr	r2, [r1, #12]
    6324:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6328:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    632a:	60cb      	str	r3, [r1, #12]
    632c:	f3bf 8f4f 	dsb	sy
    __NOP();
    6330:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6332:	e7fd      	b.n	6330 <SystemInit+0x194>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    6334:	bd10      	pop	{r4, pc}
    6336:	bf00      	nop
    6338:	40005000 	.word	0x40005000
    633c:	00038148 	.word	0x00038148
    6340:	4000f000 	.word	0x4000f000
    6344:	40029000 	.word	0x40029000
    6348:	0000b0ce 	.word	0x0000b0ce
    634c:	4001e000 	.word	0x4001e000
    6350:	e000ed00 	.word	0xe000ed00
    6354:	05fa0004 	.word	0x05fa0004

00006358 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6358:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    635a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    635c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    635e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    6362:	fab2 f382 	clz	r3, r2
    6366:	f1c3 031f 	rsb	r3, r3, #31
    636a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    636c:	fa05 f403 	lsl.w	r4, r5, r3
    6370:	ea22 0404 	bic.w	r4, r2, r4
    6374:	e850 6f00 	ldrex	r6, [r0]
    6378:	4296      	cmp	r6, r2
    637a:	d104      	bne.n	6386 <nrfx_flag32_alloc+0x2e>
    637c:	e840 4c00 	strex	ip, r4, [r0]
    6380:	f1bc 0f00 	cmp.w	ip, #0
    6384:	d1f6      	bne.n	6374 <nrfx_flag32_alloc+0x1c>
    6386:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    638a:	d1e7      	bne.n	635c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    638c:	4801      	ldr	r0, [pc, #4]	; (6394 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    638e:	700b      	strb	r3, [r1, #0]
}
    6390:	bd70      	pop	{r4, r5, r6, pc}
    6392:	bf00      	nop
    6394:	0bad0000 	.word	0x0bad0000

00006398 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    6398:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    639a:	6803      	ldr	r3, [r0, #0]
    639c:	40cb      	lsrs	r3, r1
    639e:	07db      	lsls	r3, r3, #31
    63a0:	d414      	bmi.n	63cc <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    63a2:	2301      	movs	r3, #1
    63a4:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    63a6:	6802      	ldr	r2, [r0, #0]
    63a8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    63ac:	ea43 0102 	orr.w	r1, r3, r2
    63b0:	e850 4f00 	ldrex	r4, [r0]
    63b4:	4294      	cmp	r4, r2
    63b6:	d104      	bne.n	63c2 <nrfx_flag32_free+0x2a>
    63b8:	e840 1c00 	strex	ip, r1, [r0]
    63bc:	f1bc 0f00 	cmp.w	ip, #0
    63c0:	d1f6      	bne.n	63b0 <nrfx_flag32_free+0x18>
    63c2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    63c6:	d1ee      	bne.n	63a6 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    63c8:	4801      	ldr	r0, [pc, #4]	; (63d0 <nrfx_flag32_free+0x38>)
}
    63ca:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    63cc:	4801      	ldr	r0, [pc, #4]	; (63d4 <nrfx_flag32_free+0x3c>)
    63ce:	e7fc      	b.n	63ca <nrfx_flag32_free+0x32>
    63d0:	0bad0000 	.word	0x0bad0000
    63d4:	0bad0004 	.word	0x0bad0004

000063d8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    63d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    63da:	4604      	mov	r4, r0
    63dc:	b118      	cbz	r0, 63e6 <clock_stop+0xe>
    63de:	2801      	cmp	r0, #1
    63e0:	d022      	beq.n	6428 <clock_stop+0x50>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    63e2:	b003      	add	sp, #12
    63e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    63e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    63ea:	2202      	movs	r2, #2
    63ec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63f0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    63f4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63f8:	2201      	movs	r2, #1
    63fa:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    63fc:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    63fe:	2301      	movs	r3, #1
    6400:	f88d 3007 	strb.w	r3, [sp, #7]
    6404:	f242 7510 	movw	r5, #10000	; 0x2710
    6408:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    640c:	b1cc      	cbz	r4, 6442 <clock_stop+0x6a>
    640e:	2c01      	cmp	r4, #1
    6410:	d1e7      	bne.n	63e2 <clock_stop+0xa>
            if (p_clk_src != NULL)
    6412:	b3c7      	cbz	r7, 6486 <clock_stop+0xae>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6414:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6418:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    641c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    641e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6422:	03da      	lsls	r2, r3, #15
    6424:	d521      	bpl.n	646a <clock_stop+0x92>
    6426:	e016      	b.n	6456 <clock_stop+0x7e>
    p_reg->INTENCLR = mask;
    6428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    642c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    642e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6432:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6436:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    643a:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    643c:	f10d 0707 	add.w	r7, sp, #7
    6440:	e7dd      	b.n	63fe <clock_stop+0x26>
            if (p_clk_src != NULL)
    6442:	b1b7      	cbz	r7, 6472 <clock_stop+0x9a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6444:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6448:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    644c:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    644e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6452:	03d8      	lsls	r0, r3, #15
    6454:	d5c5      	bpl.n	63e2 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6456:	f89d 0007 	ldrb.w	r0, [sp, #7]
    645a:	2801      	cmp	r0, #1
    645c:	d103      	bne.n	6466 <clock_stop+0x8e>
    645e:	f003 f9ed 	bl	983c <nrfx_busy_wait>
    6462:	3d01      	subs	r5, #1
    6464:	d1d2      	bne.n	640c <clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    6466:	2c01      	cmp	r4, #1
    6468:	d1bb      	bne.n	63e2 <clock_stop+0xa>
            m_clock_cb.hfclk_started = false;
    646a:	4b0c      	ldr	r3, [pc, #48]	; (649c <clock_stop+0xc4>)
    646c:	2200      	movs	r2, #0
    646e:	715a      	strb	r2, [r3, #5]
    6470:	e7b7      	b.n	63e2 <clock_stop+0xa>
    6472:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6476:	03d9      	lsls	r1, r3, #15
    6478:	d5b3      	bpl.n	63e2 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    647a:	2001      	movs	r0, #1
    647c:	f003 f9de 	bl	983c <nrfx_busy_wait>
    6480:	3d01      	subs	r5, #1
    6482:	d1f6      	bne.n	6472 <clock_stop+0x9a>
    6484:	e7ad      	b.n	63e2 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6486:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    648a:	03db      	lsls	r3, r3, #15
    648c:	d5ed      	bpl.n	646a <clock_stop+0x92>
    648e:	2001      	movs	r0, #1
    6490:	f003 f9d4 	bl	983c <nrfx_busy_wait>
    6494:	3d01      	subs	r5, #1
    6496:	d1f6      	bne.n	6486 <clock_stop+0xae>
    6498:	e7e7      	b.n	646a <clock_stop+0x92>
    649a:	bf00      	nop
    649c:	20000f2c 	.word	0x20000f2c

000064a0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    64a0:	4b04      	ldr	r3, [pc, #16]	; (64b4 <nrfx_clock_init+0x14>)
    64a2:	791a      	ldrb	r2, [r3, #4]
    64a4:	b922      	cbnz	r2, 64b0 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    64a6:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    64a8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    64aa:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    64ac:	4802      	ldr	r0, [pc, #8]	; (64b8 <nrfx_clock_init+0x18>)
    64ae:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    64b0:	4802      	ldr	r0, [pc, #8]	; (64bc <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    64b2:	4770      	bx	lr
    64b4:	20000f2c 	.word	0x20000f2c
    64b8:	0bad0000 	.word	0x0bad0000
    64bc:	0bad000c 	.word	0x0bad000c

000064c0 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    64c0:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    64c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    64ca:	b16a      	cbz	r2, 64e8 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    64cc:	2200      	movs	r2, #0
    64ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    64d2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    64d6:	2201      	movs	r2, #1
    64d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    64dc:	4b11      	ldr	r3, [pc, #68]	; (6524 <nrfx_power_clock_irq_handler+0x64>)
    64de:	7958      	ldrb	r0, [r3, #5]
    64e0:	b910      	cbnz	r0, 64e8 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    64e2:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    64e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64ec:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    64f0:	b172      	cbz	r2, 6510 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    64f2:	2200      	movs	r2, #0
    64f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    64f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    64fc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6500:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6504:	0792      	lsls	r2, r2, #30
    6506:	d104      	bne.n	6512 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6508:	2201      	movs	r2, #1
    650a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    650e:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6510:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    6512:	2202      	movs	r2, #2
    6514:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6518:	4b02      	ldr	r3, [pc, #8]	; (6524 <nrfx_power_clock_irq_handler+0x64>)
}
    651a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    651e:	681b      	ldr	r3, [r3, #0]
    6520:	2001      	movs	r0, #1
    6522:	4718      	bx	r3
    6524:	20000f2c 	.word	0x20000f2c

00006528 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6528:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    652a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    652e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    6530:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    6532:	6002      	str	r2, [r0, #0]
}
    6534:	4802      	ldr	r0, [pc, #8]	; (6540 <nrf_gpio_pin_port_decode+0x18>)
    6536:	bf18      	it	ne
    6538:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    653c:	4770      	bx	lr
    653e:	bf00      	nop
    6540:	50000300 	.word	0x50000300

00006544 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6544:	4b03      	ldr	r3, [pc, #12]	; (6554 <pin_in_use_by_te+0x10>)
    6546:	3008      	adds	r0, #8
    6548:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    654c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6550:	4770      	bx	lr
    6552:	bf00      	nop
    6554:	20000074 	.word	0x20000074

00006558 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6558:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    655a:	f100 0308 	add.w	r3, r0, #8
    655e:	4c0c      	ldr	r4, [pc, #48]	; (6590 <call_handler+0x38>)
    6560:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6564:	05da      	lsls	r2, r3, #23
{
    6566:	4605      	mov	r5, r0
    6568:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    656a:	d507      	bpl.n	657c <call_handler+0x24>
    656c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6570:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6574:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6578:	6852      	ldr	r2, [r2, #4]
    657a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    657c:	68a3      	ldr	r3, [r4, #8]
    657e:	b12b      	cbz	r3, 658c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6580:	68e2      	ldr	r2, [r4, #12]
    6582:	4631      	mov	r1, r6
    6584:	4628      	mov	r0, r5
    }
}
    6586:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    658a:	4718      	bx	r3
}
    658c:	bd70      	pop	{r4, r5, r6, pc}
    658e:	bf00      	nop
    6590:	20000074 	.word	0x20000074

00006594 <release_handler>:
{
    6594:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6596:	4a12      	ldr	r2, [pc, #72]	; (65e0 <release_handler+0x4c>)
    6598:	3008      	adds	r0, #8
    659a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    659e:	05d9      	lsls	r1, r3, #23
    65a0:	d51b      	bpl.n	65da <release_handler+0x46>
    65a2:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    65a6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    65aa:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    65ae:	f102 040e 	add.w	r4, r2, #14
    65b2:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    65b4:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    65b8:	f413 7f80 	tst.w	r3, #256	; 0x100
    65bc:	d003      	beq.n	65c6 <release_handler+0x32>
    65be:	f3c3 2343 	ubfx	r3, r3, #9, #4
    65c2:	4299      	cmp	r1, r3
    65c4:	d009      	beq.n	65da <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    65c6:	3001      	adds	r0, #1
    65c8:	2830      	cmp	r0, #48	; 0x30
    65ca:	d1f3      	bne.n	65b4 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    65cc:	2300      	movs	r3, #0
    65ce:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    65d2:	4804      	ldr	r0, [pc, #16]	; (65e4 <release_handler+0x50>)
}
    65d4:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    65d6:	f7ff bedf 	b.w	6398 <nrfx_flag32_free>
}
    65da:	bc10      	pop	{r4}
    65dc:	4770      	bx	lr
    65de:	bf00      	nop
    65e0:	20000074 	.word	0x20000074
    65e4:	200000e8 	.word	0x200000e8

000065e8 <pin_handler_trigger_uninit>:
{
    65e8:	b538      	push	{r3, r4, r5, lr}
    65ea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    65ec:	f7ff ffaa 	bl	6544 <pin_in_use_by_te>
    65f0:	4c09      	ldr	r4, [pc, #36]	; (6618 <pin_handler_trigger_uninit+0x30>)
    65f2:	f102 0508 	add.w	r5, r2, #8
    65f6:	b140      	cbz	r0, 660a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    65f8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    65fc:	4907      	ldr	r1, [pc, #28]	; (661c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    65fe:	0b5b      	lsrs	r3, r3, #13
    6600:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6604:	2000      	movs	r0, #0
    6606:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    660a:	4610      	mov	r0, r2
    660c:	f7ff ffc2 	bl	6594 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6610:	2300      	movs	r3, #0
    6612:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6616:	bd38      	pop	{r3, r4, r5, pc}
    6618:	20000074 	.word	0x20000074
    661c:	40006000 	.word	0x40006000

00006620 <nrfx_gpiote_input_configure>:
{
    6620:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6624:	4604      	mov	r4, r0
    6626:	4616      	mov	r6, r2
    6628:	461d      	mov	r5, r3
    if (p_input_config)
    662a:	b301      	cbz	r1, 666e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    662c:	4f4e      	ldr	r7, [pc, #312]	; (6768 <nrfx_gpiote_input_configure+0x148>)
    662e:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6632:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    6636:	079b      	lsls	r3, r3, #30
    6638:	d502      	bpl.n	6640 <nrfx_gpiote_input_configure+0x20>
    663a:	f7ff ff83 	bl	6544 <pin_in_use_by_te>
    663e:	bb10      	cbnz	r0, 6686 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6640:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6642:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6646:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    664a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    664e:	f10d 020f 	add.w	r2, sp, #15
    6652:	460b      	mov	r3, r1
    6654:	4620      	mov	r0, r4
    6656:	f10d 010e 	add.w	r1, sp, #14
    665a:	f003 f93c 	bl	98d6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    665e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    6662:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6666:	f043 0301 	orr.w	r3, r3, #1
    666a:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    666e:	b346      	cbz	r6, 66c2 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6670:	4b3d      	ldr	r3, [pc, #244]	; (6768 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6672:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6676:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6678:	f104 0708 	add.w	r7, r4, #8
    667c:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    6680:	0788      	lsls	r0, r1, #30
    6682:	d502      	bpl.n	668a <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    6684:	b1aa      	cbz	r2, 66b2 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    6686:	4839      	ldr	r0, [pc, #228]	; (676c <nrfx_gpiote_input_configure+0x14c>)
    6688:	e01d      	b.n	66c6 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    668a:	f021 0120 	bic.w	r1, r1, #32
    668e:	04c9      	lsls	r1, r1, #19
    6690:	0cc9      	lsrs	r1, r1, #19
    6692:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    6696:	b162      	cbz	r2, 66b2 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    6698:	f1bc 0f03 	cmp.w	ip, #3
    669c:	d8f3      	bhi.n	6686 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    669e:	6872      	ldr	r2, [r6, #4]
    66a0:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    66a2:	f1bc 0f00 	cmp.w	ip, #0
    66a6:	d111      	bne.n	66cc <nrfx_gpiote_input_configure+0xac>
    66a8:	4a31      	ldr	r2, [pc, #196]	; (6770 <nrfx_gpiote_input_configure+0x150>)
    66aa:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    66ae:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    66b2:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    66b6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    66ba:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    66be:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    66c2:	bb45      	cbnz	r5, 6716 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    66c4:	482b      	ldr	r0, [pc, #172]	; (6774 <nrfx_gpiote_input_configure+0x154>)
}
    66c6:	b004      	add	sp, #16
    66c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    66cc:	00b2      	lsls	r2, r6, #2
    66ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    66d2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    66d6:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    66da:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    66de:	f020 0003 	bic.w	r0, r0, #3
    66e2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    66e6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    66ea:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    66ee:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    66f2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    66f6:	0220      	lsls	r0, r4, #8
    66f8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    66fc:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    6700:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    6704:	ea40 000e 	orr.w	r0, r0, lr
    6708:	f041 0120 	orr.w	r1, r1, #32
    670c:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    6710:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    6714:	e7cd      	b.n	66b2 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6716:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    671a:	4620      	mov	r0, r4
    671c:	f7ff ff3a 	bl	6594 <release_handler>
    if (!handler)
    6720:	2e00      	cmp	r6, #0
    6722:	d0cf      	beq.n	66c4 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6724:	4d10      	ldr	r5, [pc, #64]	; (6768 <nrfx_gpiote_input_configure+0x148>)
    6726:	e9d5 2300 	ldrd	r2, r3, [r5]
    672a:	4296      	cmp	r6, r2
    672c:	d101      	bne.n	6732 <nrfx_gpiote_input_configure+0x112>
    672e:	429f      	cmp	r7, r3
    6730:	d018      	beq.n	6764 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6732:	4811      	ldr	r0, [pc, #68]	; (6778 <nrfx_gpiote_input_configure+0x158>)
    6734:	f10d 010f 	add.w	r1, sp, #15
    6738:	f7ff fe0e 	bl	6358 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    673c:	4b0d      	ldr	r3, [pc, #52]	; (6774 <nrfx_gpiote_input_configure+0x154>)
    673e:	4298      	cmp	r0, r3
    6740:	d1c1      	bne.n	66c6 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    6742:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    6746:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    674a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    674e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6750:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6752:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6756:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    675a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    675e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    6762:	e7af      	b.n	66c4 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6764:	2200      	movs	r2, #0
    6766:	e7ee      	b.n	6746 <nrfx_gpiote_input_configure+0x126>
    6768:	20000074 	.word	0x20000074
    676c:	0bad0004 	.word	0x0bad0004
    6770:	40006000 	.word	0x40006000
    6774:	0bad0000 	.word	0x0bad0000
    6778:	200000e8 	.word	0x200000e8

0000677c <nrfx_gpiote_output_configure>:
{
    677c:	b5f0      	push	{r4, r5, r6, r7, lr}
    677e:	4604      	mov	r4, r0
    6780:	b085      	sub	sp, #20
    6782:	4615      	mov	r5, r2
    if (p_config)
    6784:	b319      	cbz	r1, 67ce <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6786:	4e33      	ldr	r6, [pc, #204]	; (6854 <nrfx_gpiote_output_configure+0xd8>)
    6788:	f100 0708 	add.w	r7, r0, #8
    678c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6790:	0793      	lsls	r3, r2, #30
    6792:	d403      	bmi.n	679c <nrfx_gpiote_output_configure+0x20>
    6794:	f7ff fed6 	bl	6544 <pin_in_use_by_te>
    6798:	2800      	cmp	r0, #0
    679a:	d158      	bne.n	684e <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    679c:	f012 0f1c 	tst.w	r2, #28
    67a0:	d002      	beq.n	67a8 <nrfx_gpiote_output_configure+0x2c>
    67a2:	784b      	ldrb	r3, [r1, #1]
    67a4:	2b01      	cmp	r3, #1
    67a6:	d052      	beq.n	684e <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    67a8:	2301      	movs	r3, #1
    67aa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    67ae:	2300      	movs	r3, #0
    67b0:	e9cd 1300 	strd	r1, r3, [sp]
    67b4:	1c4a      	adds	r2, r1, #1
    67b6:	1c8b      	adds	r3, r1, #2
    67b8:	4620      	mov	r0, r4
    67ba:	f10d 010f 	add.w	r1, sp, #15
    67be:	f003 f88a 	bl	98d6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    67c2:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    67c6:	f043 0303 	orr.w	r3, r3, #3
    67ca:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    67ce:	b915      	cbnz	r5, 67d6 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    67d0:	4821      	ldr	r0, [pc, #132]	; (6858 <nrfx_gpiote_output_configure+0xdc>)
}
    67d2:	b005      	add	sp, #20
    67d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    67d6:	4e1f      	ldr	r6, [pc, #124]	; (6854 <nrfx_gpiote_output_configure+0xd8>)
    67d8:	f104 0708 	add.w	r7, r4, #8
    67dc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    67e0:	0783      	lsls	r3, r0, #30
    67e2:	d534      	bpl.n	684e <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    67e4:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    67e8:	4661      	mov	r1, ip
    67ea:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    67ec:	f020 0020 	bic.w	r0, r0, #32
    67f0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    67f4:	04c0      	lsls	r0, r0, #19
    67f6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    67fa:	0cc0      	lsrs	r0, r0, #19
    67fc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6800:	2300      	movs	r3, #0
    6802:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6806:	786a      	ldrb	r2, [r5, #1]
    6808:	2a00      	cmp	r2, #0
    680a:	d0e1      	beq.n	67d0 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    680c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    6810:	78ad      	ldrb	r5, [r5, #2]
    6812:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6816:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    681a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    681e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6822:	0223      	lsls	r3, r4, #8
    6824:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6828:	0412      	lsls	r2, r2, #16
    682a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    682e:	ea43 030e 	orr.w	r3, r3, lr
    6832:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6834:	052a      	lsls	r2, r5, #20
    6836:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    683a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    683e:	4313      	orrs	r3, r2
    6840:	f040 0020 	orr.w	r0, r0, #32
    6844:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6848:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    684c:	e7c0      	b.n	67d0 <nrfx_gpiote_output_configure+0x54>
{
    684e:	4803      	ldr	r0, [pc, #12]	; (685c <nrfx_gpiote_output_configure+0xe0>)
    6850:	e7bf      	b.n	67d2 <nrfx_gpiote_output_configure+0x56>
    6852:	bf00      	nop
    6854:	20000074 	.word	0x20000074
    6858:	0bad0000 	.word	0x0bad0000
    685c:	0bad0004 	.word	0x0bad0004

00006860 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6860:	4b01      	ldr	r3, [pc, #4]	; (6868 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6862:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6866:	4770      	bx	lr
    6868:	20000074 	.word	0x20000074

0000686c <nrfx_gpiote_channel_get>:
{
    686c:	b508      	push	{r3, lr}
    686e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6870:	f7ff fe68 	bl	6544 <pin_in_use_by_te>
    6874:	b138      	cbz	r0, 6886 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6876:	4b05      	ldr	r3, [pc, #20]	; (688c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    6878:	4805      	ldr	r0, [pc, #20]	; (6890 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    687a:	3208      	adds	r2, #8
    687c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6880:	0b5b      	lsrs	r3, r3, #13
    6882:	700b      	strb	r3, [r1, #0]
}
    6884:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6886:	4803      	ldr	r0, [pc, #12]	; (6894 <nrfx_gpiote_channel_get+0x28>)
    6888:	e7fc      	b.n	6884 <nrfx_gpiote_channel_get+0x18>
    688a:	bf00      	nop
    688c:	20000074 	.word	0x20000074
    6890:	0bad0000 	.word	0x0bad0000
    6894:	0bad0004 	.word	0x0bad0004

00006898 <nrfx_gpiote_init>:
{
    6898:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    689a:	4c0f      	ldr	r4, [pc, #60]	; (68d8 <nrfx_gpiote_init+0x40>)
    689c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    68a0:	b9bd      	cbnz	r5, 68d2 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    68a2:	2260      	movs	r2, #96	; 0x60
    68a4:	4629      	mov	r1, r5
    68a6:	f104 0010 	add.w	r0, r4, #16
    68aa:	f002 fd97 	bl	93dc <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    68ae:	2006      	movs	r0, #6
    68b0:	f7fd f910 	bl	3ad4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    68b4:	4b09      	ldr	r3, [pc, #36]	; (68dc <nrfx_gpiote_init+0x44>)
    return err_code;
    68b6:	480a      	ldr	r0, [pc, #40]	; (68e0 <nrfx_gpiote_init+0x48>)
    68b8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    68bc:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    68c0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    68c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    68c8:	2301      	movs	r3, #1
    68ca:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    68ce:	6763      	str	r3, [r4, #116]	; 0x74
}
    68d0:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    68d2:	4804      	ldr	r0, [pc, #16]	; (68e4 <nrfx_gpiote_init+0x4c>)
    68d4:	e7fc      	b.n	68d0 <nrfx_gpiote_init+0x38>
    68d6:	bf00      	nop
    68d8:	20000074 	.word	0x20000074
    68dc:	40006000 	.word	0x40006000
    68e0:	0bad0000 	.word	0x0bad0000
    68e4:	0bad0005 	.word	0x0bad0005

000068e8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    68e8:	4b03      	ldr	r3, [pc, #12]	; (68f8 <nrfx_gpiote_is_init+0x10>)
    68ea:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    68ee:	3800      	subs	r0, #0
    68f0:	bf18      	it	ne
    68f2:	2001      	movne	r0, #1
    68f4:	4770      	bx	lr
    68f6:	bf00      	nop
    68f8:	20000074 	.word	0x20000074

000068fc <nrfx_gpiote_channel_free>:
{
    68fc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    68fe:	4801      	ldr	r0, [pc, #4]	; (6904 <nrfx_gpiote_channel_free+0x8>)
    6900:	f7ff bd4a 	b.w	6398 <nrfx_flag32_free>
    6904:	200000e4 	.word	0x200000e4

00006908 <nrfx_gpiote_channel_alloc>:
{
    6908:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    690a:	4801      	ldr	r0, [pc, #4]	; (6910 <nrfx_gpiote_channel_alloc+0x8>)
    690c:	f7ff bd24 	b.w	6358 <nrfx_flag32_alloc>
    6910:	200000e4 	.word	0x200000e4

00006914 <nrfx_gpiote_trigger_enable>:
{
    6914:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6916:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6918:	f7ff fe14 	bl	6544 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    691c:	f104 0208 	add.w	r2, r4, #8
    6920:	4b1e      	ldr	r3, [pc, #120]	; (699c <nrfx_gpiote_trigger_enable+0x88>)
    6922:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6926:	b1e8      	cbz	r0, 6964 <nrfx_gpiote_trigger_enable+0x50>
    6928:	f013 0502 	ands.w	r5, r3, #2
    692c:	d11a      	bne.n	6964 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    692e:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6930:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6932:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    6936:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    693a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    693e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6942:	6005      	str	r5, [r0, #0]
    6944:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6946:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    694a:	f040 0001 	orr.w	r0, r0, #1
    694e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    6952:	b129      	cbz	r1, 6960 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6954:	2201      	movs	r2, #1
    6956:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    695a:	4a11      	ldr	r2, [pc, #68]	; (69a0 <nrfx_gpiote_trigger_enable+0x8c>)
    695c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6960:	b003      	add	sp, #12
    6962:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6964:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6968:	2b04      	cmp	r3, #4
    696a:	d012      	beq.n	6992 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    696c:	2b05      	cmp	r3, #5
    696e:	d012      	beq.n	6996 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6970:	a801      	add	r0, sp, #4
    6972:	9401      	str	r4, [sp, #4]
    6974:	f7ff fdd8 	bl	6528 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6978:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    697a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    697e:	40d9      	lsrs	r1, r3
    6980:	f001 0101 	and.w	r1, r1, #1
    6984:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6986:	4620      	mov	r0, r4
}
    6988:	b003      	add	sp, #12
    698a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    698e:	f002 bfeb 	b.w	9968 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6992:	2103      	movs	r1, #3
    6994:	e7f7      	b.n	6986 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6996:	2102      	movs	r1, #2
    6998:	e7f5      	b.n	6986 <nrfx_gpiote_trigger_enable+0x72>
    699a:	bf00      	nop
    699c:	20000074 	.word	0x20000074
    69a0:	40006000 	.word	0x40006000

000069a4 <nrfx_gpiote_trigger_disable>:
{
    69a4:	b508      	push	{r3, lr}
    69a6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    69a8:	f7ff fdcc 	bl	6544 <pin_in_use_by_te>
    69ac:	b1c0      	cbz	r0, 69e0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    69ae:	f102 0108 	add.w	r1, r2, #8
    69b2:	4b0e      	ldr	r3, [pc, #56]	; (69ec <nrfx_gpiote_trigger_disable+0x48>)
    69b4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    69b8:	0799      	lsls	r1, r3, #30
    69ba:	d411      	bmi.n	69e0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    69bc:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    69be:	2201      	movs	r2, #1
    69c0:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    69c2:	009b      	lsls	r3, r3, #2
    69c4:	490a      	ldr	r1, [pc, #40]	; (69f0 <nrfx_gpiote_trigger_disable+0x4c>)
    69c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    69ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    69ce:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    69d2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    69d6:	f022 0203 	bic.w	r2, r2, #3
    69da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    69de:	bd08      	pop	{r3, pc}
    69e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    69e4:	2100      	movs	r1, #0
    69e6:	4610      	mov	r0, r2
    69e8:	f002 bfbe 	b.w	9968 <nrf_gpio_cfg_sense_set>
    69ec:	20000074 	.word	0x20000074
    69f0:	40006000 	.word	0x40006000

000069f4 <nrfx_gpiote_pin_uninit>:
{
    69f4:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    69f6:	4b0e      	ldr	r3, [pc, #56]	; (6a30 <nrfx_gpiote_pin_uninit+0x3c>)
    69f8:	f100 0208 	add.w	r2, r0, #8
{
    69fc:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    69fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6a02:	07db      	lsls	r3, r3, #31
    6a04:	d511      	bpl.n	6a2a <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    6a06:	f7ff ffcd 	bl	69a4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6a0a:	4620      	mov	r0, r4
    6a0c:	f7ff fdec 	bl	65e8 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6a10:	a801      	add	r0, sp, #4
    6a12:	9401      	str	r4, [sp, #4]
    6a14:	f7ff fd88 	bl	6528 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    6a18:	9b01      	ldr	r3, [sp, #4]
    6a1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6a1e:	2202      	movs	r2, #2
    6a20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    6a24:	4803      	ldr	r0, [pc, #12]	; (6a34 <nrfx_gpiote_pin_uninit+0x40>)
}
    6a26:	b002      	add	sp, #8
    6a28:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6a2a:	4803      	ldr	r0, [pc, #12]	; (6a38 <nrfx_gpiote_pin_uninit+0x44>)
    6a2c:	e7fb      	b.n	6a26 <nrfx_gpiote_pin_uninit+0x32>
    6a2e:	bf00      	nop
    6a30:	20000074 	.word	0x20000074
    6a34:	0bad0000 	.word	0x0bad0000
    6a38:	0bad0004 	.word	0x0bad0004

00006a3c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    6a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a40:	4b68      	ldr	r3, [pc, #416]	; (6be4 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    6a42:	4869      	ldr	r0, [pc, #420]	; (6be8 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6a44:	4969      	ldr	r1, [pc, #420]	; (6bec <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    6a46:	2600      	movs	r6, #0
{
    6a48:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6a4a:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6a4c:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a4e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6a50:	b135      	cbz	r5, 6a60 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    6a52:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    6a56:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6a58:	bf1e      	ittt	ne
    6a5a:	601c      	strne	r4, [r3, #0]
    6a5c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    6a5e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6a60:	3304      	adds	r3, #4
    6a62:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    6a64:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6a68:	d1f1      	bne.n	6a4e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a6a:	f8df 917c 	ldr.w	r9, [pc, #380]	; 6be8 <nrfx_gpiote_irq_handler+0x1ac>
    6a6e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6a72:	2b00      	cmp	r3, #0
    6a74:	f000 8099 	beq.w	6baa <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    6a78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6a7c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6a80:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6a82:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6a86:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    6a8a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6a8c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6a90:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    6a94:	f10d 0a10 	add.w	sl, sp, #16
    6a98:	ea4f 1348 	mov.w	r3, r8, lsl #5
    6a9c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    6a9e:	f04f 0b01 	mov.w	fp, #1
    6aa2:	e049      	b.n	6b38 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    6aa4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6aa6:	4a52      	ldr	r2, [pc, #328]	; (6bf0 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    6aa8:	fa94 f4a4 	rbit	r4, r4
    6aac:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    6ab0:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6ab2:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6ab4:	f104 0308 	add.w	r3, r4, #8
    6ab8:	9403      	str	r4, [sp, #12]
    6aba:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    6abe:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    6ac2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6ac6:	fa0b f202 	lsl.w	r2, fp, r2
    6aca:	ea23 0302 	bic.w	r3, r3, r2
    6ace:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6ad2:	a803      	add	r0, sp, #12
    6ad4:	f7ff fd28 	bl	6528 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6ad8:	9b03      	ldr	r3, [sp, #12]
    6ada:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6ade:	08b9      	lsrs	r1, r7, #2
    6ae0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    6ae4:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    6ae8:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6aea:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6aec:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    6af0:	d52c      	bpl.n	6b4c <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    6af2:	4620      	mov	r0, r4
    6af4:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6af6:	b2dd      	uxtb	r5, r3
    6af8:	f7ff fd2e 	bl	6558 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6afc:	a803      	add	r0, sp, #12
    6afe:	9403      	str	r4, [sp, #12]
    6b00:	f7ff fd12 	bl	6528 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6b04:	9b03      	ldr	r3, [sp, #12]
    6b06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6b0a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6b0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    6b12:	429d      	cmp	r5, r3
    6b14:	d107      	bne.n	6b26 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6b16:	2100      	movs	r1, #0
    6b18:	4620      	mov	r0, r4
    6b1a:	f002 ff25 	bl	9968 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6b1e:	4629      	mov	r1, r5
    6b20:	4620      	mov	r0, r4
    6b22:	f002 ff21 	bl	9968 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6b26:	a803      	add	r0, sp, #12
    6b28:	9403      	str	r4, [sp, #12]
    6b2a:	f7ff fcfd 	bl	6528 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    6b2e:	9b03      	ldr	r3, [sp, #12]
    6b30:	fa0b f303 	lsl.w	r3, fp, r3
    6b34:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    6b38:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    6b3c:	2c00      	cmp	r4, #0
    6b3e:	d1b1      	bne.n	6aa4 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    6b40:	f1b8 0f00 	cmp.w	r8, #0
    6b44:	d11d      	bne.n	6b82 <nrfx_gpiote_irq_handler+0x146>
    6b46:	f04f 0801 	mov.w	r8, #1
    6b4a:	e7a5      	b.n	6a98 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6b4c:	2b02      	cmp	r3, #2
    6b4e:	d10c      	bne.n	6b6a <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6b50:	2103      	movs	r1, #3
    6b52:	4620      	mov	r0, r4
    6b54:	f002 ff08 	bl	9968 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6b58:	f005 0305 	and.w	r3, r5, #5
    6b5c:	2b01      	cmp	r3, #1
    6b5e:	d1e2      	bne.n	6b26 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    6b60:	4639      	mov	r1, r7
    6b62:	4620      	mov	r0, r4
    6b64:	f7ff fcf8 	bl	6558 <call_handler>
    6b68:	e7dd      	b.n	6b26 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6b6a:	2102      	movs	r1, #2
    6b6c:	4620      	mov	r0, r4
    6b6e:	9301      	str	r3, [sp, #4]
    6b70:	f002 fefa 	bl	9968 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6b74:	2d03      	cmp	r5, #3
    6b76:	d0f3      	beq.n	6b60 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6b78:	9b01      	ldr	r3, [sp, #4]
    6b7a:	2b03      	cmp	r3, #3
    6b7c:	d1d3      	bne.n	6b26 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6b7e:	2d02      	cmp	r5, #2
    6b80:	e7ed      	b.n	6b5e <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    6b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6b86:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    6b8a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    6b8e:	4919      	ldr	r1, [pc, #100]	; (6bf4 <nrfx_gpiote_irq_handler+0x1b8>)
    6b90:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    6b94:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6b96:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    6b9a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    6b9e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    6ba0:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    6ba2:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    6ba6:	f47f af73 	bne.w	6a90 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    6baa:	2401      	movs	r4, #1
    while (mask)
    6bac:	b916      	cbnz	r6, 6bb4 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6bae:	b007      	add	sp, #28
    6bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    6bb4:	fa96 f3a6 	rbit	r3, r6
    6bb8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6bbc:	fa04 f203 	lsl.w	r2, r4, r3
    6bc0:	009b      	lsls	r3, r3, #2
    6bc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6bc6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6bca:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6bce:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6bd2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6bd6:	f3c0 2005 	ubfx	r0, r0, #8, #6
    6bda:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6bde:	f7ff fcbb 	bl	6558 <call_handler>
    6be2:	e7e3      	b.n	6bac <nrfx_gpiote_irq_handler+0x170>
    6be4:	40006100 	.word	0x40006100
    6be8:	40006000 	.word	0x40006000
    6bec:	40006120 	.word	0x40006120
    6bf0:	20000074 	.word	0x20000074
    6bf4:	50000300 	.word	0x50000300

00006bf8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    6bf8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    6bfa:	4801      	ldr	r0, [pc, #4]	; (6c00 <nrfx_ppi_channel_alloc+0x8>)
    6bfc:	f7ff bbac 	b.w	6358 <nrfx_flag32_alloc>
    6c00:	200000f0 	.word	0x200000f0

00006c04 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    6c04:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    6c06:	4b3b      	ldr	r3, [pc, #236]	; (6cf4 <twi_tx_start_transfer+0xf0>)
    6c08:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6c0a:	2300      	movs	r3, #0
    6c0c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    6c10:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6c14:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    6c18:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    6c1c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    6c20:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    6c24:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    6c28:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    6c2c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    6c30:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    6c32:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c36:	2301      	movs	r3, #1
    6c38:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    6c3a:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    6c3e:	429a      	cmp	r2, r3
    6c40:	bf18      	it	ne
    6c42:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6c44:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6c46:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    6c48:	4293      	cmp	r3, r2
{
    6c4a:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    6c4c:	d20e      	bcs.n	6c6c <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    6c4e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    6c50:	5cd3      	ldrb	r3, [r2, r3]
    6c52:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
    6c56:	680b      	ldr	r3, [r1, #0]
    6c58:	b303      	cbz	r3, 6c9c <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    6c5a:	f240 2386 	movw	r3, #646	; 0x286
    6c5e:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    6c60:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    6c62:	4825      	ldr	r0, [pc, #148]	; (6cf8 <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
    6c64:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    6c68:	b002      	add	sp, #8
    6c6a:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
    6c6c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    6c70:	b113      	cbz	r3, 6c78 <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c72:	2301      	movs	r3, #1
    6c74:	61c3      	str	r3, [r0, #28]
            return false;
    6c76:	e7ee      	b.n	6c56 <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    6c78:	6a0b      	ldr	r3, [r1, #32]
    6c7a:	f013 0f40 	tst.w	r3, #64	; 0x40
    6c7e:	f04f 0301 	mov.w	r3, #1
    6c82:	bf16      	itet	ne
    6c84:	61c3      	strne	r3, [r0, #28]
    6c86:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    6c88:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
    6c8c:	e7e3      	b.n	6c56 <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
    6c8e:	4620      	mov	r0, r4
    6c90:	f002 fe79 	bl	9986 <twi_transfer>
        while ((hw_timeout > 0) &&
    6c94:	b128      	cbz	r0, 6ca2 <twi_tx_start_transfer+0x9e>
            hw_timeout--;
    6c96:	9b01      	ldr	r3, [sp, #4]
    6c98:	3b01      	subs	r3, #1
    6c9a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    6c9c:	9b01      	ldr	r3, [sp, #4]
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	dcf5      	bgt.n	6c8e <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
    6ca2:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    6ca6:	b95b      	cbnz	r3, 6cc0 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    6ca8:	4813      	ldr	r0, [pc, #76]	; (6cf8 <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
    6caa:	9b01      	ldr	r3, [sp, #4]
    6cac:	2b00      	cmp	r3, #0
    6cae:	dcdb      	bgt.n	6c68 <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    6cb0:	2300      	movs	r3, #0
    6cb2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    6cb6:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    6cb8:	4810      	ldr	r0, [pc, #64]	; (6cfc <twi_tx_start_transfer+0xf8>)
    6cba:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    6cbe:	e7d3      	b.n	6c68 <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    6cc0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    6cc4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    6cc8:	b18b      	cbz	r3, 6cee <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    6cca:	4a0d      	ldr	r2, [pc, #52]	; (6d00 <twi_tx_start_transfer+0xfc>)
    6ccc:	480b      	ldr	r0, [pc, #44]	; (6cfc <twi_tx_start_transfer+0xf8>)
    6cce:	f013 0f01 	tst.w	r3, #1
    6cd2:	bf18      	it	ne
    6cd4:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    6cd6:	f013 0f02 	tst.w	r3, #2
    6cda:	f102 0201 	add.w	r2, r2, #1
    6cde:	bf18      	it	ne
    6ce0:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    6ce2:	f013 0f04 	tst.w	r3, #4
    6ce6:	4b07      	ldr	r3, [pc, #28]	; (6d04 <twi_tx_start_transfer+0x100>)
    6ce8:	bf18      	it	ne
    6cea:	4618      	movne	r0, r3
    6cec:	e7dd      	b.n	6caa <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
    6cee:	4803      	ldr	r0, [pc, #12]	; (6cfc <twi_tx_start_transfer+0xf8>)
    6cf0:	e7db      	b.n	6caa <twi_tx_start_transfer+0xa6>
    6cf2:	bf00      	nop
    6cf4:	000186a0 	.word	0x000186a0
    6cf8:	0bad0000 	.word	0x0bad0000
    6cfc:	0bad0001 	.word	0x0bad0001
    6d00:	0bae0000 	.word	0x0bae0000
    6d04:	0bae0002 	.word	0x0bae0002

00006d08 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    6d08:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    6d0a:	4b33      	ldr	r3, [pc, #204]	; (6dd8 <twi_rx_start_transfer+0xd0>)
    6d0c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d0e:	2300      	movs	r3, #0
    6d10:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    6d14:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    6d18:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    6d1c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    6d20:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    6d24:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    6d28:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    6d2c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    6d30:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    6d32:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6d36:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    6d38:	2b01      	cmp	r3, #1
{
    6d3a:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    6d3c:	d117      	bne.n	6d6e <twi_rx_start_transfer+0x66>
    6d3e:	6a0b      	ldr	r3, [r1, #32]
    6d40:	065b      	lsls	r3, r3, #25
    6d42:	d414      	bmi.n	6d6e <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    6d44:	2302      	movs	r3, #2
    6d46:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d4a:	2301      	movs	r3, #1
    6d4c:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    6d4e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    6d52:	2a02      	cmp	r2, #2
    6d54:	bf18      	it	ne
    6d56:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    6d58:	680b      	ldr	r3, [r1, #0]
    6d5a:	b18b      	cbz	r3, 6d80 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    6d5c:	f240 2386 	movw	r3, #646	; 0x286
    6d60:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    6d62:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    6d64:	481d      	ldr	r0, [pc, #116]	; (6ddc <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    6d66:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    6d6a:	b002      	add	sp, #8
    6d6c:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
    6d6e:	2301      	movs	r3, #1
    6d70:	e7e9      	b.n	6d46 <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
    6d72:	4620      	mov	r0, r4
    6d74:	f002 fe07 	bl	9986 <twi_transfer>
        while ((hw_timeout > 0) &&
    6d78:	b128      	cbz	r0, 6d86 <twi_rx_start_transfer+0x7e>
               hw_timeout--;
    6d7a:	9b01      	ldr	r3, [sp, #4]
    6d7c:	3b01      	subs	r3, #1
    6d7e:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    6d80:	9b01      	ldr	r3, [sp, #4]
    6d82:	2b00      	cmp	r3, #0
    6d84:	dcf5      	bgt.n	6d72 <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
    6d86:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    6d8a:	b95b      	cbnz	r3, 6da4 <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    6d8c:	4813      	ldr	r0, [pc, #76]	; (6ddc <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    6d8e:	9b01      	ldr	r3, [sp, #4]
    6d90:	2b00      	cmp	r3, #0
    6d92:	dcea      	bgt.n	6d6a <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    6d94:	2300      	movs	r3, #0
    6d96:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    6d9a:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    6d9c:	4810      	ldr	r0, [pc, #64]	; (6de0 <twi_rx_start_transfer+0xd8>)
    6d9e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    6da2:	e7e2      	b.n	6d6a <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
    6da4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    6da8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    6dac:	b18b      	cbz	r3, 6dd2 <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    6dae:	4a0d      	ldr	r2, [pc, #52]	; (6de4 <twi_rx_start_transfer+0xdc>)
    6db0:	480b      	ldr	r0, [pc, #44]	; (6de0 <twi_rx_start_transfer+0xd8>)
    6db2:	f013 0f01 	tst.w	r3, #1
    6db6:	bf18      	it	ne
    6db8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    6dba:	f013 0f02 	tst.w	r3, #2
    6dbe:	f102 0201 	add.w	r2, r2, #1
    6dc2:	bf18      	it	ne
    6dc4:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    6dc6:	f013 0f04 	tst.w	r3, #4
    6dca:	4b07      	ldr	r3, [pc, #28]	; (6de8 <twi_rx_start_transfer+0xe0>)
    6dcc:	bf18      	it	ne
    6dce:	4618      	movne	r0, r3
    6dd0:	e7dd      	b.n	6d8e <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
    6dd2:	4803      	ldr	r0, [pc, #12]	; (6de0 <twi_rx_start_transfer+0xd8>)
    6dd4:	e7db      	b.n	6d8e <twi_rx_start_transfer+0x86>
    6dd6:	bf00      	nop
    6dd8:	000186a0 	.word	0x000186a0
    6ddc:	0bad0000 	.word	0x0bad0000
    6de0:	0bad0001 	.word	0x0bad0001
    6de4:	0bae0000 	.word	0x0bae0000
    6de8:	0bae0002 	.word	0x0bae0002

00006dec <nrfx_twi_init>:
{
    6dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    6df0:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6df2:	4d2b      	ldr	r5, [pc, #172]	; (6ea0 <nrfx_twi_init+0xb4>)
    6df4:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    6df8:	fb0e fe07 	mul.w	lr, lr, r7
    6dfc:	eb05 040e 	add.w	r4, r5, lr
    6e00:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    6e04:	2e00      	cmp	r6, #0
    6e06:	d149      	bne.n	6e9c <nrfx_twi_init+0xb0>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    6e08:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
    6e0c:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
    6e10:	60a6      	str	r6, [r4, #8]
    p_cb->p_context       = p_context;
    6e12:	6063      	str	r3, [r4, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    6e14:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    6e18:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    6e1c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    6e20:	7b4b      	ldrb	r3, [r1, #13]
    6e22:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    6e26:	7b8b      	ldrb	r3, [r1, #14]
    6e28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    6e2c:	b9e3      	cbnz	r3, 6e68 <nrfx_twi_init+0x7c>
        TWI_PIN_INIT(p_config->scl);
    6e2e:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    6e30:	4b1c      	ldr	r3, [pc, #112]	; (6ea4 <nrfx_twi_init+0xb8>)
    *p_pin = pin_number & 0x1F;
    6e32:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    6e36:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    6e38:	2c01      	cmp	r4, #1
    6e3a:	bf08      	it	eq
    6e3c:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    6e3e:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 0: return NRF_P0;
    6e42:	bf18      	it	ne
    6e44:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6e48:	f240 6e0c 	movw	lr, #1548	; 0x60c
    6e4c:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    6e50:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    6e52:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    6e56:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    6e58:	2c01      	cmp	r4, #1
    6e5a:	bf18      	it	ne
    6e5c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6e60:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    6e64:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    6e68:	7bcb      	ldrb	r3, [r1, #15]
    6e6a:	b92b      	cbnz	r3, 6e78 <nrfx_twi_init+0x8c>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    6e6c:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    6e70:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    6e74:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    6e78:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    6e7a:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
    6e7e:	b122      	cbz	r2, 6e8a <nrfx_twi_init+0x9e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    6e80:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    6e82:	f340 3007 	sbfx	r0, r0, #12, #8
    6e86:	f7fc fe25 	bl	3ad4 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6e8a:	233c      	movs	r3, #60	; 0x3c
    6e8c:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    6e90:	4805      	ldr	r0, [pc, #20]	; (6ea8 <nrfx_twi_init+0xbc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6e92:	2301      	movs	r3, #1
    6e94:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    6e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
    6e9c:	4803      	ldr	r0, [pc, #12]	; (6eac <nrfx_twi_init+0xc0>)
    6e9e:	e7fb      	b.n	6e98 <nrfx_twi_init+0xac>
    6ea0:	20000f34 	.word	0x20000f34
    6ea4:	50000300 	.word	0x50000300
    6ea8:	0bad0000 	.word	0x0bad0000
    6eac:	0bad0005 	.word	0x0bad0005

00006eb0 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    6eb0:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6eb2:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    6eb4:	2105      	movs	r1, #5
    6eb6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    6eba:	4b04      	ldr	r3, [pc, #16]	; (6ecc <nrfx_twi_enable+0x1c>)
    6ebc:	213c      	movs	r1, #60	; 0x3c
    6ebe:	fb01 3302 	mla	r3, r1, r2, r3
    6ec2:	2202      	movs	r2, #2
    6ec4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    6ec8:	4770      	bx	lr
    6eca:	bf00      	nop
    6ecc:	20000f34 	.word	0x20000f34

00006ed0 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    6ed0:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    6ed2:	4a0b      	ldr	r2, [pc, #44]	; (6f00 <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6ed4:	7901      	ldrb	r1, [r0, #4]
    6ed6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    6eda:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    6ede:	f022 0203 	bic.w	r2, r2, #3
    6ee2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    6ee6:	2200      	movs	r2, #0
    6ee8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    6eec:	4b05      	ldr	r3, [pc, #20]	; (6f04 <nrfx_twi_disable+0x34>)
    6eee:	203c      	movs	r0, #60	; 0x3c
    6ef0:	fb00 3301 	mla	r3, r0, r1, r3
    6ef4:	2101      	movs	r1, #1
    6ef6:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
    6efa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
    6efe:	4770      	bx	lr
    6f00:	00044286 	.word	0x00044286
    6f04:	20000f34 	.word	0x20000f34

00006f08 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    6f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    6f0c:	4f31      	ldr	r7, [pc, #196]	; (6fd4 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6f0e:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    6f10:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    6f14:	233c      	movs	r3, #60	; 0x3c
    6f16:	fb03 7304 	mla	r3, r3, r4, r7
{
    6f1a:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    6f1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    6f20:	2b01      	cmp	r3, #1
{
    6f22:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    6f24:	d104      	bne.n	6f30 <nrfx_twi_xfer+0x28>
    6f26:	780b      	ldrb	r3, [r1, #0]
    6f28:	2b01      	cmp	r3, #1
    6f2a:	d106      	bne.n	6f3a <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    6f2c:	482a      	ldr	r0, [pc, #168]	; (6fd8 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    6f2e:	e011      	b.n	6f54 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    6f30:	2b02      	cmp	r3, #2
    6f32:	d102      	bne.n	6f3a <nrfx_twi_xfer+0x32>
    6f34:	780b      	ldrb	r3, [r1, #0]
    6f36:	2b01      	cmp	r3, #1
    6f38:	d1f8      	bne.n	6f2c <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    6f3a:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    6f3c:	4b27      	ldr	r3, [pc, #156]	; (6fdc <nrfx_twi_xfer+0xd4>)
    6f3e:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    6f42:	fb06 7604 	mla	r6, r6, r4, r7
    6f46:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    6f4a:	b12b      	cbz	r3, 6f58 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    6f4c:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    6f4e:	4824      	ldr	r0, [pc, #144]	; (6fe0 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    6f50:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    6f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    6f58:	f08c 0304 	eor.w	r3, ip, #4
    6f5c:	f3c3 0380 	ubfx	r3, r3, #2, #1
    6f60:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    6f64:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    6f68:	46a8      	mov	r8, r5
    6f6a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    6f6e:	f106 0e0c 	add.w	lr, r6, #12
    6f72:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6f76:	f8d8 3000 	ldr.w	r3, [r8]
    6f7a:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    6f7e:	686b      	ldr	r3, [r5, #4]
    6f80:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    6f82:	68eb      	ldr	r3, [r5, #12]
    6f84:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    6f86:	786b      	ldrb	r3, [r5, #1]
    6f88:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    6f8c:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6f8e:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    6f92:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6f94:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    6f98:	d017      	beq.n	6fca <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    6f9a:	b99b      	cbnz	r3, 6fc4 <nrfx_twi_xfer+0xbc>
    6f9c:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    6fa0:	233c      	movs	r3, #60	; 0x3c
    6fa2:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    6fa6:	4651      	mov	r1, sl
    6fa8:	4648      	mov	r0, r9
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    6faa:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    6fae:	f7ff fe29 	bl	6c04 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    6fb2:	233c      	movs	r3, #60	; 0x3c
    6fb4:	435c      	muls	r4, r3
    6fb6:	193a      	adds	r2, r7, r4
    6fb8:	593b      	ldr	r3, [r7, r4]
    6fba:	2b00      	cmp	r3, #0
    6fbc:	d1ca      	bne.n	6f54 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    6fbe:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    6fc2:	e7c7      	b.n	6f54 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    6fc4:	f04f 0c01 	mov.w	ip, #1
    6fc8:	e7ea      	b.n	6fa0 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    6fca:	4651      	mov	r1, sl
    6fcc:	4648      	mov	r0, r9
    6fce:	f7ff fe9b 	bl	6d08 <twi_rx_start_transfer>
    6fd2:	e7ee      	b.n	6fb2 <nrfx_twi_xfer+0xaa>
    6fd4:	20000f34 	.word	0x20000f34
    6fd8:	0bad0005 	.word	0x0bad0005
    6fdc:	00044286 	.word	0x00044286
    6fe0:	0bad000b 	.word	0x0bad000b

00006fe4 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    6fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    6fe6:	4c32      	ldr	r4, [pc, #200]	; (70b0 <nrfx_twi_0_irq_handler+0xcc>)
    6fe8:	4832      	ldr	r0, [pc, #200]	; (70b4 <nrfx_twi_0_irq_handler+0xd0>)
{
    6fea:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    6fec:	4621      	mov	r1, r4
    6fee:	f002 fcca 	bl	9986 <twi_transfer>
    6ff2:	2800      	cmp	r0, #0
    6ff4:	d159      	bne.n	70aa <nrfx_twi_0_irq_handler+0xc6>
    if (!p_cb->error &&
    6ff6:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    6ffa:	b9ff      	cbnz	r7, 703c <nrfx_twi_0_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    6ffc:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
    6ffe:	1e93      	subs	r3, r2, #2
    7000:	2b01      	cmp	r3, #1
    7002:	d81b      	bhi.n	703c <nrfx_twi_0_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    7004:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7006:	69a3      	ldr	r3, [r4, #24]
    7008:	4298      	cmp	r0, r3
    700a:	d117      	bne.n	703c <nrfx_twi_0_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    700c:	69e3      	ldr	r3, [r4, #28]
    700e:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    7010:	6963      	ldr	r3, [r4, #20]
    7012:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    7014:	6a23      	ldr	r3, [r4, #32]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    7016:	4827      	ldr	r0, [pc, #156]	; (70b4 <nrfx_twi_0_irq_handler+0xd0>)
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    7018:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    701c:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    7020:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    7022:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    7026:	d104      	bne.n	7032 <nrfx_twi_0_irq_handler+0x4e>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    7028:	b007      	add	sp, #28
    702a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    702e:	f7ff bde9 	b.w	6c04 <twi_tx_start_transfer>
}
    7032:	b007      	add	sp, #28
    7034:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    7038:	f7ff be66 	b.w	6d08 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    703c:	4e1e      	ldr	r6, [pc, #120]	; (70b8 <nrfx_twi_0_irq_handler+0xd4>)
    703e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    7040:	ad01      	add	r5, sp, #4
    7042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7044:	6833      	ldr	r3, [r6, #0]
    7046:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    7048:	b347      	cbz	r7, 709c <nrfx_twi_0_irq_handler+0xb8>
    uint32_t error_source = p_reg->ERRORSRC;
    704a:	4a1a      	ldr	r2, [pc, #104]	; (70b4 <nrfx_twi_0_irq_handler+0xd0>)
    704c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    7050:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    7054:	f013 0102 	ands.w	r1, r3, #2
    7058:	d006      	beq.n	7068 <nrfx_twi_0_irq_handler+0x84>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    705a:	2301      	movs	r3, #1
    705c:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    7060:	2300      	movs	r3, #0
    7062:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    7066:	e007      	b.n	7078 <nrfx_twi_0_irq_handler+0x94>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    7068:	f013 0204 	ands.w	r2, r3, #4
    706c:	d009      	beq.n	7082 <nrfx_twi_0_irq_handler+0x9e>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    706e:	2302      	movs	r3, #2
    7070:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    7074:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
    7078:	e9d4 3100 	ldrd	r3, r1, [r4]
    707c:	4668      	mov	r0, sp
    707e:	4798      	blx	r3
}
    7080:	e013      	b.n	70aa <nrfx_twi_0_irq_handler+0xc6>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    7082:	f013 0301 	ands.w	r3, r3, #1
    7086:	d005      	beq.n	7094 <nrfx_twi_0_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_OVERRUN;
    7088:	2303      	movs	r3, #3
    708a:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    708e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    7092:	e7f1      	b.n	7078 <nrfx_twi_0_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    7094:	2204      	movs	r2, #4
    7096:	f88d 2000 	strb.w	r2, [sp]
    709a:	e7e2      	b.n	7062 <nrfx_twi_0_irq_handler+0x7e>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    709c:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
    709e:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    70a2:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
    70a4:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    70a8:	d5e6      	bpl.n	7078 <nrfx_twi_0_irq_handler+0x94>
}
    70aa:	b007      	add	sp, #28
    70ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    70ae:	bf00      	nop
    70b0:	20000f34 	.word	0x20000f34
    70b4:	40003000 	.word	0x40003000
    70b8:	20000f40 	.word	0x20000f40

000070bc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    70bc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    70be:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    70c2:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    70c4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    70c6:	6002      	str	r2, [r0, #0]
}
    70c8:	4802      	ldr	r0, [pc, #8]	; (70d4 <nrf_gpio_pin_port_decode+0x18>)
    70ca:	bf18      	it	ne
    70cc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    70d0:	4770      	bx	lr
    70d2:	bf00      	nop
    70d4:	50000300 	.word	0x50000300

000070d8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    70d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    70da:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    70dc:	f002 fceb 	bl	9ab6 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    70e0:	4608      	mov	r0, r1
    70e2:	f002 fce8 	bl	9ab6 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    70e6:	a801      	add	r0, sp, #4
    70e8:	9601      	str	r6, [sp, #4]
    70ea:	f7ff ffe7 	bl	70bc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    70ee:	9b01      	ldr	r3, [sp, #4]
    70f0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    70f4:	460c      	mov	r4, r1
    70f6:	f240 610d 	movw	r1, #1549	; 0x60d
    70fa:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    70fe:	a801      	add	r0, sp, #4
    7100:	9401      	str	r4, [sp, #4]
    7102:	f7ff ffdb 	bl	70bc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7106:	9b01      	ldr	r3, [sp, #4]
    7108:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    710c:	2509      	movs	r5, #9
    710e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    7112:	2004      	movs	r0, #4
    7114:	f002 fb92 	bl	983c <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7118:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    711a:	a801      	add	r0, sp, #4
    711c:	9401      	str	r4, [sp, #4]
    711e:	f7ff ffcd 	bl	70bc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7122:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    7124:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7128:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    712a:	07db      	lsls	r3, r3, #31
    712c:	d415      	bmi.n	715a <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    712e:	a801      	add	r0, sp, #4
    7130:	9601      	str	r6, [sp, #4]
    7132:	f7ff ffc3 	bl	70bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7136:	9b01      	ldr	r3, [sp, #4]
    7138:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    713c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    7140:	2004      	movs	r0, #4
    7142:	f002 fb7b 	bl	983c <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    7146:	4630      	mov	r0, r6
    7148:	f002 fcb5 	bl	9ab6 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    714c:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    714e:	2004      	movs	r0, #4
    7150:	f002 fb74 	bl	983c <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    7154:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    7158:	d1df      	bne.n	711a <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    715a:	a801      	add	r0, sp, #4
    715c:	9401      	str	r4, [sp, #4]
    715e:	f7ff ffad 	bl	70bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7162:	9a01      	ldr	r2, [sp, #4]
    7164:	2301      	movs	r3, #1
    7166:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    7168:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    716c:	2004      	movs	r0, #4
    716e:	f002 fb65 	bl	983c <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    7172:	4620      	mov	r0, r4
    7174:	f002 fc9f 	bl	9ab6 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    7178:	2004      	movs	r0, #4
    717a:	f002 fb5f 	bl	983c <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    717e:	a801      	add	r0, sp, #4
    7180:	9401      	str	r4, [sp, #4]
    7182:	f7ff ff9b 	bl	70bc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7186:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    7188:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    718c:	4803      	ldr	r0, [pc, #12]	; (719c <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    718e:	40d3      	lsrs	r3, r2
    7190:	f003 0301 	and.w	r3, r3, #1
    7194:	1ac0      	subs	r0, r0, r3
    7196:	b003      	add	sp, #12
    7198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    719a:	bf00      	nop
    719c:	0bad0001 	.word	0x0bad0001

000071a0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    71a0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    71a2:	4c11      	ldr	r4, [pc, #68]	; (71e8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    71a4:	4a11      	ldr	r2, [pc, #68]	; (71ec <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    71a6:	4912      	ldr	r1, [pc, #72]	; (71f0 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    71a8:	2303      	movs	r3, #3
    71aa:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    71ac:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    71ae:	4b11      	ldr	r3, [pc, #68]	; (71f4 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    71b0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    71b2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    71b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    71b8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    71ba:	2300      	movs	r3, #0
    71bc:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    71be:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    71c0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    71c2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    71c4:	4a0c      	ldr	r2, [pc, #48]	; (71f8 <_DoInit+0x58>)
    71c6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    71c8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    71ca:	2210      	movs	r2, #16
    71cc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    71ce:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    71d0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    71d2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    71d4:	f002 f8c9 	bl	936a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    71d8:	4908      	ldr	r1, [pc, #32]	; (71fc <_DoInit+0x5c>)
    71da:	4620      	mov	r0, r4
    71dc:	f002 f8c5 	bl	936a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    71e0:	2320      	movs	r3, #32
    71e2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    71e4:	bd10      	pop	{r4, pc}
    71e6:	bf00      	nop
    71e8:	20000f70 	.word	0x20000f70
    71ec:	0000b103 	.word	0x0000b103
    71f0:	0000b10c 	.word	0x0000b10c
    71f4:	20001251 	.word	0x20001251
    71f8:	20001241 	.word	0x20001241
    71fc:	0000b110 	.word	0x0000b110

00007200 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    7204:	4f21      	ldr	r7, [pc, #132]	; (728c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    7206:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    720a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    720c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7210:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    7212:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7214:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7216:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7218:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    721a:	d831      	bhi.n	7280 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    721c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    7220:	ebaa 0905 	sub.w	r9, sl, r5
    7224:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    7228:	4294      	cmp	r4, r2
    722a:	d811      	bhi.n	7250 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    722c:	2318      	movs	r3, #24
    722e:	fb06 3303 	mla	r3, r6, r3, r3
    7232:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    7234:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7236:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    7238:	4641      	mov	r1, r8
    723a:	4428      	add	r0, r5
    723c:	f002 f8c3 	bl	93c6 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    7240:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    7242:	2318      	movs	r3, #24
    7244:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    7248:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    724a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    724c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    7250:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7252:	429c      	cmp	r4, r3
    7254:	d818      	bhi.n	7288 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7256:	fb00 bb0b 	mla	fp, r0, fp, fp
    725a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    725c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    725e:	f8db 0004 	ldr.w	r0, [fp, #4]
    7262:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    7264:	4428      	add	r0, r5
    7266:	f002 f8ae 	bl	93c6 <memcpy>
      if (NumBytes) {
    726a:	ebb4 040a 	subs.w	r4, r4, sl
    726e:	d0e8      	beq.n	7242 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    7270:	f8db 0004 	ldr.w	r0, [fp, #4]
    7274:	4622      	mov	r2, r4
    7276:	eb08 0109 	add.w	r1, r8, r9
    727a:	f002 f8a4 	bl	93c6 <memcpy>
      return 1;
    727e:	e7e0      	b.n	7242 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    7280:	3b01      	subs	r3, #1
    7282:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    7284:	42a3      	cmp	r3, r4
    7286:	d2d1      	bcs.n	722c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    7288:	2000      	movs	r0, #0
    728a:	e7df      	b.n	724c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    728c:	20000f70 	.word	0x20000f70

00007290 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    7290:	4b03      	ldr	r3, [pc, #12]	; (72a0 <SEGGER_RTT_HasDataUp+0x10>)
    7292:	2218      	movs	r2, #24
    7294:	fb02 3300 	mla	r3, r2, r0, r3
    7298:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    729a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    729c:	1a80      	subs	r0, r0, r2
    729e:	4770      	bx	lr
    72a0:	20000f70 	.word	0x20000f70

000072a4 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    72a4:	4803      	ldr	r0, [pc, #12]	; (72b4 <zephyr_rtt_mutex_lock+0x10>)
    72a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    72aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    72ae:	f000 baed 	b.w	788c <z_impl_k_mutex_lock>
    72b2:	bf00      	nop
    72b4:	200001e4 	.word	0x200001e4

000072b8 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    72b8:	4801      	ldr	r0, [pc, #4]	; (72c0 <zephyr_rtt_mutex_unlock+0x8>)
    72ba:	f000 bb61 	b.w	7980 <z_impl_k_mutex_unlock>
    72be:	bf00      	nop
    72c0:	200001e4 	.word	0x200001e4

000072c4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    72c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72c8:	b086      	sub	sp, #24
    72ca:	4605      	mov	r5, r0
    72cc:	af00      	add	r7, sp, #0
    72ce:	460e      	mov	r6, r1
	__asm__ volatile(
    72d0:	f04f 0320 	mov.w	r3, #32
    72d4:	f3ef 8811 	mrs	r8, BASEPRI
    72d8:	f383 8812 	msr	BASEPRI_MAX, r3
    72dc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    72e0:	f000 feb2 	bl	8048 <z_impl_z_current_get>
    72e4:	2d04      	cmp	r5, #4
    72e6:	bf96      	itet	ls
    72e8:	4b2c      	ldrls	r3, [pc, #176]	; (739c <z_fatal_error+0xd8>)
    72ea:	4b2d      	ldrhi	r3, [pc, #180]	; (73a0 <z_fatal_error+0xdc>)
    72ec:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    72f0:	46e9      	mov	r9, sp
    72f2:	b08a      	sub	sp, #40	; 0x28
    72f4:	4604      	mov	r4, r0
    72f6:	466a      	mov	r2, sp
    72f8:	492a      	ldr	r1, [pc, #168]	; (73a4 <z_fatal_error+0xe0>)
    72fa:	61d3      	str	r3, [r2, #28]
    72fc:	f240 3301 	movw	r3, #769	; 0x301
    7300:	8493      	strh	r3, [r2, #36]	; 0x24
    7302:	f04f 0a00 	mov.w	sl, #0
    7306:	4b28      	ldr	r3, [pc, #160]	; (73a8 <z_fatal_error+0xe4>)
    7308:	f8c2 a020 	str.w	sl, [r2, #32]
    730c:	e9c2 1505 	strd	r1, r5, [r2, #20]
    7310:	f842 3f10 	str.w	r3, [r2, #16]!
    7314:	4825      	ldr	r0, [pc, #148]	; (73ac <z_fatal_error+0xe8>)
    7316:	4653      	mov	r3, sl
    7318:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    731c:	f7fb fdbe 	bl	2e9c <z_impl_z_log_msg_static_create>
    7320:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    7322:	b17e      	cbz	r6, 7344 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    7324:	69f3      	ldr	r3, [r6, #28]
    7326:	f3c3 0308 	ubfx	r3, r3, #0, #9
    732a:	b15b      	cbz	r3, 7344 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    732c:	4b20      	ldr	r3, [pc, #128]	; (73b0 <z_fatal_error+0xec>)
    732e:	617b      	str	r3, [r7, #20]
    7330:	2302      	movs	r3, #2
    7332:	613b      	str	r3, [r7, #16]
    7334:	481d      	ldr	r0, [pc, #116]	; (73ac <z_fatal_error+0xe8>)
    7336:	4653      	mov	r3, sl
    7338:	f107 0210 	add.w	r2, r7, #16
    733c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7340:	f7fb fdac 	bl	2e9c <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    7344:	b12c      	cbz	r4, 7352 <z_fatal_error+0x8e>
    7346:	4620      	mov	r0, r4
    7348:	f002 fc2d 	bl	9ba6 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    734c:	b108      	cbz	r0, 7352 <z_fatal_error+0x8e>
    734e:	7803      	ldrb	r3, [r0, #0]
    7350:	b903      	cbnz	r3, 7354 <z_fatal_error+0x90>
		thread_name = "unknown";
    7352:	4818      	ldr	r0, [pc, #96]	; (73b4 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    7354:	46e9      	mov	r9, sp
    7356:	b08a      	sub	sp, #40	; 0x28
    7358:	466a      	mov	r2, sp
    735a:	4b17      	ldr	r3, [pc, #92]	; (73b8 <z_fatal_error+0xf4>)
    735c:	61d0      	str	r0, [r2, #28]
    735e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    7362:	f240 3301 	movw	r3, #769	; 0x301
    7366:	8413      	strh	r3, [r2, #32]
    7368:	4b14      	ldr	r3, [pc, #80]	; (73bc <z_fatal_error+0xf8>)
    736a:	f842 3f10 	str.w	r3, [r2, #16]!
    736e:	2300      	movs	r3, #0
    7370:	480e      	ldr	r0, [pc, #56]	; (73ac <z_fatal_error+0xe8>)
    7372:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    7376:	f7fb fd91 	bl	2e9c <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    737a:	4631      	mov	r1, r6
    737c:	46cd      	mov	sp, r9
    737e:	4628      	mov	r0, r5
    7380:	f7fe fedc 	bl	613c <k_sys_fatal_error_handler>
	__asm__ volatile(
    7384:	f388 8811 	msr	BASEPRI, r8
    7388:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    738c:	4620      	mov	r0, r4
    738e:	f7fd f85f 	bl	4450 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    7392:	3718      	adds	r7, #24
    7394:	46bd      	mov	sp, r7
    7396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    739a:	bf00      	nop
    739c:	0000a4c8 	.word	0x0000a4c8
    73a0:	0000b117 	.word	0x0000b117
    73a4:	0000b12d 	.word	0x0000b12d
    73a8:	01000005 	.word	0x01000005
    73ac:	0000a1b8 	.word	0x0000a1b8
    73b0:	0000b155 	.word	0x0000b155
    73b4:	0000b125 	.word	0x0000b125
    73b8:	0000b176 	.word	0x0000b176
    73bc:	01000004 	.word	0x01000004

000073c0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    73c0:	4b10      	ldr	r3, [pc, #64]	; (7404 <z_sys_init_run_level+0x44>)
{
    73c2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    73c4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    73c8:	3001      	adds	r0, #1
    73ca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    73ce:	42a6      	cmp	r6, r4
    73d0:	d800      	bhi.n	73d4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    73d2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    73d4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    73d8:	b18d      	cbz	r5, 73fe <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    73da:	4628      	mov	r0, r5
    73dc:	4798      	blx	r3
			if (rc != 0) {
    73de:	b138      	cbz	r0, 73f0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    73e0:	2800      	cmp	r0, #0
    73e2:	bfb8      	it	lt
    73e4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    73e6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    73e8:	28ff      	cmp	r0, #255	; 0xff
    73ea:	bfa8      	it	ge
    73ec:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    73ee:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    73f0:	68ea      	ldr	r2, [r5, #12]
    73f2:	7853      	ldrb	r3, [r2, #1]
    73f4:	f043 0301 	orr.w	r3, r3, #1
    73f8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    73fa:	3408      	adds	r4, #8
    73fc:	e7e7      	b.n	73ce <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    73fe:	4798      	blx	r3
    7400:	e7fb      	b.n	73fa <z_sys_init_run_level+0x3a>
    7402:	bf00      	nop
    7404:	0000a4dc 	.word	0x0000a4dc

00007408 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7408:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    740a:	4b0a      	ldr	r3, [pc, #40]	; (7434 <bg_thread_main+0x2c>)
    740c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    740e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    7410:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    7412:	f7ff ffd5 	bl	73c0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7416:	f001 f87d 	bl	8514 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    741a:	2004      	movs	r0, #4
    741c:	f7ff ffd0 	bl	73c0 <z_sys_init_run_level>

	z_init_static_threads();
    7420:	f000 f9bc 	bl	779c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    7424:	f7f9 fe28 	bl	1078 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7428:	4a03      	ldr	r2, [pc, #12]	; (7438 <bg_thread_main+0x30>)
    742a:	7b13      	ldrb	r3, [r2, #12]
    742c:	f023 0301 	bic.w	r3, r3, #1
    7430:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7432:	bd08      	pop	{r3, pc}
    7434:	20001651 	.word	0x20001651
    7438:	200007e0 	.word	0x200007e0

0000743c <z_bss_zero>:
{
    743c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    743e:	4803      	ldr	r0, [pc, #12]	; (744c <z_bss_zero+0x10>)
    7440:	4a03      	ldr	r2, [pc, #12]	; (7450 <z_bss_zero+0x14>)
    7442:	2100      	movs	r1, #0
    7444:	1a12      	subs	r2, r2, r0
    7446:	f002 fb56 	bl	9af6 <z_early_memset>
}
    744a:	bd08      	pop	{r3, pc}
    744c:	20000220 	.word	0x20000220
    7450:	20001654 	.word	0x20001654

00007454 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    7454:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    7456:	4e17      	ldr	r6, [pc, #92]	; (74b4 <z_init_cpu+0x60>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7458:	4d17      	ldr	r5, [pc, #92]	; (74b8 <z_init_cpu+0x64>)
	z_setup_new_thread(thread, stack,
    745a:	4918      	ldr	r1, [pc, #96]	; (74bc <z_init_cpu+0x68>)
{
    745c:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    745e:	23b0      	movs	r3, #176	; 0xb0
    7460:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    7464:	4b16      	ldr	r3, [pc, #88]	; (74c0 <z_init_cpu+0x6c>)
    7466:	9305      	str	r3, [sp, #20]
    7468:	2201      	movs	r2, #1
    746a:	230f      	movs	r3, #15
    746c:	e9cd 3203 	strd	r3, r2, [sp, #12]
    7470:	2300      	movs	r3, #0
    7472:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7476:	2314      	movs	r3, #20
    7478:	fb03 5500 	mla	r5, r3, r0, r5
{
    747c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    747e:	f44f 70c0 	mov.w	r0, #384	; 0x180
    7482:	fb00 1104 	mla	r1, r0, r4, r1
    7486:	4b0f      	ldr	r3, [pc, #60]	; (74c4 <z_init_cpu+0x70>)
    7488:	9500      	str	r5, [sp, #0]
    748a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    748e:	4630      	mov	r0, r6
    7490:	f000 f8fa 	bl	7688 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7494:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7496:	4a0c      	ldr	r2, [pc, #48]	; (74c8 <z_init_cpu+0x74>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7498:	60ee      	str	r6, [r5, #12]
    749a:	f023 0304 	bic.w	r3, r3, #4
    749e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    74a0:	f44f 6304 	mov.w	r3, #2112	; 0x840
    74a4:	fb04 3303 	mla	r3, r4, r3, r3
    74a8:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    74aa:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    74ac:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    74ae:	b006      	add	sp, #24
    74b0:	bd70      	pop	{r4, r5, r6, pc}
    74b2:	bf00      	nop
    74b4:	20000730 	.word	0x20000730
    74b8:	20001018 	.word	0x20001018
    74bc:	20002200 	.word	0x20002200
    74c0:	0000b1d8 	.word	0x0000b1d8
    74c4:	00007855 	.word	0x00007855
    74c8:	200019c0 	.word	0x200019c0

000074cc <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    74cc:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    74ce:	2000      	movs	r0, #0
{
    74d0:	b0b2      	sub	sp, #200	; 0xc8
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    74d2:	f7ff ff75 	bl	73c0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    74d6:	4b2e      	ldr	r3, [pc, #184]	; (7590 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    74d8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    74dc:	4d2d      	ldr	r5, [pc, #180]	; (7594 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    74de:	4e2e      	ldr	r6, [pc, #184]	; (7598 <z_cstart+0xcc>)
    74e0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    74e2:	4f2e      	ldr	r7, [pc, #184]	; (759c <z_cstart+0xd0>)
    74e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    74e8:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    74ea:	2400      	movs	r4, #0
    74ec:	23e0      	movs	r3, #224	; 0xe0
    74ee:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    74f2:	77ec      	strb	r4, [r5, #31]
    74f4:	762c      	strb	r4, [r5, #24]
    74f6:	766c      	strb	r4, [r5, #25]
    74f8:	76ac      	strb	r4, [r5, #26]
    74fa:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    74fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7500:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7504:	626b      	str	r3, [r5, #36]	; 0x24
    7506:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    750a:	f7fc ff0f 	bl	432c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    750e:	f7fc fa5b 	bl	39c8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7516:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7518:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    751a:	f7fd f86b 	bl	45f4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    751e:	f7fc ffad 	bl	447c <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    7522:	f7fb fb47 	bl	2bb4 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    7526:	f240 1301 	movw	r3, #257	; 0x101
    752a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    752e:	ab06      	add	r3, sp, #24
    7530:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    7532:	e9cd 442c 	strd	r4, r4, [sp, #176]	; 0xb0
	dummy_thread->resource_pool = NULL;
    7536:	942f      	str	r4, [sp, #188]	; 0xbc
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7538:	f002 fad1 	bl	9ade <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    753c:	2001      	movs	r0, #1
    753e:	f7ff ff3f 	bl	73c0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7542:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    7544:	4d16      	ldr	r5, [pc, #88]	; (75a0 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7546:	f7ff ff3b 	bl	73c0 <z_sys_init_run_level>
	z_sched_init();
    754a:	f000 fcd9 	bl	7f00 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    754e:	4b15      	ldr	r3, [pc, #84]	; (75a4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    7550:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7552:	9305      	str	r3, [sp, #20]
    7554:	2301      	movs	r3, #1
    7556:	4914      	ldr	r1, [pc, #80]	; (75a8 <z_cstart+0xdc>)
    7558:	9400      	str	r4, [sp, #0]
    755a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    755e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7562:	463b      	mov	r3, r7
    7564:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7568:	4628      	mov	r0, r5
    756a:	f000 f88d 	bl	7688 <z_setup_new_thread>
    756e:	7b6a      	ldrb	r2, [r5, #13]
    7570:	4606      	mov	r6, r0
    7572:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    7576:	4628      	mov	r0, r5
    7578:	736a      	strb	r2, [r5, #13]
    757a:	f002 fb72 	bl	9c62 <z_ready_thread>
	z_init_cpu(0);
    757e:	4620      	mov	r0, r4
    7580:	f7ff ff68 	bl	7454 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7584:	463a      	mov	r2, r7
    7586:	4631      	mov	r1, r6
    7588:	4628      	mov	r0, r5
    758a:	f7fc fb97 	bl	3cbc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    758e:	bf00      	nop
    7590:	20002200 	.word	0x20002200
    7594:	e000ed00 	.word	0xe000ed00
    7598:	20001018 	.word	0x20001018
    759c:	00007409 	.word	0x00007409
    75a0:	200007e0 	.word	0x200007e0
    75a4:	0000a66b 	.word	0x0000a66b
    75a8:	20002380 	.word	0x20002380

000075ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    75ac:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    75ae:	4c06      	ldr	r4, [pc, #24]	; (75c8 <init_mem_slab_module+0x1c>)
    75b0:	4d06      	ldr	r5, [pc, #24]	; (75cc <init_mem_slab_module+0x20>)
	int rc = 0;
    75b2:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    75b4:	42ac      	cmp	r4, r5
    75b6:	d300      	bcc.n	75ba <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    75b8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    75ba:	4620      	mov	r0, r4
    75bc:	f002 fa9f 	bl	9afe <create_free_list>
		if (rc < 0) {
    75c0:	2800      	cmp	r0, #0
    75c2:	dbf9      	blt.n	75b8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    75c4:	341c      	adds	r4, #28
    75c6:	e7f5      	b.n	75b4 <init_mem_slab_module+0x8>
    75c8:	200001a8 	.word	0x200001a8
    75cc:	200001a8 	.word	0x200001a8

000075d0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    75d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    75d2:	460c      	mov	r4, r1
	__asm__ volatile(
    75d4:	f04f 0520 	mov.w	r5, #32
    75d8:	f3ef 8111 	mrs	r1, BASEPRI
    75dc:	f385 8812 	msr	BASEPRI_MAX, r5
    75e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    75e4:	6945      	ldr	r5, [r0, #20]
    75e6:	b15d      	cbz	r5, 7600 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    75e8:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    75ea:	682b      	ldr	r3, [r5, #0]
    75ec:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    75ee:	6983      	ldr	r3, [r0, #24]
    75f0:	3301      	adds	r3, #1
    75f2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    75f4:	2000      	movs	r0, #0
	__asm__ volatile(
    75f6:	f381 8811 	msr	BASEPRI, r1
    75fa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    75fe:	e011      	b.n	7624 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    7600:	ea52 0603 	orrs.w	r6, r2, r3
    7604:	d103      	bne.n	760e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    7606:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    7608:	f06f 000b 	mvn.w	r0, #11
    760c:	e7f3      	b.n	75f6 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    760e:	e9cd 2300 	strd	r2, r3, [sp]
    7612:	4602      	mov	r2, r0
    7614:	3008      	adds	r0, #8
    7616:	f000 fb7d 	bl	7d14 <z_pend_curr>
		if (result == 0) {
    761a:	b918      	cbnz	r0, 7624 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    761c:	4b02      	ldr	r3, [pc, #8]	; (7628 <k_mem_slab_alloc+0x58>)
    761e:	689b      	ldr	r3, [r3, #8]
    7620:	695b      	ldr	r3, [r3, #20]
    7622:	6023      	str	r3, [r4, #0]
}
    7624:	b002      	add	sp, #8
    7626:	bd70      	pop	{r4, r5, r6, pc}
    7628:	20001018 	.word	0x20001018

0000762c <z_thread_monitor_exit>:
	__asm__ volatile(
    762c:	f04f 0320 	mov.w	r3, #32
    7630:	f3ef 8111 	mrs	r1, BASEPRI
    7634:	f383 8812 	msr	BASEPRI_MAX, r3
    7638:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    763c:	4a09      	ldr	r2, [pc, #36]	; (7664 <z_thread_monitor_exit+0x38>)
    763e:	6a53      	ldr	r3, [r2, #36]	; 0x24
    7640:	4283      	cmp	r3, r0
    7642:	d107      	bne.n	7654 <z_thread_monitor_exit+0x28>
		_kernel.threads = _kernel.threads->next_thread;
    7644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    7646:	6253      	str	r3, [r2, #36]	; 0x24
	__asm__ volatile(
    7648:	f381 8811 	msr	BASEPRI, r1
    764c:	f3bf 8f6f 	isb	sy
			prev_thread->next_thread = thread->next_thread;
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    7650:	4770      	bx	lr
    7652:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    7654:	2b00      	cmp	r3, #0
    7656:	d0f7      	beq.n	7648 <z_thread_monitor_exit+0x1c>
			(thread != prev_thread->next_thread)) {
    7658:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    765a:	4282      	cmp	r2, r0
    765c:	d1f9      	bne.n	7652 <z_thread_monitor_exit+0x26>
			prev_thread->next_thread = thread->next_thread;
    765e:	6f02      	ldr	r2, [r0, #112]	; 0x70
    7660:	671a      	str	r2, [r3, #112]	; 0x70
    7662:	e7f1      	b.n	7648 <z_thread_monitor_exit+0x1c>
    7664:	20001018 	.word	0x20001018

00007668 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    7668:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    766a:	4604      	mov	r4, r0
    766c:	b908      	cbnz	r0, 7672 <z_impl_k_thread_name_set+0xa>
		thread = _current;
    766e:	4b05      	ldr	r3, [pc, #20]	; (7684 <z_impl_k_thread_name_set+0x1c>)
    7670:	689c      	ldr	r4, [r3, #8]
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    7672:	221f      	movs	r2, #31
    7674:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7678:	f001 fe81 	bl	937e <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    767c:	2000      	movs	r0, #0
    767e:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    7682:	bd10      	pop	{r4, pc}
    7684:	20001018 	.word	0x20001018

00007688 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    768c:	b085      	sub	sp, #20
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    768e:	3207      	adds	r2, #7
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7690:	9e12      	ldr	r6, [sp, #72]	; 0x48
    7692:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7694:	2604      	movs	r6, #4
{
    7696:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;
    769a:	7346      	strb	r6, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    769c:	f022 0207 	bic.w	r2, r2, #7

	thread_base->prio = priority;
    76a0:	9e11      	ldr	r6, [sp, #68]	; 0x44
    76a2:	7386      	strb	r6, [r0, #14]
{
    76a4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    76a8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    76aa:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    76ae:	f102 0640 	add.w	r6, r2, #64	; 0x40
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    76b2:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
{
    76b6:	4604      	mov	r4, r0
	thread_base->pended_on = NULL;
    76b8:	2500      	movs	r5, #0
	stack_ptr = (char *)stack + stack_obj_size;
    76ba:	440e      	add	r6, r1

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    76bc:	f101 0c40 	add.w	ip, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
    76c0:	e9c0 c226 	strd	ip, r2, [r0, #152]	; 0x98
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    76c4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
    76c8:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    76ca:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    76cc:	f8c0 50a0 	str.w	r5, [r0, #160]	; 0xa0
{
    76d0:	4698      	mov	r8, r3
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    76d2:	e9cd a901 	strd	sl, r9, [sp, #4]
    76d6:	f8cd b000 	str.w	fp, [sp]
    76da:	4632      	mov	r2, r6
    76dc:	f7fc faba 	bl	3c54 <arch_new_thread>
	new_thread->entry.parameter1 = p1;
    76e0:	e9c4 8b18 	strd	r8, fp, [r4, #96]	; 0x60
	new_thread->entry.parameter3 = p3;
    76e4:	e9c4 a91a 	strd	sl, r9, [r4, #104]	; 0x68
	new_thread->init_data = NULL;
    76e8:	6565      	str	r5, [r4, #84]	; 0x54
	__asm__ volatile(
    76ea:	f04f 0220 	mov.w	r2, #32
    76ee:	f3ef 8311 	mrs	r3, BASEPRI
    76f2:	f382 8812 	msr	BASEPRI_MAX, r2
    76f6:	f3bf 8f6f 	isb	sy
	new_thread->next_thread = _kernel.threads;
    76fa:	f8df 8044 	ldr.w	r8, [pc, #68]	; 7740 <z_setup_new_thread+0xb8>
    76fe:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
    7702:	6722      	str	r2, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    7704:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
	__asm__ volatile(
    7708:	f383 8811 	msr	BASEPRI, r3
    770c:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
    7710:	b197      	cbz	r7, 7738 <z_setup_new_thread+0xb0>
		strncpy(new_thread->name, name,
    7712:	221f      	movs	r2, #31
    7714:	4639      	mov	r1, r7
    7716:	f104 0074 	add.w	r0, r4, #116	; 0x74
    771a:	f001 fe30 	bl	937e <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    771e:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
	if (!_current) {
    7722:	f8d8 3008 	ldr.w	r3, [r8, #8]
    7726:	b10b      	cbz	r3, 772c <z_setup_new_thread+0xa4>
	new_thread->resource_pool = _current->resource_pool;
    7728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	return stack_ptr;
    772c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
    7730:	4630      	mov	r0, r6
    7732:	b005      	add	sp, #20
    7734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    7738:	f884 7074 	strb.w	r7, [r4, #116]	; 0x74
    773c:	e7f1      	b.n	7722 <z_setup_new_thread+0x9a>
    773e:	bf00      	nop
    7740:	20001018 	.word	0x20001018

00007744 <z_impl_k_thread_create>:
{
    7744:	b5f0      	push	{r4, r5, r6, r7, lr}
    7746:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7748:	2500      	movs	r5, #0
    774a:	9505      	str	r5, [sp, #20]
    774c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    774e:	9504      	str	r5, [sp, #16]
    7750:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    7752:	9503      	str	r5, [sp, #12]
    7754:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    7756:	9502      	str	r5, [sp, #8]
{
    7758:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    775c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    775e:	9501      	str	r5, [sp, #4]
    7760:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    7762:	9500      	str	r5, [sp, #0]
{
    7764:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7766:	f7ff ff8f 	bl	7688 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    776a:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    776e:	bf08      	it	eq
    7770:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    7774:	d005      	beq.n	7782 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7776:	ea56 0307 	orrs.w	r3, r6, r7
    777a:	d105      	bne.n	7788 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    777c:	4620      	mov	r0, r4
    777e:	f000 fb3f 	bl	7e00 <z_sched_start>
}
    7782:	4620      	mov	r0, r4
    7784:	b007      	add	sp, #28
    7786:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7788:	4903      	ldr	r1, [pc, #12]	; (7798 <z_impl_k_thread_create+0x54>)
    778a:	463a      	mov	r2, r7
    778c:	4633      	mov	r3, r6
    778e:	f104 0018 	add.w	r0, r4, #24
    7792:	f000 fd23 	bl	81dc <z_add_timeout>
    7796:	e7f4      	b.n	7782 <z_impl_k_thread_create+0x3e>
    7798:	00009ceb 	.word	0x00009ceb

0000779c <z_init_static_threads>:
{
    779c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    77a0:	4c29      	ldr	r4, [pc, #164]	; (7848 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    77a2:	4d2a      	ldr	r5, [pc, #168]	; (784c <z_init_static_threads+0xb0>)
{
    77a4:	b087      	sub	sp, #28
    77a6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    77a8:	42ae      	cmp	r6, r5
    77aa:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    77ae:	d30f      	bcc.n	77d0 <z_init_static_threads+0x34>
	k_sched_lock();
    77b0:	f000 fb76 	bl	7ea0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    77b4:	4c24      	ldr	r4, [pc, #144]	; (7848 <z_init_static_threads+0xac>)
    77b6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7850 <z_init_static_threads+0xb4>
    77ba:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    77be:	f240 37e7 	movw	r7, #999	; 0x3e7
    77c2:	42ac      	cmp	r4, r5
    77c4:	d320      	bcc.n	7808 <z_init_static_threads+0x6c>
}
    77c6:	b007      	add	sp, #28
    77c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    77cc:	f000 bb7c 	b.w	7ec8 <k_sched_unlock>
		z_setup_new_thread(
    77d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    77d4:	9305      	str	r3, [sp, #20]
    77d6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    77da:	9304      	str	r3, [sp, #16]
    77dc:	f854 3c10 	ldr.w	r3, [r4, #-16]
    77e0:	9303      	str	r3, [sp, #12]
    77e2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    77e6:	9302      	str	r3, [sp, #8]
    77e8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    77ec:	9301      	str	r3, [sp, #4]
    77ee:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    77f2:	9300      	str	r3, [sp, #0]
    77f4:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    77f8:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    77fc:	f7ff ff44 	bl	7688 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7800:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    7804:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7806:	e7ce      	b.n	77a6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7808:	6a63      	ldr	r3, [r4, #36]	; 0x24
    780a:	1c5a      	adds	r2, r3, #1
    780c:	d00d      	beq.n	782a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    780e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7812:	2100      	movs	r1, #0
    7814:	4638      	mov	r0, r7
    7816:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    781a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    781e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7822:	d104      	bne.n	782e <z_init_static_threads+0x92>
	z_sched_start(thread);
    7824:	4640      	mov	r0, r8
    7826:	f000 faeb 	bl	7e00 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    782a:	342c      	adds	r4, #44	; 0x2c
    782c:	e7c9      	b.n	77c2 <z_init_static_threads+0x26>
    782e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7832:	2300      	movs	r3, #0
    7834:	f7f9 fab6 	bl	da4 <__aeabi_uldivmod>
    7838:	4602      	mov	r2, r0
    783a:	460b      	mov	r3, r1
    783c:	f108 0018 	add.w	r0, r8, #24
    7840:	4649      	mov	r1, r9
    7842:	f000 fccb 	bl	81dc <z_add_timeout>
    7846:	e7f0      	b.n	782a <z_init_static_threads+0x8e>
    7848:	0000a100 	.word	0x0000a100
    784c:	0000a100 	.word	0x0000a100
    7850:	00009ceb 	.word	0x00009ceb

00007854 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7854:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7856:	4c0b      	ldr	r4, [pc, #44]	; (7884 <idle+0x30>)
	return !z_sys_post_kernel;
    7858:	4d0b      	ldr	r5, [pc, #44]	; (7888 <idle+0x34>)
	__asm__ volatile(
    785a:	f04f 0220 	mov.w	r2, #32
    785e:	f3ef 8311 	mrs	r3, BASEPRI
    7862:	f382 8812 	msr	BASEPRI_MAX, r2
    7866:	f3bf 8f6f 	isb	sy
    786a:	f002 faa1 	bl	9db0 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    786e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7870:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7872:	b913      	cbnz	r3, 787a <idle+0x26>
	arch_cpu_idle();
    7874:	f7fc f8ae 	bl	39d4 <arch_cpu_idle>
}
    7878:	e7ef      	b.n	785a <idle+0x6>
    787a:	f7fb feeb 	bl	3654 <pm_system_suspend>
    787e:	2800      	cmp	r0, #0
    7880:	d1eb      	bne.n	785a <idle+0x6>
    7882:	e7f7      	b.n	7874 <idle+0x20>
    7884:	20001018 	.word	0x20001018
    7888:	20001651 	.word	0x20001651

0000788c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    788c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7890:	4604      	mov	r4, r0
    7892:	4617      	mov	r7, r2
    7894:	461e      	mov	r6, r3
    7896:	f04f 0320 	mov.w	r3, #32
    789a:	f3ef 8811 	mrs	r8, BASEPRI
    789e:	f383 8812 	msr	BASEPRI_MAX, r3
    78a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    78a6:	68c3      	ldr	r3, [r0, #12]
    78a8:	4a33      	ldr	r2, [pc, #204]	; (7978 <z_impl_k_mutex_lock+0xec>)
    78aa:	b17b      	cbz	r3, 78cc <z_impl_k_mutex_lock+0x40>
    78ac:	6880      	ldr	r0, [r0, #8]
    78ae:	6891      	ldr	r1, [r2, #8]
    78b0:	4288      	cmp	r0, r1
    78b2:	d019      	beq.n	78e8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    78b4:	ea57 0306 	orrs.w	r3, r7, r6
    78b8:	d118      	bne.n	78ec <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    78ba:	f388 8811 	msr	BASEPRI, r8
    78be:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    78c2:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    78c6:	b002      	add	sp, #8
    78c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    78cc:	6891      	ldr	r1, [r2, #8]
    78ce:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    78d2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    78d4:	3301      	adds	r3, #1
    78d6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    78d8:	6893      	ldr	r3, [r2, #8]
    78da:	60a3      	str	r3, [r4, #8]
    78dc:	f388 8811 	msr	BASEPRI, r8
    78e0:	f3bf 8f6f 	isb	sy
		return 0;
    78e4:	2000      	movs	r0, #0
    78e6:	e7ee      	b.n	78c6 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    78e8:	6921      	ldr	r1, [r4, #16]
    78ea:	e7f2      	b.n	78d2 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    78ec:	f991 100e 	ldrsb.w	r1, [r1, #14]
    78f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    78f4:	4299      	cmp	r1, r3
    78f6:	bfa8      	it	ge
    78f8:	4619      	movge	r1, r3
    78fa:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    78fe:	4291      	cmp	r1, r2
    7900:	bfb8      	it	lt
    7902:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7904:	428b      	cmp	r3, r1
    7906:	dd2e      	ble.n	7966 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    7908:	f002 f956 	bl	9bb8 <adjust_owner_prio.isra.0>
    790c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    790e:	e9cd 7600 	strd	r7, r6, [sp]
    7912:	481a      	ldr	r0, [pc, #104]	; (797c <z_impl_k_mutex_lock+0xf0>)
    7914:	4622      	mov	r2, r4
    7916:	4641      	mov	r1, r8
    7918:	f000 f9fc 	bl	7d14 <z_pend_curr>
	if (got_mutex == 0) {
    791c:	2800      	cmp	r0, #0
    791e:	d0e1      	beq.n	78e4 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    7920:	f04f 0320 	mov.w	r3, #32
    7924:	f3ef 8611 	mrs	r6, BASEPRI
    7928:	f383 8812 	msr	BASEPRI_MAX, r3
    792c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    7930:	68a0      	ldr	r0, [r4, #8]
    7932:	b1d0      	cbz	r0, 796a <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7934:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7936:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7938:	429c      	cmp	r4, r3
    793a:	d00a      	beq.n	7952 <z_impl_k_mutex_lock+0xc6>
    793c:	b14b      	cbz	r3, 7952 <z_impl_k_mutex_lock+0xc6>
    793e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7942:	4299      	cmp	r1, r3
    7944:	bfa8      	it	ge
    7946:	4619      	movge	r1, r3
    7948:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    794c:	4299      	cmp	r1, r3
    794e:	bfb8      	it	lt
    7950:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    7952:	f002 f931 	bl	9bb8 <adjust_owner_prio.isra.0>
    7956:	b140      	cbz	r0, 796a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    7958:	4808      	ldr	r0, [pc, #32]	; (797c <z_impl_k_mutex_lock+0xf0>)
    795a:	4631      	mov	r1, r6
    795c:	f000 fa3e 	bl	7ddc <z_reschedule>
	return -EAGAIN;
    7960:	f06f 000a 	mvn.w	r0, #10
    7964:	e7af      	b.n	78c6 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    7966:	2500      	movs	r5, #0
    7968:	e7d1      	b.n	790e <z_impl_k_mutex_lock+0x82>
	if (resched) {
    796a:	2d00      	cmp	r5, #0
    796c:	d1f4      	bne.n	7958 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    796e:	f386 8811 	msr	BASEPRI, r6
    7972:	f3bf 8f6f 	isb	sy
    7976:	e7f3      	b.n	7960 <z_impl_k_mutex_lock+0xd4>
    7978:	20001018 	.word	0x20001018
    797c:	20001652 	.word	0x20001652

00007980 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7980:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7982:	6883      	ldr	r3, [r0, #8]
{
    7984:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    7986:	b373      	cbz	r3, 79e6 <z_impl_k_mutex_unlock+0x66>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7988:	4a1a      	ldr	r2, [pc, #104]	; (79f4 <z_impl_k_mutex_unlock+0x74>)
    798a:	6892      	ldr	r2, [r2, #8]
    798c:	4293      	cmp	r3, r2
    798e:	d12d      	bne.n	79ec <z_impl_k_mutex_unlock+0x6c>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7990:	68c3      	ldr	r3, [r0, #12]
    7992:	2b01      	cmp	r3, #1
    7994:	d903      	bls.n	799e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    7996:	3b01      	subs	r3, #1
    7998:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    799a:	2000      	movs	r0, #0
}
    799c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    799e:	f04f 0320 	mov.w	r3, #32
    79a2:	f3ef 8511 	mrs	r5, BASEPRI
    79a6:	f383 8812 	msr	BASEPRI_MAX, r3
    79aa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    79ae:	6901      	ldr	r1, [r0, #16]
    79b0:	6880      	ldr	r0, [r0, #8]
    79b2:	f002 f901 	bl	9bb8 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    79b6:	4620      	mov	r0, r4
    79b8:	f002 f9b2 	bl	9d20 <z_unpend_first_thread>
	mutex->owner = new_owner;
    79bc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    79be:	b160      	cbz	r0, 79da <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    79c0:	f990 200e 	ldrsb.w	r2, [r0, #14]
    79c4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    79c6:	2200      	movs	r2, #0
    79c8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    79cc:	f002 f949 	bl	9c62 <z_ready_thread>
		z_reschedule(&lock, key);
    79d0:	4809      	ldr	r0, [pc, #36]	; (79f8 <z_impl_k_mutex_unlock+0x78>)
    79d2:	4629      	mov	r1, r5
    79d4:	f000 fa02 	bl	7ddc <z_reschedule>
    79d8:	e7df      	b.n	799a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    79da:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    79dc:	f385 8811 	msr	BASEPRI, r5
    79e0:	f3bf 8f6f 	isb	sy
    79e4:	e7d9      	b.n	799a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    79e6:	f06f 0015 	mvn.w	r0, #21
    79ea:	e7d7      	b.n	799c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    79ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    79f0:	e7d4      	b.n	799c <z_impl_k_mutex_unlock+0x1c>
    79f2:	bf00      	nop
    79f4:	20001018 	.word	0x20001018
    79f8:	20001652 	.word	0x20001652

000079fc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    79fc:	b538      	push	{r3, r4, r5, lr}
    79fe:	4604      	mov	r4, r0
	__asm__ volatile(
    7a00:	f04f 0320 	mov.w	r3, #32
    7a04:	f3ef 8511 	mrs	r5, BASEPRI
    7a08:	f383 8812 	msr	BASEPRI_MAX, r3
    7a0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7a10:	f002 f986 	bl	9d20 <z_unpend_first_thread>

	if (thread != NULL) {
    7a14:	b150      	cbz	r0, 7a2c <z_impl_k_sem_give+0x30>
    7a16:	2200      	movs	r2, #0
    7a18:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7a1c:	f002 f921 	bl	9c62 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7a20:	4629      	mov	r1, r5
    7a22:	4806      	ldr	r0, [pc, #24]	; (7a3c <z_impl_k_sem_give+0x40>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7a28:	f000 b9d8 	b.w	7ddc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7a2c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7a30:	429a      	cmp	r2, r3
    7a32:	bf18      	it	ne
    7a34:	3301      	addne	r3, #1
    7a36:	60a3      	str	r3, [r4, #8]
}
    7a38:	e7f2      	b.n	7a20 <z_impl_k_sem_give+0x24>
    7a3a:	bf00      	nop
    7a3c:	20001652 	.word	0x20001652

00007a40 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7a40:	b513      	push	{r0, r1, r4, lr}
    7a42:	f04f 0420 	mov.w	r4, #32
    7a46:	f3ef 8111 	mrs	r1, BASEPRI
    7a4a:	f384 8812 	msr	BASEPRI_MAX, r4
    7a4e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7a52:	6884      	ldr	r4, [r0, #8]
    7a54:	b144      	cbz	r4, 7a68 <z_impl_k_sem_take+0x28>
		sem->count--;
    7a56:	3c01      	subs	r4, #1
    7a58:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    7a5a:	f381 8811 	msr	BASEPRI, r1
    7a5e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7a62:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7a64:	b002      	add	sp, #8
    7a66:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7a68:	ea52 0403 	orrs.w	r4, r2, r3
    7a6c:	d106      	bne.n	7a7c <z_impl_k_sem_take+0x3c>
    7a6e:	f381 8811 	msr	BASEPRI, r1
    7a72:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7a76:	f06f 000f 	mvn.w	r0, #15
    7a7a:	e7f3      	b.n	7a64 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7a7c:	e9cd 2300 	strd	r2, r3, [sp]
    7a80:	4602      	mov	r2, r0
    7a82:	4802      	ldr	r0, [pc, #8]	; (7a8c <z_impl_k_sem_take+0x4c>)
    7a84:	f000 f946 	bl	7d14 <z_pend_curr>
	return ret;
    7a88:	e7ec      	b.n	7a64 <z_impl_k_sem_take+0x24>
    7a8a:	bf00      	nop
    7a8c:	20001652 	.word	0x20001652

00007a90 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    7a90:	89c3      	ldrh	r3, [r0, #14]
    7a92:	2b7f      	cmp	r3, #127	; 0x7f
    7a94:	d812      	bhi.n	7abc <sliceable+0x2c>
	int ret = slice_ticks;
    7a96:	4b0a      	ldr	r3, [pc, #40]	; (7ac0 <sliceable+0x30>)
    7a98:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    7a9a:	b163      	cbz	r3, 7ab6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    7a9c:	4b09      	ldr	r3, [pc, #36]	; (7ac4 <sliceable+0x34>)
    7a9e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7aa2:	681b      	ldr	r3, [r3, #0]
    7aa4:	429a      	cmp	r2, r3
    7aa6:	db09      	blt.n	7abc <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    7aa8:	7b43      	ldrb	r3, [r0, #13]
    7aaa:	06db      	lsls	r3, r3, #27
    7aac:	d106      	bne.n	7abc <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    7aae:	4b06      	ldr	r3, [pc, #24]	; (7ac8 <sliceable+0x38>)
    7ab0:	1ac3      	subs	r3, r0, r3
    7ab2:	bf18      	it	ne
    7ab4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    7ab6:	f003 0001 	and.w	r0, r3, #1
    7aba:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    7abc:	2300      	movs	r3, #0
    7abe:	e7fa      	b.n	7ab6 <sliceable+0x26>
    7ac0:	20001048 	.word	0x20001048
    7ac4:	20001044 	.word	0x20001044
    7ac8:	20000730 	.word	0x20000730

00007acc <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    7acc:	4b04      	ldr	r3, [pc, #16]	; (7ae0 <slice_timeout+0x14>)
    7ace:	1ac0      	subs	r0, r0, r3
    7ad0:	4b04      	ldr	r3, [pc, #16]	; (7ae4 <slice_timeout+0x18>)
    7ad2:	10c0      	asrs	r0, r0, #3
    7ad4:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    7ad6:	4b04      	ldr	r3, [pc, #16]	; (7ae8 <slice_timeout+0x1c>)
    7ad8:	2201      	movs	r2, #1
    7ada:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    7adc:	4770      	bx	lr
    7ade:	bf00      	nop
    7ae0:	20000890 	.word	0x20000890
    7ae4:	aaaaaaab 	.word	0xaaaaaaab
    7ae8:	20001652 	.word	0x20001652

00007aec <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    7aec:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    7aee:	4b0e      	ldr	r3, [pc, #56]	; (7b28 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    7af0:	4c0e      	ldr	r4, [pc, #56]	; (7b2c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    7af2:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    7af4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    7af8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    7afc:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    7afe:	4620      	mov	r0, r4
    7b00:	f002 f940 	bl	9d84 <z_abort_timeout>
	slice_expired[cpu] = false;
    7b04:	4b0a      	ldr	r3, [pc, #40]	; (7b30 <z_reset_time_slice+0x44>)
    7b06:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    7b08:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    7b0a:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    7b0c:	f7ff ffc0 	bl	7a90 <sliceable>
    7b10:	b148      	cbz	r0, 7b26 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    7b12:	4b08      	ldr	r3, [pc, #32]	; (7b34 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    7b14:	4908      	ldr	r1, [pc, #32]	; (7b38 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    7b16:	681a      	ldr	r2, [r3, #0]
    7b18:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    7b1a:	4620      	mov	r0, r4
    7b1c:	17d3      	asrs	r3, r2, #31
	}
}
    7b1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    7b22:	f000 bb5b 	b.w	81dc <z_add_timeout>
}
    7b26:	bd70      	pop	{r4, r5, r6, pc}
    7b28:	20001018 	.word	0x20001018
    7b2c:	20000890 	.word	0x20000890
    7b30:	20001652 	.word	0x20001652
    7b34:	20001048 	.word	0x20001048
    7b38:	00007acd 	.word	0x00007acd

00007b3c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    7b3c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7b3e:	4d0d      	ldr	r5, [pc, #52]	; (7b74 <update_cache+0x38>)
    7b40:	462b      	mov	r3, r5
    7b42:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7b46:	429c      	cmp	r4, r3
    7b48:	d000      	beq.n	7b4c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7b4a:	b904      	cbnz	r4, 7b4e <update_cache+0x12>
    7b4c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    7b4e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    7b50:	b938      	cbnz	r0, 7b62 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    7b52:	7b5a      	ldrb	r2, [r3, #13]
    7b54:	06d2      	lsls	r2, r2, #27
    7b56:	d104      	bne.n	7b62 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7b58:	69a2      	ldr	r2, [r4, #24]
    7b5a:	b912      	cbnz	r2, 7b62 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    7b5c:	89da      	ldrh	r2, [r3, #14]
    7b5e:	2a7f      	cmp	r2, #127	; 0x7f
    7b60:	d805      	bhi.n	7b6e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    7b62:	429c      	cmp	r4, r3
    7b64:	d002      	beq.n	7b6c <update_cache+0x30>
			z_reset_time_slice(thread);
    7b66:	4620      	mov	r0, r4
    7b68:	f7ff ffc0 	bl	7aec <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    7b6c:	4623      	mov	r3, r4
    7b6e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    7b70:	bd38      	pop	{r3, r4, r5, pc}
    7b72:	bf00      	nop
    7b74:	20001018 	.word	0x20001018

00007b78 <move_thread_to_end_of_prio_q>:
{
    7b78:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    7b7a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7b7e:	7b43      	ldrb	r3, [r0, #13]
    7b80:	2a00      	cmp	r2, #0
{
    7b82:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    7b84:	da04      	bge.n	7b90 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7b8a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    7b8c:	f002 f82f 	bl	9bee <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7b90:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    7b92:	4a15      	ldr	r2, [pc, #84]	; (7be8 <move_thread_to_end_of_prio_q+0x70>)
    7b94:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7b98:	4610      	mov	r0, r2
    7b9a:	734b      	strb	r3, [r1, #13]
    7b9c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    7ba0:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7ba2:	4283      	cmp	r3, r0
    7ba4:	bf08      	it	eq
    7ba6:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7ba8:	b923      	cbnz	r3, 7bb4 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    7baa:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    7bae:	6021      	str	r1, [r4, #0]
	list->tail = node;
    7bb0:	6211      	str	r1, [r2, #32]
}
    7bb2:	e00c      	b.n	7bce <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    7bb4:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    7bb8:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    7bbc:	42b5      	cmp	r5, r6
    7bbe:	d00e      	beq.n	7bde <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7bc0:	42ae      	cmp	r6, r5
    7bc2:	dd0c      	ble.n	7bde <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    7bc4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    7bc6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    7bca:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    7bcc:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    7bce:	6890      	ldr	r0, [r2, #8]
    7bd0:	1a43      	subs	r3, r0, r1
    7bd2:	4258      	negs	r0, r3
}
    7bd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    7bd8:	4158      	adcs	r0, r3
    7bda:	f7ff bfaf 	b.w	7b3c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7bde:	429c      	cmp	r4, r3
    7be0:	d0e3      	beq.n	7baa <move_thread_to_end_of_prio_q+0x32>
    7be2:	681b      	ldr	r3, [r3, #0]
    7be4:	e7e0      	b.n	7ba8 <move_thread_to_end_of_prio_q+0x30>
    7be6:	bf00      	nop
    7be8:	20001018 	.word	0x20001018

00007bec <ready_thread>:
{
    7bec:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7bee:	f990 300d 	ldrsb.w	r3, [r0, #13]
    7bf2:	7b42      	ldrb	r2, [r0, #13]
    7bf4:	2b00      	cmp	r3, #0
    7bf6:	db29      	blt.n	7c4c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7bf8:	06d3      	lsls	r3, r2, #27
    7bfa:	d127      	bne.n	7c4c <ready_thread+0x60>
	return node->next != NULL;
    7bfc:	6983      	ldr	r3, [r0, #24]
    7bfe:	bb2b      	cbnz	r3, 7c4c <ready_thread+0x60>
	return list->head == list;
    7c00:	4913      	ldr	r1, [pc, #76]	; (7c50 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    7c02:	f062 027f 	orn	r2, r2, #127	; 0x7f
    7c06:	7342      	strb	r2, [r0, #13]
    7c08:	460a      	mov	r2, r1
    7c0a:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7c0e:	4294      	cmp	r4, r2
    7c10:	bf18      	it	ne
    7c12:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    7c14:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7c16:	b923      	cbnz	r3, 7c22 <ready_thread+0x36>
	node->prev = tail;
    7c18:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    7c1c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    7c1e:	6208      	str	r0, [r1, #32]
}
    7c20:	e00c      	b.n	7c3c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    7c22:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    7c26:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    7c2a:	42b5      	cmp	r5, r6
    7c2c:	d00a      	beq.n	7c44 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7c2e:	42ae      	cmp	r6, r5
    7c30:	dd08      	ble.n	7c44 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    7c32:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7c34:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    7c38:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    7c3a:	6058      	str	r0, [r3, #4]
}
    7c3c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    7c3e:	2000      	movs	r0, #0
    7c40:	f7ff bf7c 	b.w	7b3c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7c44:	42a3      	cmp	r3, r4
    7c46:	d0e7      	beq.n	7c18 <ready_thread+0x2c>
    7c48:	681b      	ldr	r3, [r3, #0]
    7c4a:	e7e4      	b.n	7c16 <ready_thread+0x2a>
}
    7c4c:	bc70      	pop	{r4, r5, r6}
    7c4e:	4770      	bx	lr
    7c50:	20001018 	.word	0x20001018

00007c54 <unready_thread>:
{
    7c54:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    7c56:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7c5a:	7b43      	ldrb	r3, [r0, #13]
    7c5c:	2a00      	cmp	r2, #0
{
    7c5e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    7c60:	da04      	bge.n	7c6c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7c66:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7c68:	f001 ffc1 	bl	9bee <sys_dlist_remove>
	update_cache(thread == _current);
    7c6c:	4b04      	ldr	r3, [pc, #16]	; (7c80 <unready_thread+0x2c>)
    7c6e:	6898      	ldr	r0, [r3, #8]
    7c70:	1a43      	subs	r3, r0, r1
    7c72:	4258      	negs	r0, r3
    7c74:	4158      	adcs	r0, r3
}
    7c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    7c7a:	f7ff bf5f 	b.w	7b3c <update_cache>
    7c7e:	bf00      	nop
    7c80:	20001018 	.word	0x20001018

00007c84 <pend_locked>:
{
    7c84:	b570      	push	{r4, r5, r6, lr}
    7c86:	4615      	mov	r5, r2
    7c88:	461c      	mov	r4, r3
    7c8a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    7c8c:	f001 ffc1 	bl	9c12 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7c90:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    7c94:	bf08      	it	eq
    7c96:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    7c9a:	d008      	beq.n	7cae <pend_locked+0x2a>
    7c9c:	462a      	mov	r2, r5
    7c9e:	4623      	mov	r3, r4
    7ca0:	f106 0018 	add.w	r0, r6, #24
    7ca4:	4902      	ldr	r1, [pc, #8]	; (7cb0 <pend_locked+0x2c>)
}
    7ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7caa:	f000 ba97 	b.w	81dc <z_add_timeout>
    7cae:	bd70      	pop	{r4, r5, r6, pc}
    7cb0:	00009ceb 	.word	0x00009ceb

00007cb4 <z_time_slice>:
{
    7cb4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7cb6:	f04f 0320 	mov.w	r3, #32
    7cba:	f3ef 8511 	mrs	r5, BASEPRI
    7cbe:	f383 8812 	msr	BASEPRI_MAX, r3
    7cc2:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    7cc6:	4b10      	ldr	r3, [pc, #64]	; (7d08 <z_time_slice+0x54>)
	if (pending_current == curr) {
    7cc8:	4a10      	ldr	r2, [pc, #64]	; (7d0c <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    7cca:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    7ccc:	6810      	ldr	r0, [r2, #0]
    7cce:	42a0      	cmp	r0, r4
    7cd0:	d106      	bne.n	7ce0 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    7cd2:	f7ff ff0b 	bl	7aec <z_reset_time_slice>
	__asm__ volatile(
    7cd6:	f385 8811 	msr	BASEPRI, r5
    7cda:	f3bf 8f6f 	isb	sy
}
    7cde:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    7ce0:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    7ce2:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    7ce4:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    7ce6:	4a0a      	ldr	r2, [pc, #40]	; (7d10 <z_time_slice+0x5c>)
    7ce8:	5cd3      	ldrb	r3, [r2, r3]
    7cea:	2b00      	cmp	r3, #0
    7cec:	d0f3      	beq.n	7cd6 <z_time_slice+0x22>
    7cee:	4620      	mov	r0, r4
    7cf0:	f7ff fece 	bl	7a90 <sliceable>
    7cf4:	2800      	cmp	r0, #0
    7cf6:	d0ee      	beq.n	7cd6 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    7cf8:	7b63      	ldrb	r3, [r4, #13]
    7cfa:	06db      	lsls	r3, r3, #27
    7cfc:	d102      	bne.n	7d04 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    7cfe:	4620      	mov	r0, r4
    7d00:	f7ff ff3a 	bl	7b78 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    7d04:	4620      	mov	r0, r4
    7d06:	e7e4      	b.n	7cd2 <z_time_slice+0x1e>
    7d08:	20001018 	.word	0x20001018
    7d0c:	20001040 	.word	0x20001040
    7d10:	20001652 	.word	0x20001652

00007d14 <z_pend_curr>:
{
    7d14:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    7d16:	480c      	ldr	r0, [pc, #48]	; (7d48 <z_pend_curr+0x34>)
    7d18:	4d0c      	ldr	r5, [pc, #48]	; (7d4c <z_pend_curr+0x38>)
    7d1a:	6886      	ldr	r6, [r0, #8]
    7d1c:	602e      	str	r6, [r5, #0]
{
    7d1e:	460c      	mov	r4, r1
    7d20:	4611      	mov	r1, r2
    7d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    7d26:	f04f 0620 	mov.w	r6, #32
    7d2a:	f3ef 8511 	mrs	r5, BASEPRI
    7d2e:	f386 8812 	msr	BASEPRI_MAX, r6
    7d32:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    7d36:	6880      	ldr	r0, [r0, #8]
    7d38:	f7ff ffa4 	bl	7c84 <pend_locked>
	ret = arch_swap(key);
    7d3c:	4620      	mov	r0, r4
}
    7d3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d42:	f7fb bf2f 	b.w	3ba4 <arch_swap>
    7d46:	bf00      	nop
    7d48:	20001018 	.word	0x20001018
    7d4c:	20001040 	.word	0x20001040

00007d50 <z_set_prio>:
{
    7d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d52:	4604      	mov	r4, r0
    7d54:	f04f 0320 	mov.w	r3, #32
    7d58:	f3ef 8611 	mrs	r6, BASEPRI
    7d5c:	f383 8812 	msr	BASEPRI_MAX, r3
    7d60:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    7d64:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7d66:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    7d68:	b249      	sxtb	r1, r1
    7d6a:	d119      	bne.n	7da0 <z_set_prio+0x50>
	return node->next != NULL;
    7d6c:	6985      	ldr	r5, [r0, #24]
    7d6e:	b9bd      	cbnz	r5, 7da0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7d74:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7d76:	f001 ff3a 	bl	9bee <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7d7a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    7d7c:	4a16      	ldr	r2, [pc, #88]	; (7dd8 <z_set_prio+0x88>)
				thread->base.prio = prio;
    7d7e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7d80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7d84:	7343      	strb	r3, [r0, #13]
    7d86:	4613      	mov	r3, r2
    7d88:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7d8c:	4298      	cmp	r0, r3
    7d8e:	bf18      	it	ne
    7d90:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    7d92:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7d94:	b95d      	cbnz	r5, 7dae <z_set_prio+0x5e>
	node->prev = tail;
    7d96:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    7d9a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    7d9c:	6214      	str	r4, [r2, #32]
}
    7d9e:	e011      	b.n	7dc4 <z_set_prio+0x74>
			thread->base.prio = prio;
    7da0:	73a1      	strb	r1, [r4, #14]
    7da2:	2000      	movs	r0, #0
	__asm__ volatile(
    7da4:	f386 8811 	msr	BASEPRI, r6
    7da8:	f3bf 8f6f 	isb	sy
}
    7dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    7dae:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    7db2:	42b9      	cmp	r1, r7
    7db4:	d00b      	beq.n	7dce <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7db6:	428f      	cmp	r7, r1
    7db8:	dd09      	ble.n	7dce <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    7dba:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    7dbc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    7dc0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    7dc2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    7dc4:	2001      	movs	r0, #1
    7dc6:	f7ff feb9 	bl	7b3c <update_cache>
    7dca:	2001      	movs	r0, #1
    7dcc:	e7ea      	b.n	7da4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    7dce:	42a8      	cmp	r0, r5
    7dd0:	d0e1      	beq.n	7d96 <z_set_prio+0x46>
    7dd2:	682d      	ldr	r5, [r5, #0]
    7dd4:	e7de      	b.n	7d94 <z_set_prio+0x44>
    7dd6:	bf00      	nop
    7dd8:	20001018 	.word	0x20001018

00007ddc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7ddc:	b949      	cbnz	r1, 7df2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7dde:	f3ef 8005 	mrs	r0, IPSR
    7de2:	b930      	cbnz	r0, 7df2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    7de4:	4b05      	ldr	r3, [pc, #20]	; (7dfc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    7de6:	699a      	ldr	r2, [r3, #24]
    7de8:	689b      	ldr	r3, [r3, #8]
    7dea:	429a      	cmp	r2, r3
    7dec:	d001      	beq.n	7df2 <z_reschedule+0x16>
    7dee:	f7fb bed9 	b.w	3ba4 <arch_swap>
    7df2:	f381 8811 	msr	BASEPRI, r1
    7df6:	f3bf 8f6f 	isb	sy
}
    7dfa:	4770      	bx	lr
    7dfc:	20001018 	.word	0x20001018

00007e00 <z_sched_start>:
{
    7e00:	b510      	push	{r4, lr}
	__asm__ volatile(
    7e02:	f04f 0220 	mov.w	r2, #32
    7e06:	f3ef 8411 	mrs	r4, BASEPRI
    7e0a:	f382 8812 	msr	BASEPRI_MAX, r2
    7e0e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    7e12:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    7e14:	0751      	lsls	r1, r2, #29
    7e16:	d404      	bmi.n	7e22 <z_sched_start+0x22>
	__asm__ volatile(
    7e18:	f384 8811 	msr	BASEPRI, r4
    7e1c:	f3bf 8f6f 	isb	sy
}
    7e20:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7e22:	f022 0204 	bic.w	r2, r2, #4
    7e26:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    7e28:	f7ff fee0 	bl	7bec <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7e2c:	4621      	mov	r1, r4
    7e2e:	4802      	ldr	r0, [pc, #8]	; (7e38 <z_sched_start+0x38>)
}
    7e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    7e34:	f7ff bfd2 	b.w	7ddc <z_reschedule>
    7e38:	20001653 	.word	0x20001653

00007e3c <z_impl_k_thread_suspend>:
{
    7e3c:	b570      	push	{r4, r5, r6, lr}
    7e3e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7e40:	3018      	adds	r0, #24
    7e42:	f001 ff9f 	bl	9d84 <z_abort_timeout>
	__asm__ volatile(
    7e46:	f04f 0320 	mov.w	r3, #32
    7e4a:	f3ef 8611 	mrs	r6, BASEPRI
    7e4e:	f383 8812 	msr	BASEPRI_MAX, r3
    7e52:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    7e56:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    7e5a:	7b63      	ldrb	r3, [r4, #13]
    7e5c:	2a00      	cmp	r2, #0
    7e5e:	da05      	bge.n	7e6c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7e64:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7e66:	4620      	mov	r0, r4
    7e68:	f001 fec1 	bl	9bee <sys_dlist_remove>
		update_cache(thread == _current);
    7e6c:	4d0b      	ldr	r5, [pc, #44]	; (7e9c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7e6e:	7b63      	ldrb	r3, [r4, #13]
    7e70:	68a8      	ldr	r0, [r5, #8]
    7e72:	f043 0310 	orr.w	r3, r3, #16
    7e76:	7363      	strb	r3, [r4, #13]
    7e78:	1b03      	subs	r3, r0, r4
    7e7a:	4258      	negs	r0, r3
    7e7c:	4158      	adcs	r0, r3
    7e7e:	f7ff fe5d 	bl	7b3c <update_cache>
	__asm__ volatile(
    7e82:	f386 8811 	msr	BASEPRI, r6
    7e86:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    7e8a:	68ab      	ldr	r3, [r5, #8]
    7e8c:	42a3      	cmp	r3, r4
    7e8e:	d103      	bne.n	7e98 <z_impl_k_thread_suspend+0x5c>
}
    7e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    7e94:	f001 bf6c 	b.w	9d70 <z_reschedule_unlocked>
}
    7e98:	bd70      	pop	{r4, r5, r6, pc}
    7e9a:	bf00      	nop
    7e9c:	20001018 	.word	0x20001018

00007ea0 <k_sched_lock>:
	__asm__ volatile(
    7ea0:	f04f 0320 	mov.w	r3, #32
    7ea4:	f3ef 8111 	mrs	r1, BASEPRI
    7ea8:	f383 8812 	msr	BASEPRI_MAX, r3
    7eac:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    7eb0:	4b04      	ldr	r3, [pc, #16]	; (7ec4 <k_sched_lock+0x24>)
    7eb2:	689a      	ldr	r2, [r3, #8]
    7eb4:	7bd3      	ldrb	r3, [r2, #15]
    7eb6:	3b01      	subs	r3, #1
    7eb8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    7eba:	f381 8811 	msr	BASEPRI, r1
    7ebe:	f3bf 8f6f 	isb	sy
}
    7ec2:	4770      	bx	lr
    7ec4:	20001018 	.word	0x20001018

00007ec8 <k_sched_unlock>:
{
    7ec8:	b510      	push	{r4, lr}
	__asm__ volatile(
    7eca:	f04f 0320 	mov.w	r3, #32
    7ece:	f3ef 8411 	mrs	r4, BASEPRI
    7ed2:	f383 8812 	msr	BASEPRI_MAX, r3
    7ed6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    7eda:	4b08      	ldr	r3, [pc, #32]	; (7efc <k_sched_unlock+0x34>)
    7edc:	689a      	ldr	r2, [r3, #8]
    7ede:	7bd3      	ldrb	r3, [r2, #15]
    7ee0:	3301      	adds	r3, #1
    7ee2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7ee4:	2000      	movs	r0, #0
    7ee6:	f7ff fe29 	bl	7b3c <update_cache>
	__asm__ volatile(
    7eea:	f384 8811 	msr	BASEPRI, r4
    7eee:	f3bf 8f6f 	isb	sy
}
    7ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    7ef6:	f001 bf3b 	b.w	9d70 <z_reschedule_unlocked>
    7efa:	bf00      	nop
    7efc:	20001018 	.word	0x20001018

00007f00 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7f00:	4b02      	ldr	r3, [pc, #8]	; (7f0c <z_sched_init+0xc>)
    7f02:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    7f06:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    7f0a:	4770      	bx	lr
    7f0c:	20001018 	.word	0x20001018

00007f10 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    7f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    7f12:	f04f 0320 	mov.w	r3, #32
    7f16:	f3ef 8511 	mrs	r5, BASEPRI
    7f1a:	f383 8812 	msr	BASEPRI_MAX, r3
    7f1e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    7f22:	4919      	ldr	r1, [pc, #100]	; (7f88 <z_impl_k_yield+0x78>)
    7f24:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7f26:	7b43      	ldrb	r3, [r0, #13]
    7f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7f2c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7f2e:	f001 fe5e 	bl	9bee <sys_dlist_remove>
	}
	queue_thread(_current);
    7f32:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7f34:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    7f36:	4608      	mov	r0, r1
    7f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
    7f3c:	735a      	strb	r2, [r3, #13]
    7f3e:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    7f42:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f44:	4282      	cmp	r2, r0
    7f46:	bf08      	it	eq
    7f48:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f4a:	b922      	cbnz	r2, 7f56 <z_impl_k_yield+0x46>
	node->prev = tail;
    7f4c:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    7f50:	6023      	str	r3, [r4, #0]
	list->tail = node;
    7f52:	620b      	str	r3, [r1, #32]
}
    7f54:	e00c      	b.n	7f70 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    7f56:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    7f5a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    7f5e:	42be      	cmp	r6, r7
    7f60:	d00e      	beq.n	7f80 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7f62:	42b7      	cmp	r7, r6
    7f64:	dd0c      	ble.n	7f80 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    7f66:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    7f68:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    7f6c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    7f6e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    7f70:	2001      	movs	r0, #1
    7f72:	f7ff fde3 	bl	7b3c <update_cache>
    7f76:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    7f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7f7c:	f7fb be12 	b.w	3ba4 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7f80:	42a2      	cmp	r2, r4
    7f82:	d0e3      	beq.n	7f4c <z_impl_k_yield+0x3c>
    7f84:	6812      	ldr	r2, [r2, #0]
    7f86:	e7e0      	b.n	7f4a <z_impl_k_yield+0x3a>
    7f88:	20001018 	.word	0x20001018

00007f8c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7f8c:	ea50 0301 	orrs.w	r3, r0, r1
{
    7f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f94:	4605      	mov	r5, r0
    7f96:	460e      	mov	r6, r1
	if (ticks == 0) {
    7f98:	d103      	bne.n	7fa2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    7f9a:	f7ff ffb9 	bl	7f10 <z_impl_k_yield>
		k_yield();
		return 0;
    7f9e:	2000      	movs	r0, #0
    7fa0:	e02c      	b.n	7ffc <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    7fa2:	1c83      	adds	r3, r0, #2
    7fa4:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    7fa8:	db2a      	blt.n	8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7faa:	f001 ff11 	bl	9dd0 <sys_clock_tick_get_32>
    7fae:	182c      	adds	r4, r5, r0
    7fb0:	f04f 0320 	mov.w	r3, #32
    7fb4:	f3ef 8811 	mrs	r8, BASEPRI
    7fb8:	f383 8812 	msr	BASEPRI_MAX, r3
    7fbc:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    7fc0:	4f11      	ldr	r7, [pc, #68]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7fc2:	4b12      	ldr	r3, [pc, #72]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fc4:	68b8      	ldr	r0, [r7, #8]
    7fc6:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    7fc8:	f7ff fe44 	bl	7c54 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7fcc:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7fce:	4910      	ldr	r1, [pc, #64]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7fd0:	462a      	mov	r2, r5
    7fd2:	4633      	mov	r3, r6
    7fd4:	3018      	adds	r0, #24
    7fd6:	f000 f901 	bl	81dc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    7fda:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7fdc:	7b53      	ldrb	r3, [r2, #13]
    7fde:	f043 0310 	orr.w	r3, r3, #16
    7fe2:	7353      	strb	r3, [r2, #13]
    7fe4:	4640      	mov	r0, r8
    7fe6:	f7fb fddd 	bl	3ba4 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7fea:	f001 fef1 	bl	9dd0 <sys_clock_tick_get_32>
    7fee:	1a20      	subs	r0, r4, r0
    7ff0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    7ff4:	2801      	cmp	r0, #1
    7ff6:	f173 0300 	sbcs.w	r3, r3, #0
    7ffa:	dbd0      	blt.n	7f9e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    7ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8000:	f06f 0401 	mvn.w	r4, #1
    8004:	1a24      	subs	r4, r4, r0
    8006:	e7d3      	b.n	7fb0 <z_tick_sleep+0x24>
    8008:	20001018 	.word	0x20001018
    800c:	20001040 	.word	0x20001040
    8010:	00009ceb 	.word	0x00009ceb

00008014 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8014:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    8018:	bf08      	it	eq
    801a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    801e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8020:	d106      	bne.n	8030 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    8022:	4b08      	ldr	r3, [pc, #32]	; (8044 <z_impl_k_sleep+0x30>)
    8024:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    8026:	f7ff ff09 	bl	7e3c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    802a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    802e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    8030:	f7ff ffac 	bl	7f8c <z_tick_sleep>
    8034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8038:	fb80 0303 	smull	r0, r3, r0, r3
    803c:	0bc0      	lsrs	r0, r0, #15
    803e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8042:	e7f4      	b.n	802e <z_impl_k_sleep+0x1a>
    8044:	20001018 	.word	0x20001018

00008048 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    8048:	4b01      	ldr	r3, [pc, #4]	; (8050 <z_impl_z_current_get+0x8>)
    804a:	6898      	ldr	r0, [r3, #8]
    804c:	4770      	bx	lr
    804e:	bf00      	nop
    8050:	20001018 	.word	0x20001018

00008054 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8058:	4604      	mov	r4, r0
    805a:	f04f 0320 	mov.w	r3, #32
    805e:	f3ef 8611 	mrs	r6, BASEPRI
    8062:	f383 8812 	msr	BASEPRI_MAX, r3
    8066:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    806a:	7b03      	ldrb	r3, [r0, #12]
    806c:	07d9      	lsls	r1, r3, #31
    806e:	d50b      	bpl.n	8088 <z_thread_abort+0x34>
	__asm__ volatile(
    8070:	f386 8811 	msr	BASEPRI, r6
    8074:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    8078:	4040      	eors	r0, r0
    807a:	f380 8811 	msr	BASEPRI, r0
    807e:	f04f 0004 	mov.w	r0, #4
    8082:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    8084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8088:	7b43      	ldrb	r3, [r0, #13]
    808a:	071a      	lsls	r2, r3, #28
    808c:	d504      	bpl.n	8098 <z_thread_abort+0x44>
    808e:	f386 8811 	msr	BASEPRI, r6
    8092:	f3bf 8f6f 	isb	sy
    8096:	e7f5      	b.n	8084 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8098:	f023 0220 	bic.w	r2, r3, #32
    809c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    80a0:	09d2      	lsrs	r2, r2, #7
    80a2:	d123      	bne.n	80ec <z_thread_abort+0x98>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    80a4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    80a6:	68a3      	ldr	r3, [r4, #8]
    80a8:	b113      	cbz	r3, 80b0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    80aa:	4620      	mov	r0, r4
    80ac:	f001 fda7 	bl	9bfe <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    80b0:	f104 0018 	add.w	r0, r4, #24
    80b4:	f001 fe66 	bl	9d84 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    80b8:	f104 0758 	add.w	r7, r4, #88	; 0x58
    80bc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    80c0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    80c2:	42bd      	cmp	r5, r7
    80c4:	d000      	beq.n	80c8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    80c6:	b9cd      	cbnz	r5, 80fc <z_thread_abort+0xa8>
		update_cache(1);
    80c8:	2001      	movs	r0, #1
    80ca:	f7ff fd37 	bl	7b3c <update_cache>
		z_thread_monitor_exit(thread);
    80ce:	4620      	mov	r0, r4
    80d0:	f7ff faac 	bl	762c <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
    80d4:	4b10      	ldr	r3, [pc, #64]	; (8118 <z_thread_abort+0xc4>)
    80d6:	689b      	ldr	r3, [r3, #8]
    80d8:	42a3      	cmp	r3, r4
    80da:	d1d8      	bne.n	808e <z_thread_abort+0x3a>
    80dc:	f3ef 8305 	mrs	r3, IPSR
    80e0:	2b00      	cmp	r3, #0
    80e2:	d1d4      	bne.n	808e <z_thread_abort+0x3a>
    80e4:	4630      	mov	r0, r6
    80e6:	f7fb fd5d 	bl	3ba4 <arch_swap>
	return ret;
    80ea:	e7d0      	b.n	808e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    80ec:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    80f0:	f043 0308 	orr.w	r3, r3, #8
    80f4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    80f6:	f001 fd7a 	bl	9bee <sys_dlist_remove>
}
    80fa:	e7d4      	b.n	80a6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    80fc:	4628      	mov	r0, r5
    80fe:	f001 fd7e 	bl	9bfe <unpend_thread_no_timeout>
    8102:	f105 0018 	add.w	r0, r5, #24
    8106:	f001 fe3d 	bl	9d84 <z_abort_timeout>
    810a:	f8c5 80ac 	str.w	r8, [r5, #172]	; 0xac
		ready_thread(thread);
    810e:	4628      	mov	r0, r5
    8110:	f7ff fd6c 	bl	7bec <ready_thread>
    8114:	e7d4      	b.n	80c0 <z_thread_abort+0x6c>
    8116:	bf00      	nop
    8118:	20001018 	.word	0x20001018

0000811c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    811c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    811e:	4806      	ldr	r0, [pc, #24]	; (8138 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8120:	4a06      	ldr	r2, [pc, #24]	; (813c <z_data_copy+0x20>)
    8122:	4907      	ldr	r1, [pc, #28]	; (8140 <z_data_copy+0x24>)
    8124:	1a12      	subs	r2, r2, r0
    8126:	f001 fce8 	bl	9afa <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    812a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    812e:	4a05      	ldr	r2, [pc, #20]	; (8144 <z_data_copy+0x28>)
    8130:	4905      	ldr	r1, [pc, #20]	; (8148 <z_data_copy+0x2c>)
    8132:	4806      	ldr	r0, [pc, #24]	; (814c <z_data_copy+0x30>)
    8134:	f001 bce1 	b.w	9afa <z_early_memcpy>
    8138:	20000000 	.word	0x20000000
    813c:	2000021c 	.word	0x2000021c
    8140:	0000b210 	.word	0x0000b210
    8144:	00000000 	.word	0x00000000
    8148:	0000b210 	.word	0x0000b210
    814c:	20000000 	.word	0x20000000

00008150 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    8150:	4b03      	ldr	r3, [pc, #12]	; (8160 <elapsed+0x10>)
    8152:	681b      	ldr	r3, [r3, #0]
    8154:	b90b      	cbnz	r3, 815a <elapsed+0xa>
    8156:	f7fd bc0f 	b.w	5978 <sys_clock_elapsed>
}
    815a:	2000      	movs	r0, #0
    815c:	4770      	bx	lr
    815e:	bf00      	nop
    8160:	2000104c 	.word	0x2000104c

00008164 <next_timeout>:

static int32_t next_timeout(void)
{
    8164:	b510      	push	{r4, lr}
	return list->head == list;
    8166:	4b0e      	ldr	r3, [pc, #56]	; (81a0 <next_timeout+0x3c>)
    8168:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    816a:	429c      	cmp	r4, r3
    816c:	d104      	bne.n	8178 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    816e:	f7ff ffef 	bl	8150 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    8172:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    8176:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    8178:	f7ff ffea 	bl	8150 <elapsed>
	if ((to == NULL) ||
    817c:	2c00      	cmp	r4, #0
    817e:	d0f8      	beq.n	8172 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    8180:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    8184:	1a1b      	subs	r3, r3, r0
    8186:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    818a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    818e:	f172 0100 	sbcs.w	r1, r2, #0
    8192:	daee      	bge.n	8172 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    8194:	2a00      	cmp	r2, #0
    8196:	bfac      	ite	ge
    8198:	4618      	movge	r0, r3
    819a:	2000      	movlt	r0, #0
	return ret;
    819c:	e7eb      	b.n	8176 <next_timeout+0x12>
    819e:	bf00      	nop
    81a0:	200000f4 	.word	0x200000f4

000081a4 <remove_timeout>:
{
    81a4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    81a6:	b170      	cbz	r0, 81c6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    81a8:	4b0b      	ldr	r3, [pc, #44]	; (81d8 <remove_timeout+0x34>)
    81aa:	685b      	ldr	r3, [r3, #4]
    81ac:	4298      	cmp	r0, r3
    81ae:	d00a      	beq.n	81c6 <remove_timeout+0x22>
    81b0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    81b2:	b143      	cbz	r3, 81c6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    81b4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    81b8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    81bc:	1912      	adds	r2, r2, r4
    81be:	eb41 0105 	adc.w	r1, r1, r5
    81c2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    81c6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    81ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    81cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    81ce:	2300      	movs	r3, #0
	node->prev = NULL;
    81d0:	e9c0 3300 	strd	r3, r3, [r0]
}
    81d4:	bd30      	pop	{r4, r5, pc}
    81d6:	bf00      	nop
    81d8:	200000f4 	.word	0x200000f4

000081dc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    81dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    81e0:	bf08      	it	eq
    81e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    81e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81e8:	4604      	mov	r4, r0
    81ea:	461d      	mov	r5, r3
    81ec:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    81ee:	d05c      	beq.n	82aa <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    81f0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    81f2:	f04f 0320 	mov.w	r3, #32
    81f6:	f3ef 8711 	mrs	r7, BASEPRI
    81fa:	f383 8812 	msr	BASEPRI_MAX, r3
    81fe:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    8202:	3201      	adds	r2, #1
    8204:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    8208:	da24      	bge.n	8254 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    820a:	492d      	ldr	r1, [pc, #180]	; (82c0 <z_add_timeout+0xe4>)
    820c:	e9d1 2000 	ldrd	r2, r0, [r1]
    8210:	f06f 0301 	mvn.w	r3, #1
    8214:	1a9b      	subs	r3, r3, r2
    8216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    821a:	eb62 0000 	sbc.w	r0, r2, r0
    821e:	1b9e      	subs	r6, r3, r6
    8220:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    8224:	2e01      	cmp	r6, #1
    8226:	f170 0300 	sbcs.w	r3, r0, #0
    822a:	da01      	bge.n	8230 <z_add_timeout+0x54>
    822c:	2601      	movs	r6, #1
    822e:	2000      	movs	r0, #0
    8230:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    8234:	4e23      	ldr	r6, [pc, #140]	; (82c4 <z_add_timeout+0xe8>)
    8236:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    823a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    823c:	45b4      	cmp	ip, r6
    823e:	bf08      	it	eq
    8240:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    8244:	f1bc 0f00 	cmp.w	ip, #0
    8248:	d10d      	bne.n	8266 <z_add_timeout+0x8a>
	node->prev = tail;
    824a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    824e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    8250:	6074      	str	r4, [r6, #4]
}
    8252:	e01c      	b.n	828e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    8254:	f7ff ff7c 	bl	8150 <elapsed>
    8258:	3601      	adds	r6, #1
    825a:	f145 0500 	adc.w	r5, r5, #0
    825e:	1836      	adds	r6, r6, r0
    8260:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    8264:	e7e4      	b.n	8230 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    8266:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    826a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    826e:	4293      	cmp	r3, r2
    8270:	eb71 0e00 	sbcs.w	lr, r1, r0
    8274:	da1a      	bge.n	82ac <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    8276:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    8278:	f8dc 3004 	ldr.w	r3, [ip, #4]
    827c:	eb60 0001 	sbc.w	r0, r0, r1
    8280:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    8284:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    8288:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    828a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    828e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8290:	42b3      	cmp	r3, r6
    8292:	d006      	beq.n	82a2 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8294:	429c      	cmp	r4, r3
    8296:	d104      	bne.n	82a2 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    8298:	f7ff ff64 	bl	8164 <next_timeout>
    829c:	2100      	movs	r1, #0
    829e:	f7fd fb39 	bl	5914 <sys_clock_set_timeout>
	__asm__ volatile(
    82a2:	f387 8811 	msr	BASEPRI, r7
    82a6:	f3bf 8f6f 	isb	sy
		}
	}
}
    82aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    82ac:	1a9b      	subs	r3, r3, r2
    82ae:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    82b2:	45ac      	cmp	ip, r5
    82b4:	e9c4 3104 	strd	r3, r1, [r4, #16]
    82b8:	d0c7      	beq.n	824a <z_add_timeout+0x6e>
    82ba:	f8dc c000 	ldr.w	ip, [ip]
    82be:	e7c1      	b.n	8244 <z_add_timeout+0x68>
    82c0:	200008a8 	.word	0x200008a8
    82c4:	200000f4 	.word	0x200000f4

000082c8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    82c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    82cc:	f04f 0320 	mov.w	r3, #32
    82d0:	f3ef 8c11 	mrs	ip, BASEPRI
    82d4:	f383 8812 	msr	BASEPRI_MAX, r3
    82d8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    82dc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8390 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    82e0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8394 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    82e4:	4f2c      	ldr	r7, [pc, #176]	; (8398 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    82e6:	f8c9 0000 	str.w	r0, [r9]
    82ea:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    82ee:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    82f0:	4550      	cmp	r0, sl
    82f2:	bf08      	it	eq
    82f4:	2000      	moveq	r0, #0
    82f6:	2500      	movs	r5, #0
		curr_tick += dt;
    82f8:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    82fc:	f8d9 3000 	ldr.w	r3, [r9]
    8300:	46e0      	mov	r8, ip
    8302:	b380      	cbz	r0, 8366 <sys_clock_announce+0x9e>
    8304:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    8308:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    830c:	42b3      	cmp	r3, r6
    830e:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    8312:	da05      	bge.n	8320 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    8314:	1af6      	subs	r6, r6, r3
    8316:	eb6c 040e 	sbc.w	r4, ip, lr
    831a:	e9c0 6404 	strd	r6, r4, [r0, #16]
    831e:	e022      	b.n	8366 <sys_clock_announce+0x9e>
		curr_tick += dt;
    8320:	18b2      	adds	r2, r6, r2
    8322:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    8326:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    832a:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    832e:	f7ff ff39 	bl	81a4 <remove_timeout>
	__asm__ volatile(
    8332:	f388 8811 	msr	BASEPRI, r8
    8336:	f3bf 8f6f 	isb	sy
		t->fn(t);
    833a:	6883      	ldr	r3, [r0, #8]
    833c:	4798      	blx	r3
	__asm__ volatile(
    833e:	f04f 0320 	mov.w	r3, #32
    8342:	f3ef 8811 	mrs	r8, BASEPRI
    8346:	f383 8812 	msr	BASEPRI_MAX, r3
    834a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    834e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    8352:	f8da 0000 	ldr.w	r0, [sl]
    8356:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8358:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    835a:	46c4      	mov	ip, r8
    835c:	f8c9 3000 	str.w	r3, [r9]
    8360:	d1ca      	bne.n	82f8 <sys_clock_announce+0x30>
		curr_tick += dt;
    8362:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    8366:	189a      	adds	r2, r3, r2
    8368:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    836c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    836e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    8372:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    8376:	f7ff fef5 	bl	8164 <next_timeout>
    837a:	4621      	mov	r1, r4
    837c:	f7fd faca 	bl	5914 <sys_clock_set_timeout>
	__asm__ volatile(
    8380:	f388 8811 	msr	BASEPRI, r8
    8384:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    8388:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    838c:	f7ff bc92 	b.w	7cb4 <z_time_slice>
    8390:	200000f4 	.word	0x200000f4
    8394:	2000104c 	.word	0x2000104c
    8398:	200008a8 	.word	0x200008a8

0000839c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    839c:	b510      	push	{r4, lr}
	__asm__ volatile(
    839e:	f04f 0320 	mov.w	r3, #32
    83a2:	f3ef 8411 	mrs	r4, BASEPRI
    83a6:	f383 8812 	msr	BASEPRI_MAX, r3
    83aa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    83ae:	f7ff fecf 	bl	8150 <elapsed>
    83b2:	4a06      	ldr	r2, [pc, #24]	; (83cc <sys_clock_tick_get+0x30>)
    83b4:	4603      	mov	r3, r0
    83b6:	e9d2 0100 	ldrd	r0, r1, [r2]
    83ba:	1818      	adds	r0, r3, r0
    83bc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    83c0:	f384 8811 	msr	BASEPRI, r4
    83c4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    83c8:	bd10      	pop	{r4, pc}
    83ca:	bf00      	nop
    83cc:	200008a8 	.word	0x200008a8

000083d0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    83d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83d2:	4604      	mov	r4, r0
	__asm__ volatile(
    83d4:	f04f 0320 	mov.w	r3, #32
    83d8:	f3ef 8711 	mrs	r7, BASEPRI
    83dc:	f383 8812 	msr	BASEPRI_MAX, r3
    83e0:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    83e4:	6802      	ldr	r2, [r0, #0]
    83e6:	b122      	cbz	r2, 83f2 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    83e8:	f387 8811 	msr	BASEPRI, r7
    83ec:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    83f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    83f2:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    83f6:	1c58      	adds	r0, r3, #1
    83f8:	f146 0100 	adc.w	r1, r6, #0
    83fc:	2802      	cmp	r0, #2
    83fe:	f171 0100 	sbcs.w	r1, r1, #0
    8402:	d327      	bcc.n	8454 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    8404:	2b01      	cmp	r3, #1
    8406:	f176 0100 	sbcs.w	r1, r6, #0
    840a:	bfbc      	itt	lt
    840c:	2301      	movlt	r3, #1
    840e:	4616      	movlt	r6, r2
    8410:	1e5d      	subs	r5, r3, #1
    8412:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
	return z_impl_k_uptime_ticks();
    8416:	f001 fcdf 	bl	9dd8 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    841a:	3001      	adds	r0, #1
    841c:	f141 0100 	adc.w	r1, r1, #0
    8420:	1940      	adds	r0, r0, r5
    8422:	eb46 0101 	adc.w	r1, r6, r1
    8426:	2801      	cmp	r0, #1
    8428:	f171 0100 	sbcs.w	r1, r1, #0
    842c:	db3b      	blt.n	84a6 <z_timer_expiration_handler+0xd6>
    842e:	f001 fcd3 	bl	9dd8 <z_impl_k_uptime_ticks>
    8432:	3001      	adds	r0, #1
    8434:	f141 0100 	adc.w	r1, r1, #0
    8438:	f06f 0201 	mvn.w	r2, #1
    843c:	1940      	adds	r0, r0, r5
    843e:	eb46 0301 	adc.w	r3, r6, r1
    8442:	1a12      	subs	r2, r2, r0
    8444:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8448:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    844c:	4918      	ldr	r1, [pc, #96]	; (84b0 <z_timer_expiration_handler+0xe0>)
    844e:	4620      	mov	r0, r4
    8450:	f7ff fec4 	bl	81dc <z_add_timeout>
	timer->status += 1U;
    8454:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8456:	3301      	adds	r3, #1
    8458:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    845a:	6a23      	ldr	r3, [r4, #32]
    845c:	b173      	cbz	r3, 847c <z_timer_expiration_handler+0xac>
    845e:	f387 8811 	msr	BASEPRI, r7
    8462:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    8466:	6a23      	ldr	r3, [r4, #32]
    8468:	4620      	mov	r0, r4
    846a:	4798      	blx	r3
	__asm__ volatile(
    846c:	f04f 0320 	mov.w	r3, #32
    8470:	f3ef 8711 	mrs	r7, BASEPRI
    8474:	f383 8812 	msr	BASEPRI_MAX, r3
    8478:	f3bf 8f6f 	isb	sy
	return list->head == list;
    847c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8480:	42a5      	cmp	r5, r4
    8482:	d0b1      	beq.n	83e8 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    8484:	2d00      	cmp	r5, #0
    8486:	d0af      	beq.n	83e8 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    8488:	4628      	mov	r0, r5
    848a:	f001 fbfa 	bl	9c82 <z_unpend_thread_no_timeout>
    848e:	2300      	movs	r3, #0
    8490:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac
	__asm__ volatile(
    8494:	f387 8811 	msr	BASEPRI, r7
    8498:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    849c:	4628      	mov	r0, r5
}
    849e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    84a2:	f001 bbde 	b.w	9c62 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    84a6:	f06f 0201 	mvn.w	r2, #1
    84aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    84ae:	e7cd      	b.n	844c <z_timer_expiration_handler+0x7c>
    84b0:	000083d1 	.word	0x000083d1

000084b4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    84b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    84b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    84bc:	bf08      	it	eq
    84be:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    84c2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    84c6:	4605      	mov	r5, r0
    84c8:	461c      	mov	r4, r3
    84ca:	4691      	mov	r9, r2
    84cc:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    84ce:	d01c      	beq.n	850a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    84d0:	1c53      	adds	r3, r2, #1
    84d2:	f174 33ff 	sbcs.w	r3, r4, #4294967295	; 0xffffffff
    84d6:	db09      	blt.n	84ec <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    84d8:	2a01      	cmp	r2, #1
    84da:	f174 0300 	sbcs.w	r3, r4, #0
    84de:	bfbc      	itt	lt
    84e0:	2201      	movlt	r2, #1
    84e2:	2400      	movlt	r4, #0
    84e4:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
    84e8:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    84ec:	4628      	mov	r0, r5
    84ee:	f001 fc49 	bl	9d84 <z_abort_timeout>
	timer->period = period;
    84f2:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    84f6:	2300      	movs	r3, #0
    84f8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    84fa:	464a      	mov	r2, r9
    84fc:	4643      	mov	r3, r8
    84fe:	4628      	mov	r0, r5
    8500:	4903      	ldr	r1, [pc, #12]	; (8510 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    8502:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8506:	f7ff be69 	b.w	81dc <z_add_timeout>
}
    850a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    850e:	bf00      	nop
    8510:	000083d1 	.word	0x000083d1

00008514 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    8514:	4801      	ldr	r0, [pc, #4]	; (851c <boot_banner+0x8>)
    8516:	f000 ba61 	b.w	89dc <printk>
    851a:	bf00      	nop
    851c:	0000b1e0 	.word	0x0000b1e0

00008520 <nrf_cc3xx_platform_init_no_rng>:
    8520:	b510      	push	{r4, lr}
    8522:	4c0a      	ldr	r4, [pc, #40]	; (854c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8524:	6823      	ldr	r3, [r4, #0]
    8526:	b11b      	cbz	r3, 8530 <nrf_cc3xx_platform_init_no_rng+0x10>
    8528:	2301      	movs	r3, #1
    852a:	6023      	str	r3, [r4, #0]
    852c:	2000      	movs	r0, #0
    852e:	bd10      	pop	{r4, pc}
    8530:	f000 f8ea 	bl	8708 <CC_LibInitNoRng>
    8534:	2800      	cmp	r0, #0
    8536:	d0f7      	beq.n	8528 <nrf_cc3xx_platform_init_no_rng+0x8>
    8538:	3801      	subs	r0, #1
    853a:	2806      	cmp	r0, #6
    853c:	d803      	bhi.n	8546 <nrf_cc3xx_platform_init_no_rng+0x26>
    853e:	4b04      	ldr	r3, [pc, #16]	; (8550 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8540:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8544:	bd10      	pop	{r4, pc}
    8546:	4803      	ldr	r0, [pc, #12]	; (8554 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8548:	bd10      	pop	{r4, pc}
    854a:	bf00      	nop
    854c:	20001050 	.word	0x20001050
    8550:	0000a4f4 	.word	0x0000a4f4
    8554:	ffff8ffe 	.word	0xffff8ffe

00008558 <nrf_cc3xx_platform_abort>:
    8558:	f3bf 8f4f 	dsb	sy
    855c:	4905      	ldr	r1, [pc, #20]	; (8574 <nrf_cc3xx_platform_abort+0x1c>)
    855e:	4b06      	ldr	r3, [pc, #24]	; (8578 <nrf_cc3xx_platform_abort+0x20>)
    8560:	68ca      	ldr	r2, [r1, #12]
    8562:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8566:	4313      	orrs	r3, r2
    8568:	60cb      	str	r3, [r1, #12]
    856a:	f3bf 8f4f 	dsb	sy
    856e:	bf00      	nop
    8570:	e7fd      	b.n	856e <nrf_cc3xx_platform_abort+0x16>
    8572:	bf00      	nop
    8574:	e000ed00 	.word	0xe000ed00
    8578:	05fa0004 	.word	0x05fa0004

0000857c <CC_PalAbort>:
    857c:	b410      	push	{r4}
    857e:	4b09      	ldr	r3, [pc, #36]	; (85a4 <CC_PalAbort+0x28>)
    8580:	4909      	ldr	r1, [pc, #36]	; (85a8 <CC_PalAbort+0x2c>)
    8582:	4c0a      	ldr	r4, [pc, #40]	; (85ac <CC_PalAbort+0x30>)
    8584:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    8588:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    858c:	6849      	ldr	r1, [r1, #4]
    858e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    8592:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    8596:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    859a:	2300      	movs	r3, #0
    859c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    85a0:	bc10      	pop	{r4}
    85a2:	4708      	bx	r1
    85a4:	5002b000 	.word	0x5002b000
    85a8:	200000fc 	.word	0x200000fc
    85ac:	5002a000 	.word	0x5002a000

000085b0 <nrf_cc3xx_platform_set_abort>:
    85b0:	e9d0 1200 	ldrd	r1, r2, [r0]
    85b4:	4b01      	ldr	r3, [pc, #4]	; (85bc <nrf_cc3xx_platform_set_abort+0xc>)
    85b6:	e9c3 1200 	strd	r1, r2, [r3]
    85ba:	4770      	bx	lr
    85bc:	200000fc 	.word	0x200000fc

000085c0 <mutex_free>:
    85c0:	b510      	push	{r4, lr}
    85c2:	4604      	mov	r4, r0
    85c4:	b150      	cbz	r0, 85dc <mutex_free+0x1c>
    85c6:	6863      	ldr	r3, [r4, #4]
    85c8:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    85cc:	d005      	beq.n	85da <mutex_free+0x1a>
    85ce:	4a06      	ldr	r2, [pc, #24]	; (85e8 <mutex_free+0x28>)
    85d0:	4293      	cmp	r3, r2
    85d2:	d002      	beq.n	85da <mutex_free+0x1a>
    85d4:	2300      	movs	r3, #0
    85d6:	6023      	str	r3, [r4, #0]
    85d8:	6062      	str	r2, [r4, #4]
    85da:	bd10      	pop	{r4, pc}
    85dc:	4b03      	ldr	r3, [pc, #12]	; (85ec <mutex_free+0x2c>)
    85de:	4804      	ldr	r0, [pc, #16]	; (85f0 <mutex_free+0x30>)
    85e0:	685b      	ldr	r3, [r3, #4]
    85e2:	4798      	blx	r3
    85e4:	e7ef      	b.n	85c6 <mutex_free+0x6>
    85e6:	bf00      	nop
    85e8:	a95c5f2c 	.word	0xa95c5f2c
    85ec:	200000fc 	.word	0x200000fc
    85f0:	0000a510 	.word	0x0000a510

000085f4 <mutex_lock>:
    85f4:	b1c8      	cbz	r0, 862a <mutex_lock+0x36>
    85f6:	6843      	ldr	r3, [r0, #4]
    85f8:	4a0d      	ldr	r2, [pc, #52]	; (8630 <mutex_lock+0x3c>)
    85fa:	4293      	cmp	r3, r2
    85fc:	d013      	beq.n	8626 <mutex_lock+0x32>
    85fe:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    8602:	d00e      	beq.n	8622 <mutex_lock+0x2e>
    8604:	2301      	movs	r3, #1
    8606:	e850 2f00 	ldrex	r2, [r0]
    860a:	4619      	mov	r1, r3
    860c:	e840 1c00 	strex	ip, r1, [r0]
    8610:	f09c 0f00 	teq	ip, #0
    8614:	d1f7      	bne.n	8606 <mutex_lock+0x12>
    8616:	2a01      	cmp	r2, #1
    8618:	d0f5      	beq.n	8606 <mutex_lock+0x12>
    861a:	f3bf 8f5f 	dmb	sy
    861e:	2000      	movs	r0, #0
    8620:	4770      	bx	lr
    8622:	4804      	ldr	r0, [pc, #16]	; (8634 <mutex_lock+0x40>)
    8624:	4770      	bx	lr
    8626:	4804      	ldr	r0, [pc, #16]	; (8638 <mutex_lock+0x44>)
    8628:	4770      	bx	lr
    862a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    862e:	4770      	bx	lr
    8630:	a95c5f2c 	.word	0xa95c5f2c
    8634:	ffff8fe9 	.word	0xffff8fe9
    8638:	ffff8fea 	.word	0xffff8fea

0000863c <mutex_unlock>:
    863c:	b180      	cbz	r0, 8660 <mutex_unlock+0x24>
    863e:	6843      	ldr	r3, [r0, #4]
    8640:	4a09      	ldr	r2, [pc, #36]	; (8668 <mutex_unlock+0x2c>)
    8642:	4293      	cmp	r3, r2
    8644:	d00a      	beq.n	865c <mutex_unlock+0x20>
    8646:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    864a:	d005      	beq.n	8658 <mutex_unlock+0x1c>
    864c:	f3bf 8f5f 	dmb	sy
    8650:	2300      	movs	r3, #0
    8652:	6003      	str	r3, [r0, #0]
    8654:	4618      	mov	r0, r3
    8656:	4770      	bx	lr
    8658:	4804      	ldr	r0, [pc, #16]	; (866c <mutex_unlock+0x30>)
    865a:	4770      	bx	lr
    865c:	4804      	ldr	r0, [pc, #16]	; (8670 <mutex_unlock+0x34>)
    865e:	4770      	bx	lr
    8660:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8664:	4770      	bx	lr
    8666:	bf00      	nop
    8668:	a95c5f2c 	.word	0xa95c5f2c
    866c:	ffff8fe9 	.word	0xffff8fe9
    8670:	ffff8fea 	.word	0xffff8fea

00008674 <mutex_init>:
    8674:	b510      	push	{r4, lr}
    8676:	4604      	mov	r4, r0
    8678:	b120      	cbz	r0, 8684 <mutex_init+0x10>
    867a:	4b04      	ldr	r3, [pc, #16]	; (868c <mutex_init+0x18>)
    867c:	6063      	str	r3, [r4, #4]
    867e:	2200      	movs	r2, #0
    8680:	6022      	str	r2, [r4, #0]
    8682:	bd10      	pop	{r4, pc}
    8684:	4802      	ldr	r0, [pc, #8]	; (8690 <mutex_init+0x1c>)
    8686:	f7ff ff79 	bl	857c <CC_PalAbort>
    868a:	e7f6      	b.n	867a <mutex_init+0x6>
    868c:	3a00003a 	.word	0x3a00003a
    8690:	0000a538 	.word	0x0000a538

00008694 <nrf_cc3xx_platform_set_mutexes>:
    8694:	b570      	push	{r4, r5, r6, lr}
    8696:	e9d0 2300 	ldrd	r2, r3, [r0]
    869a:	4c17      	ldr	r4, [pc, #92]	; (86f8 <nrf_cc3xx_platform_set_mutexes+0x64>)
    869c:	4d17      	ldr	r5, [pc, #92]	; (86fc <nrf_cc3xx_platform_set_mutexes+0x68>)
    869e:	6063      	str	r3, [r4, #4]
    86a0:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    86a4:	e9c4 3002 	strd	r3, r0, [r4, #8]
    86a8:	6022      	str	r2, [r4, #0]
    86aa:	6848      	ldr	r0, [r1, #4]
    86ac:	f8d1 c000 	ldr.w	ip, [r1]
    86b0:	4b13      	ldr	r3, [pc, #76]	; (8700 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    86b2:	e9c3 c000 	strd	ip, r0, [r3]
    86b6:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
    86ba:	f8d1 c008 	ldr.w	ip, [r1, #8]
    86be:	f8c3 c008 	str.w	ip, [r3, #8]
    86c2:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
    86c6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    86ca:	6909      	ldr	r1, [r1, #16]
    86cc:	f8c3 c00c 	str.w	ip, [r3, #12]
    86d0:	6119      	str	r1, [r3, #16]
    86d2:	d010      	beq.n	86f6 <nrf_cc3xx_platform_set_mutexes+0x62>
    86d4:	490b      	ldr	r1, [pc, #44]	; (8704 <nrf_cc3xx_platform_set_mutexes+0x70>)
    86d6:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    86da:	2300      	movs	r3, #0
    86dc:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    86e0:	f505 708a 	add.w	r0, r5, #276	; 0x114
    86e4:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    86e8:	4790      	blx	r2
    86ea:	6823      	ldr	r3, [r4, #0]
    86ec:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    86f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    86f4:	4718      	bx	r3
    86f6:	bd70      	pop	{r4, r5, r6, pc}
    86f8:	20000118 	.word	0x20000118
    86fc:	20001068 	.word	0x20001068
    8700:	20000104 	.word	0x20000104
    8704:	a95c5f2c 	.word	0xa95c5f2c

00008708 <CC_LibInitNoRng>:
    8708:	b538      	push	{r3, r4, r5, lr}
    870a:	f000 f82f 	bl	876c <CC_HalInit>
    870e:	b120      	cbz	r0, 871a <CC_LibInitNoRng+0x12>
    8710:	2403      	movs	r4, #3
    8712:	f000 f863 	bl	87dc <CC_PalTerminate>
    8716:	4620      	mov	r0, r4
    8718:	bd38      	pop	{r3, r4, r5, pc}
    871a:	f000 f831 	bl	8780 <CC_PalInit>
    871e:	b998      	cbnz	r0, 8748 <CC_LibInitNoRng+0x40>
    8720:	f000 f8ac 	bl	887c <CC_PalPowerSaveModeSelect>
    8724:	b998      	cbnz	r0, 874e <CC_LibInitNoRng+0x46>
    8726:	4d0f      	ldr	r5, [pc, #60]	; (8764 <CC_LibInitNoRng+0x5c>)
    8728:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    872c:	0e1b      	lsrs	r3, r3, #24
    872e:	2bf0      	cmp	r3, #240	; 0xf0
    8730:	d108      	bne.n	8744 <CC_LibInitNoRng+0x3c>
    8732:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    8736:	4b0c      	ldr	r3, [pc, #48]	; (8768 <CC_LibInitNoRng+0x60>)
    8738:	429a      	cmp	r2, r3
    873a:	d00a      	beq.n	8752 <CC_LibInitNoRng+0x4a>
    873c:	2407      	movs	r4, #7
    873e:	f000 f817 	bl	8770 <CC_HalTerminate>
    8742:	e7e6      	b.n	8712 <CC_LibInitNoRng+0xa>
    8744:	2406      	movs	r4, #6
    8746:	e7fa      	b.n	873e <CC_LibInitNoRng+0x36>
    8748:	2404      	movs	r4, #4
    874a:	4620      	mov	r0, r4
    874c:	bd38      	pop	{r3, r4, r5, pc}
    874e:	2400      	movs	r4, #0
    8750:	e7f5      	b.n	873e <CC_LibInitNoRng+0x36>
    8752:	2001      	movs	r0, #1
    8754:	f000 f892 	bl	887c <CC_PalPowerSaveModeSelect>
    8758:	4604      	mov	r4, r0
    875a:	2800      	cmp	r0, #0
    875c:	d1f7      	bne.n	874e <CC_LibInitNoRng+0x46>
    875e:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    8762:	e7d8      	b.n	8716 <CC_LibInitNoRng+0xe>
    8764:	5002b000 	.word	0x5002b000
    8768:	20e00000 	.word	0x20e00000

0000876c <CC_HalInit>:
    876c:	2000      	movs	r0, #0
    876e:	4770      	bx	lr

00008770 <CC_HalTerminate>:
    8770:	2000      	movs	r0, #0
    8772:	4770      	bx	lr

00008774 <CC_HalMaskInterrupt>:
    8774:	4b01      	ldr	r3, [pc, #4]	; (877c <CC_HalMaskInterrupt+0x8>)
    8776:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    877a:	4770      	bx	lr
    877c:	5002b000 	.word	0x5002b000

00008780 <CC_PalInit>:
    8780:	b510      	push	{r4, lr}
    8782:	4811      	ldr	r0, [pc, #68]	; (87c8 <CC_PalInit+0x48>)
    8784:	f000 f848 	bl	8818 <CC_PalMutexCreate>
    8788:	b100      	cbz	r0, 878c <CC_PalInit+0xc>
    878a:	bd10      	pop	{r4, pc}
    878c:	480f      	ldr	r0, [pc, #60]	; (87cc <CC_PalInit+0x4c>)
    878e:	f000 f843 	bl	8818 <CC_PalMutexCreate>
    8792:	2800      	cmp	r0, #0
    8794:	d1f9      	bne.n	878a <CC_PalInit+0xa>
    8796:	4c0e      	ldr	r4, [pc, #56]	; (87d0 <CC_PalInit+0x50>)
    8798:	4620      	mov	r0, r4
    879a:	f000 f83d 	bl	8818 <CC_PalMutexCreate>
    879e:	2800      	cmp	r0, #0
    87a0:	d1f3      	bne.n	878a <CC_PalInit+0xa>
    87a2:	4b0c      	ldr	r3, [pc, #48]	; (87d4 <CC_PalInit+0x54>)
    87a4:	480c      	ldr	r0, [pc, #48]	; (87d8 <CC_PalInit+0x58>)
    87a6:	601c      	str	r4, [r3, #0]
    87a8:	f000 f836 	bl	8818 <CC_PalMutexCreate>
    87ac:	4601      	mov	r1, r0
    87ae:	2800      	cmp	r0, #0
    87b0:	d1eb      	bne.n	878a <CC_PalInit+0xa>
    87b2:	f000 f82d 	bl	8810 <CC_PalDmaInit>
    87b6:	4604      	mov	r4, r0
    87b8:	b108      	cbz	r0, 87be <CC_PalInit+0x3e>
    87ba:	4620      	mov	r0, r4
    87bc:	bd10      	pop	{r4, pc}
    87be:	f000 f83f 	bl	8840 <CC_PalPowerSaveModeInit>
    87c2:	4620      	mov	r0, r4
    87c4:	e7fa      	b.n	87bc <CC_PalInit+0x3c>
    87c6:	bf00      	nop
    87c8:	20000158 	.word	0x20000158
    87cc:	20000154 	.word	0x20000154
    87d0:	20000150 	.word	0x20000150
    87d4:	20000148 	.word	0x20000148
    87d8:	2000014c 	.word	0x2000014c

000087dc <CC_PalTerminate>:
    87dc:	b508      	push	{r3, lr}
    87de:	4808      	ldr	r0, [pc, #32]	; (8800 <CC_PalTerminate+0x24>)
    87e0:	f000 f824 	bl	882c <CC_PalMutexDestroy>
    87e4:	4807      	ldr	r0, [pc, #28]	; (8804 <CC_PalTerminate+0x28>)
    87e6:	f000 f821 	bl	882c <CC_PalMutexDestroy>
    87ea:	4807      	ldr	r0, [pc, #28]	; (8808 <CC_PalTerminate+0x2c>)
    87ec:	f000 f81e 	bl	882c <CC_PalMutexDestroy>
    87f0:	4806      	ldr	r0, [pc, #24]	; (880c <CC_PalTerminate+0x30>)
    87f2:	f000 f81b 	bl	882c <CC_PalMutexDestroy>
    87f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    87fa:	f000 b80b 	b.w	8814 <CC_PalDmaTerminate>
    87fe:	bf00      	nop
    8800:	20000158 	.word	0x20000158
    8804:	20000154 	.word	0x20000154
    8808:	20000150 	.word	0x20000150
    880c:	2000014c 	.word	0x2000014c

00008810 <CC_PalDmaInit>:
    8810:	2000      	movs	r0, #0
    8812:	4770      	bx	lr

00008814 <CC_PalDmaTerminate>:
    8814:	4770      	bx	lr
    8816:	bf00      	nop

00008818 <CC_PalMutexCreate>:
    8818:	b508      	push	{r3, lr}
    881a:	4b03      	ldr	r3, [pc, #12]	; (8828 <CC_PalMutexCreate+0x10>)
    881c:	6802      	ldr	r2, [r0, #0]
    881e:	681b      	ldr	r3, [r3, #0]
    8820:	6810      	ldr	r0, [r2, #0]
    8822:	4798      	blx	r3
    8824:	2000      	movs	r0, #0
    8826:	bd08      	pop	{r3, pc}
    8828:	20000118 	.word	0x20000118

0000882c <CC_PalMutexDestroy>:
    882c:	b508      	push	{r3, lr}
    882e:	4b03      	ldr	r3, [pc, #12]	; (883c <CC_PalMutexDestroy+0x10>)
    8830:	6802      	ldr	r2, [r0, #0]
    8832:	685b      	ldr	r3, [r3, #4]
    8834:	6810      	ldr	r0, [r2, #0]
    8836:	4798      	blx	r3
    8838:	2000      	movs	r0, #0
    883a:	bd08      	pop	{r3, pc}
    883c:	20000118 	.word	0x20000118

00008840 <CC_PalPowerSaveModeInit>:
    8840:	b570      	push	{r4, r5, r6, lr}
    8842:	4c09      	ldr	r4, [pc, #36]	; (8868 <CC_PalPowerSaveModeInit+0x28>)
    8844:	4d09      	ldr	r5, [pc, #36]	; (886c <CC_PalPowerSaveModeInit+0x2c>)
    8846:	6920      	ldr	r0, [r4, #16]
    8848:	68ab      	ldr	r3, [r5, #8]
    884a:	4798      	blx	r3
    884c:	b118      	cbz	r0, 8856 <CC_PalPowerSaveModeInit+0x16>
    884e:	4b08      	ldr	r3, [pc, #32]	; (8870 <CC_PalPowerSaveModeInit+0x30>)
    8850:	4808      	ldr	r0, [pc, #32]	; (8874 <CC_PalPowerSaveModeInit+0x34>)
    8852:	685b      	ldr	r3, [r3, #4]
    8854:	4798      	blx	r3
    8856:	4a08      	ldr	r2, [pc, #32]	; (8878 <CC_PalPowerSaveModeInit+0x38>)
    8858:	68eb      	ldr	r3, [r5, #12]
    885a:	6920      	ldr	r0, [r4, #16]
    885c:	2100      	movs	r1, #0
    885e:	6011      	str	r1, [r2, #0]
    8860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8864:	4718      	bx	r3
    8866:	bf00      	nop
    8868:	20000104 	.word	0x20000104
    886c:	20000118 	.word	0x20000118
    8870:	200000fc 	.word	0x200000fc
    8874:	0000a55c 	.word	0x0000a55c
    8878:	20001064 	.word	0x20001064

0000887c <CC_PalPowerSaveModeSelect>:
    887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    887e:	4d1a      	ldr	r5, [pc, #104]	; (88e8 <CC_PalPowerSaveModeSelect+0x6c>)
    8880:	4e1a      	ldr	r6, [pc, #104]	; (88ec <CC_PalPowerSaveModeSelect+0x70>)
    8882:	4604      	mov	r4, r0
    8884:	68b2      	ldr	r2, [r6, #8]
    8886:	6928      	ldr	r0, [r5, #16]
    8888:	4790      	blx	r2
    888a:	b9e8      	cbnz	r0, 88c8 <CC_PalPowerSaveModeSelect+0x4c>
    888c:	4f18      	ldr	r7, [pc, #96]	; (88f0 <CC_PalPowerSaveModeSelect+0x74>)
    888e:	683b      	ldr	r3, [r7, #0]
    8890:	b14c      	cbz	r4, 88a6 <CC_PalPowerSaveModeSelect+0x2a>
    8892:	b1a3      	cbz	r3, 88be <CC_PalPowerSaveModeSelect+0x42>
    8894:	2b01      	cmp	r3, #1
    8896:	d019      	beq.n	88cc <CC_PalPowerSaveModeSelect+0x50>
    8898:	3b01      	subs	r3, #1
    889a:	603b      	str	r3, [r7, #0]
    889c:	6928      	ldr	r0, [r5, #16]
    889e:	68f3      	ldr	r3, [r6, #12]
    88a0:	4798      	blx	r3
    88a2:	2000      	movs	r0, #0
    88a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88a6:	b943      	cbnz	r3, 88ba <CC_PalPowerSaveModeSelect+0x3e>
    88a8:	4a12      	ldr	r2, [pc, #72]	; (88f4 <CC_PalPowerSaveModeSelect+0x78>)
    88aa:	2101      	movs	r1, #1
    88ac:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    88b0:	4911      	ldr	r1, [pc, #68]	; (88f8 <CC_PalPowerSaveModeSelect+0x7c>)
    88b2:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    88b6:	2a00      	cmp	r2, #0
    88b8:	d1fb      	bne.n	88b2 <CC_PalPowerSaveModeSelect+0x36>
    88ba:	3301      	adds	r3, #1
    88bc:	603b      	str	r3, [r7, #0]
    88be:	68f3      	ldr	r3, [r6, #12]
    88c0:	6928      	ldr	r0, [r5, #16]
    88c2:	4798      	blx	r3
    88c4:	2000      	movs	r0, #0
    88c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88c8:	480c      	ldr	r0, [pc, #48]	; (88fc <CC_PalPowerSaveModeSelect+0x80>)
    88ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88cc:	4a0a      	ldr	r2, [pc, #40]	; (88f8 <CC_PalPowerSaveModeSelect+0x7c>)
    88ce:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    88d2:	2b00      	cmp	r3, #0
    88d4:	d1fb      	bne.n	88ce <CC_PalPowerSaveModeSelect+0x52>
    88d6:	4a07      	ldr	r2, [pc, #28]	; (88f4 <CC_PalPowerSaveModeSelect+0x78>)
    88d8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    88dc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    88e0:	f7ff ff48 	bl	8774 <CC_HalMaskInterrupt>
    88e4:	683b      	ldr	r3, [r7, #0]
    88e6:	e7d7      	b.n	8898 <CC_PalPowerSaveModeSelect+0x1c>
    88e8:	20000104 	.word	0x20000104
    88ec:	20000118 	.word	0x20000118
    88f0:	20001064 	.word	0x20001064
    88f4:	5002a000 	.word	0x5002a000
    88f8:	5002b000 	.word	0x5002b000
    88fc:	ffff8fe9 	.word	0xffff8fe9

00008900 <sensor_channel_get.isra.0>:
	return api->channel_get(dev, chan, val);
    8900:	6883      	ldr	r3, [r0, #8]
    8902:	691b      	ldr	r3, [r3, #16]
    8904:	4718      	bx	r3

00008906 <cbpprintf_external>:
{
    8906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    890a:	4606      	mov	r6, r0
    890c:	460d      	mov	r5, r1
    890e:	4617      	mov	r7, r2
	if (buf == NULL) {
    8910:	4698      	mov	r8, r3
    8912:	b32b      	cbz	r3, 8960 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    8914:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    8918:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    891c:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    891e:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    8920:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    8924:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    8928:	441c      	add	r4, r3
    892a:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    892c:	f04f 0a00 	mov.w	sl, #0
    8930:	45ca      	cmp	sl, r9
    8932:	d309      	bcc.n	8948 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    8934:	f8d8 2004 	ldr.w	r2, [r8, #4]
    8938:	f108 0308 	add.w	r3, r8, #8
    893c:	4639      	mov	r1, r7
    893e:	4630      	mov	r0, r6
    8940:	46ac      	mov	ip, r5
}
    8942:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    8946:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    8948:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    894c:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    8950:	4620      	mov	r0, r4
    8952:	f000 fd28 	bl	93a6 <strlen>
    8956:	3001      	adds	r0, #1
    8958:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    895a:	f10a 0a01 	add.w	sl, sl, #1
    895e:	e7e7      	b.n	8930 <cbpprintf_external+0x2a>
}
    8960:	f06f 0015 	mvn.w	r0, #21
    8964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008968 <is_ptr>:
{
    8968:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    896a:	2500      	movs	r5, #0
{
    896c:	4602      	mov	r2, r0
	bool mod = false;
    896e:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    8970:	4614      	mov	r4, r2
    8972:	f814 3b01 	ldrb.w	r3, [r4], #1
    8976:	b90b      	cbnz	r3, 897c <is_ptr+0x14>
					return false;
    8978:	4618      	mov	r0, r3
    897a:	e009      	b.n	8990 <is_ptr+0x28>
		if (mod) {
    897c:	b198      	cbz	r0, 89a6 <is_ptr+0x3e>
			if (cnt == n) {
    897e:	428d      	cmp	r5, r1
    8980:	d107      	bne.n	8992 <is_ptr+0x2a>
				if (c == 'p') {
    8982:	2b70      	cmp	r3, #112	; 0x70
    8984:	d004      	beq.n	8990 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    8986:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    898a:	2a3a      	cmp	r2, #58	; 0x3a
    898c:	d80b      	bhi.n	89a6 <is_ptr+0x3e>
					return false;
    898e:	2000      	movs	r0, #0
}
    8990:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    8992:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    8996:	2e3a      	cmp	r6, #58	; 0x3a
    8998:	d805      	bhi.n	89a6 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    899a:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    899c:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    899e:	1c94      	adds	r4, r2, #2
    89a0:	2b00      	cmp	r3, #0
    89a2:	d0e9      	beq.n	8978 <is_ptr+0x10>
    89a4:	2000      	movs	r0, #0
		if (c == '%') {
    89a6:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    89a8:	bf08      	it	eq
    89aa:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    89ae:	4622      	mov	r2, r4
    89b0:	e7de      	b.n	8970 <is_ptr+0x8>

000089b2 <arch_printk_char_out>:
}
    89b2:	2000      	movs	r0, #0
    89b4:	4770      	bx	lr

000089b6 <str_out>:
{
    89b6:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    89b8:	688a      	ldr	r2, [r1, #8]
    89ba:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    89bc:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    89be:	b114      	cbz	r4, 89c6 <str_out+0x10>
    89c0:	684b      	ldr	r3, [r1, #4]
    89c2:	4293      	cmp	r3, r2
    89c4:	dc01      	bgt.n	89ca <str_out+0x14>
		ctx->count++;
    89c6:	608d      	str	r5, [r1, #8]
}
    89c8:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    89ca:	3b01      	subs	r3, #1
    89cc:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    89ce:	bf08      	it	eq
    89d0:	2200      	moveq	r2, #0
    89d2:	608d      	str	r5, [r1, #8]
    89d4:	bf0c      	ite	eq
    89d6:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    89d8:	54a0      	strbne	r0, [r4, r2]
    89da:	e7f5      	b.n	89c8 <str_out+0x12>

000089dc <printk>:
{
    89dc:	b40f      	push	{r0, r1, r2, r3}
    89de:	b507      	push	{r0, r1, r2, lr}
    89e0:	a904      	add	r1, sp, #16
    89e2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    89e6:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    89e8:	f000 fc1c 	bl	9224 <z_log_vprintk>
}
    89ec:	b003      	add	sp, #12
    89ee:	f85d eb04 	ldr.w	lr, [sp], #4
    89f2:	b004      	add	sp, #16
    89f4:	4770      	bx	lr

000089f6 <snprintk>:
{
    89f6:	b40c      	push	{r2, r3}
    89f8:	b507      	push	{r0, r1, r2, lr}
    89fa:	ab04      	add	r3, sp, #16
    89fc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    8a00:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    8a02:	f7f9 f80b 	bl	1a1c <vsnprintk>
}
    8a06:	b003      	add	sp, #12
    8a08:	f85d eb04 	ldr.w	lr, [sp], #4
    8a0c:	b002      	add	sp, #8
    8a0e:	4770      	bx	lr

00008a10 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8a10:	4604      	mov	r4, r0
    8a12:	b508      	push	{r3, lr}
    8a14:	4608      	mov	r0, r1
    8a16:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8a18:	461a      	mov	r2, r3
    8a1a:	47a0      	blx	r4
	return z_impl_z_current_get();
    8a1c:	f7ff fb14 	bl	8048 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8a20:	f7fb fd16 	bl	4450 <z_impl_k_thread_abort>

00008a24 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8a24:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    8a26:	f013 0307 	ands.w	r3, r3, #7
    8a2a:	d105      	bne.n	8a38 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8a2c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8a2e:	2b00      	cmp	r3, #0
    8a30:	bf0c      	ite	eq
    8a32:	2000      	moveq	r0, #0
    8a34:	2003      	movne	r0, #3
    8a36:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8a38:	2b02      	cmp	r3, #2
    8a3a:	d105      	bne.n	8a48 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8a3c:	8b40      	ldrh	r0, [r0, #26]
    8a3e:	fab0 f080 	clz	r0, r0
    8a42:	0940      	lsrs	r0, r0, #5
    8a44:	0080      	lsls	r0, r0, #2
    8a46:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8a48:	2b01      	cmp	r3, #1
    8a4a:	d105      	bne.n	8a58 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8a4c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8a4e:	2b00      	cmp	r3, #0
    8a50:	bf0c      	ite	eq
    8a52:	2000      	moveq	r0, #0
    8a54:	2005      	movne	r0, #5
    8a56:	4770      	bx	lr
	int evt = EVT_NOP;
    8a58:	2000      	movs	r0, #0
}
    8a5a:	4770      	bx	lr

00008a5c <validate_args>:
{
    8a5c:	b510      	push	{r4, lr}
    8a5e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8a60:	b100      	cbz	r0, 8a64 <validate_args+0x8>
    8a62:	b911      	cbnz	r1, 8a6a <validate_args+0xe>
		return -EINVAL;
    8a64:	f06f 0015 	mvn.w	r0, #21
}
    8a68:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    8a6a:	1d08      	adds	r0, r1, #4
    8a6c:	f000 f8ba 	bl	8be4 <sys_notify_validate>
	if ((rv == 0)
    8a70:	2800      	cmp	r0, #0
    8a72:	d1f9      	bne.n	8a68 <validate_args+0xc>
	    && ((cli->notify.flags
    8a74:	68a3      	ldr	r3, [r4, #8]
    8a76:	2b03      	cmp	r3, #3
    8a78:	d9f6      	bls.n	8a68 <validate_args+0xc>
    8a7a:	e7f3      	b.n	8a64 <validate_args+0x8>

00008a7c <notify_one>:
{
    8a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a80:	460d      	mov	r5, r1
    8a82:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8a84:	4619      	mov	r1, r3
    8a86:	1d28      	adds	r0, r5, #4
{
    8a88:	4690      	mov	r8, r2
    8a8a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8a8c:	f000 f8bb 	bl	8c06 <sys_notify_finalize>
	if (cb) {
    8a90:	4604      	mov	r4, r0
    8a92:	b138      	cbz	r0, 8aa4 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8a94:	4633      	mov	r3, r6
    8a96:	4642      	mov	r2, r8
    8a98:	4629      	mov	r1, r5
    8a9a:	4638      	mov	r0, r7
    8a9c:	46a4      	mov	ip, r4
}
    8a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8aa2:	4760      	bx	ip
}
    8aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008aa8 <transition_complete>:
{
    8aa8:	b410      	push	{r4}
	__asm__ volatile(
    8aaa:	f04f 0420 	mov.w	r4, #32
    8aae:	f3ef 8211 	mrs	r2, BASEPRI
    8ab2:	f384 8812 	msr	BASEPRI_MAX, r4
    8ab6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    8aba:	6141      	str	r1, [r0, #20]
}
    8abc:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    8abe:	2101      	movs	r1, #1
    8ac0:	f7f8 bfc2 	b.w	1a48 <process_event>

00008ac4 <onoff_manager_init>:
{
    8ac4:	b538      	push	{r3, r4, r5, lr}
    8ac6:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8ac8:	4605      	mov	r5, r0
    8aca:	b158      	cbz	r0, 8ae4 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8acc:	b151      	cbz	r1, 8ae4 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8ace:	680b      	ldr	r3, [r1, #0]
    8ad0:	b143      	cbz	r3, 8ae4 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8ad2:	684b      	ldr	r3, [r1, #4]
    8ad4:	b133      	cbz	r3, 8ae4 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8ad6:	221c      	movs	r2, #28
    8ad8:	2100      	movs	r1, #0
    8ada:	f000 fc7f 	bl	93dc <memset>
    8ade:	612c      	str	r4, [r5, #16]
	return 0;
    8ae0:	2000      	movs	r0, #0
}
    8ae2:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8ae4:	f06f 0015 	mvn.w	r0, #21
    8ae8:	e7fb      	b.n	8ae2 <onoff_manager_init+0x1e>

00008aea <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    8aea:	b570      	push	{r4, r5, r6, lr}
    8aec:	4605      	mov	r5, r0
    8aee:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    8af0:	f7ff ffb4 	bl	8a5c <validate_args>

	if (rv < 0) {
    8af4:	1e04      	subs	r4, r0, #0
    8af6:	db15      	blt.n	8b24 <onoff_request+0x3a>
    8af8:	f04f 0320 	mov.w	r3, #32
    8afc:	f3ef 8211 	mrs	r2, BASEPRI
    8b00:	f383 8812 	msr	BASEPRI_MAX, r3
    8b04:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    8b08:	8b6b      	ldrh	r3, [r5, #26]
    8b0a:	8b2c      	ldrh	r4, [r5, #24]
    8b0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    8b10:	428b      	cmp	r3, r1
    8b12:	f004 0407 	and.w	r4, r4, #7
    8b16:	d107      	bne.n	8b28 <onoff_request+0x3e>
	__asm__ volatile(
    8b18:	f382 8811 	msr	BASEPRI, r2
    8b1c:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    8b20:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    8b24:	4620      	mov	r0, r4
    8b26:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    8b28:	2c02      	cmp	r4, #2
    8b2a:	d10c      	bne.n	8b46 <onoff_request+0x5c>
		mgr->refs += 1U;
    8b2c:	3301      	adds	r3, #1
    8b2e:	836b      	strh	r3, [r5, #26]
    8b30:	f382 8811 	msr	BASEPRI, r2
    8b34:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    8b38:	2300      	movs	r3, #0
    8b3a:	4622      	mov	r2, r4
    8b3c:	4631      	mov	r1, r6
    8b3e:	4628      	mov	r0, r5
    8b40:	f7ff ff9c 	bl	8a7c <notify_one>
    8b44:	e7ee      	b.n	8b24 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    8b46:	2c06      	cmp	r4, #6
    8b48:	d814      	bhi.n	8b74 <onoff_request+0x8a>
    8b4a:	e8df f004 	tbb	[pc, r4]
    8b4e:	1304      	.short	0x1304
    8b50:	1a041313 	.word	0x1a041313
    8b54:	04          	.byte	0x04
    8b55:	00          	.byte	0x00
	parent->next = child;
    8b56:	2300      	movs	r3, #0
    8b58:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    8b5a:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    8b5c:	b93b      	cbnz	r3, 8b6e <onoff_request+0x84>
	list->head = node;
    8b5e:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    8b62:	b9ac      	cbnz	r4, 8b90 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    8b64:	2102      	movs	r1, #2
    8b66:	4628      	mov	r0, r5
    8b68:	f7f8 ff6e 	bl	1a48 <process_event>
    8b6c:	e7da      	b.n	8b24 <onoff_request+0x3a>
	parent->next = child;
    8b6e:	601e      	str	r6, [r3, #0]
	list->tail = node;
    8b70:	606e      	str	r6, [r5, #4]
}
    8b72:	e7f6      	b.n	8b62 <onoff_request+0x78>
    8b74:	f382 8811 	msr	BASEPRI, r2
    8b78:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    8b7c:	f06f 0404 	mvn.w	r4, #4
    8b80:	e7d0      	b.n	8b24 <onoff_request+0x3a>
    8b82:	f382 8811 	msr	BASEPRI, r2
    8b86:	f3bf 8f6f 	isb	sy
    8b8a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    8b8e:	e7c9      	b.n	8b24 <onoff_request+0x3a>
    8b90:	f382 8811 	msr	BASEPRI, r2
    8b94:	f3bf 8f6f 	isb	sy
		if (notify) {
    8b98:	e7c4      	b.n	8b24 <onoff_request+0x3a>

00008b9a <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    8b9a:	b510      	push	{r4, lr}
	__asm__ volatile(
    8b9c:	f04f 0320 	mov.w	r3, #32
    8ba0:	f3ef 8211 	mrs	r2, BASEPRI
    8ba4:	f383 8812 	msr	BASEPRI_MAX, r3
    8ba8:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8bac:	8b04      	ldrh	r4, [r0, #24]
    8bae:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    8bb2:	2c02      	cmp	r4, #2
    8bb4:	d00a      	beq.n	8bcc <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    8bb6:	2c01      	cmp	r4, #1
    8bb8:	bf0c      	ite	eq
    8bba:	f06f 0004 	mvneq.w	r0, #4
    8bbe:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    8bc2:	f382 8811 	msr	BASEPRI, r2
    8bc6:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    8bca:	e008      	b.n	8bde <onoff_release+0x44>
	mgr->refs -= 1U;
    8bcc:	8b43      	ldrh	r3, [r0, #26]
    8bce:	3b01      	subs	r3, #1
    8bd0:	b29b      	uxth	r3, r3
    8bd2:	8343      	strh	r3, [r0, #26]
	if (stop) {
    8bd4:	b923      	cbnz	r3, 8be0 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    8bd6:	4621      	mov	r1, r4
    8bd8:	f7f8 ff36 	bl	1a48 <process_event>
	int rv = state;
    8bdc:	4620      	mov	r0, r4
}
    8bde:	bd10      	pop	{r4, pc}
	int rv = state;
    8be0:	4620      	mov	r0, r4
    8be2:	e7ee      	b.n	8bc2 <onoff_release+0x28>

00008be4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    8be4:	4603      	mov	r3, r0
    8be6:	b158      	cbz	r0, 8c00 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8be8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8bea:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    8bee:	2a01      	cmp	r2, #1
    8bf0:	d003      	beq.n	8bfa <sys_notify_validate+0x16>
    8bf2:	2a03      	cmp	r2, #3
    8bf4:	d104      	bne.n	8c00 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    8bf6:	6802      	ldr	r2, [r0, #0]
    8bf8:	b112      	cbz	r2, 8c00 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    8bfa:	2000      	movs	r0, #0
    8bfc:	6098      	str	r0, [r3, #8]
    8bfe:	4770      	bx	lr
    8c00:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    8c04:	4770      	bx	lr

00008c06 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8c06:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    8c08:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    8c0a:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    8c0e:	2a03      	cmp	r2, #3
    8c10:	f04f 0200 	mov.w	r2, #0
{
    8c14:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    8c16:	bf0c      	ite	eq
    8c18:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    8c1a:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    8c1c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    8c1e:	4770      	bx	lr

00008c20 <_ldiv5>:
	uint32_t v_lo = *v;
    8c20:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    8c24:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    8c26:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    8c2a:	fba2 2403 	umull	r2, r4, r2, r3
    8c2e:	18d5      	adds	r5, r2, r3
    8c30:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    8c34:	fba1 1303 	umull	r1, r3, r1, r3
    8c38:	1852      	adds	r2, r2, r1
    8c3a:	eb44 0403 	adc.w	r4, r4, r3
    8c3e:	1952      	adds	r2, r2, r5
    8c40:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    8c44:	1889      	adds	r1, r1, r2
    8c46:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    8c4a:	e9c0 1300 	strd	r1, r3, [r0]
}
    8c4e:	bd30      	pop	{r4, r5, pc}

00008c50 <_get_digit>:
{
    8c50:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    8c52:	680a      	ldr	r2, [r1, #0]
    8c54:	2a00      	cmp	r2, #0
{
    8c56:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    8c58:	dd0f      	ble.n	8c7a <_get_digit+0x2a>
		--*digit_count;
    8c5a:	3a01      	subs	r2, #1
    8c5c:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    8c5e:	681a      	ldr	r2, [r3, #0]
    8c60:	6844      	ldr	r4, [r0, #4]
    8c62:	200a      	movs	r0, #10
    8c64:	fba2 1200 	umull	r1, r2, r2, r0
    8c68:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    8c6c:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    8c6e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    8c72:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    8c76:	3030      	adds	r0, #48	; 0x30
}
    8c78:	bd10      	pop	{r4, pc}
		rval = '0';
    8c7a:	2030      	movs	r0, #48	; 0x30
    8c7c:	e7fc      	b.n	8c78 <_get_digit+0x28>

00008c7e <encode_uint>:
{
    8c7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c82:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    8c84:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    8c86:	2b6f      	cmp	r3, #111	; 0x6f
{
    8c88:	4680      	mov	r8, r0
    8c8a:	460f      	mov	r7, r1
    8c8c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8c8e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    8c92:	d029      	beq.n	8ce8 <encode_uint+0x6a>
    8c94:	d824      	bhi.n	8ce0 <encode_uint+0x62>
		return 10;
    8c96:	2b58      	cmp	r3, #88	; 0x58
    8c98:	bf0c      	ite	eq
    8c9a:	2610      	moveq	r6, #16
    8c9c:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    8c9e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    8ca2:	4632      	mov	r2, r6
    8ca4:	2300      	movs	r3, #0
    8ca6:	4640      	mov	r0, r8
    8ca8:	4639      	mov	r1, r7
    8caa:	f7f8 f87b 	bl	da4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8cae:	2a09      	cmp	r2, #9
    8cb0:	b2d4      	uxtb	r4, r2
    8cb2:	d81e      	bhi.n	8cf2 <encode_uint+0x74>
    8cb4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8cb6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8cb8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    8cba:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8cbe:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    8cc2:	d301      	bcc.n	8cc8 <encode_uint+0x4a>
    8cc4:	45d1      	cmp	r9, sl
    8cc6:	d811      	bhi.n	8cec <encode_uint+0x6e>
	if (conv->flag_hash) {
    8cc8:	782b      	ldrb	r3, [r5, #0]
    8cca:	069b      	lsls	r3, r3, #26
    8ccc:	d505      	bpl.n	8cda <encode_uint+0x5c>
		if (radix == 8) {
    8cce:	2e08      	cmp	r6, #8
    8cd0:	d115      	bne.n	8cfe <encode_uint+0x80>
			conv->altform_0 = true;
    8cd2:	78ab      	ldrb	r3, [r5, #2]
    8cd4:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8cd8:	70ab      	strb	r3, [r5, #2]
}
    8cda:	4648      	mov	r0, r9
    8cdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8ce0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    8ce4:	2b70      	cmp	r3, #112	; 0x70
    8ce6:	e7d7      	b.n	8c98 <encode_uint+0x1a>
	switch (specifier) {
    8ce8:	2608      	movs	r6, #8
    8cea:	e7d8      	b.n	8c9e <encode_uint+0x20>
		value /= radix;
    8cec:	4680      	mov	r8, r0
    8cee:	460f      	mov	r7, r1
    8cf0:	e7d7      	b.n	8ca2 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8cf2:	f1bb 0f19 	cmp.w	fp, #25
    8cf6:	bf94      	ite	ls
    8cf8:	3437      	addls	r4, #55	; 0x37
    8cfa:	3457      	addhi	r4, #87	; 0x57
    8cfc:	e7db      	b.n	8cb6 <encode_uint+0x38>
		} else if (radix == 16) {
    8cfe:	2e10      	cmp	r6, #16
    8d00:	d1eb      	bne.n	8cda <encode_uint+0x5c>
			conv->altform_0c = true;
    8d02:	78ab      	ldrb	r3, [r5, #2]
    8d04:	f043 0310 	orr.w	r3, r3, #16
    8d08:	e7e6      	b.n	8cd8 <encode_uint+0x5a>

00008d0a <outs>:
{
    8d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d0e:	4607      	mov	r7, r0
    8d10:	4688      	mov	r8, r1
    8d12:	4615      	mov	r5, r2
    8d14:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8d16:	4614      	mov	r4, r2
    8d18:	42b4      	cmp	r4, r6
    8d1a:	d305      	bcc.n	8d28 <outs+0x1e>
    8d1c:	b10e      	cbz	r6, 8d22 <outs+0x18>
	return (int)count;
    8d1e:	1b60      	subs	r0, r4, r5
    8d20:	e008      	b.n	8d34 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8d22:	7823      	ldrb	r3, [r4, #0]
    8d24:	2b00      	cmp	r3, #0
    8d26:	d0fa      	beq.n	8d1e <outs+0x14>
		int rc = out((int)*sp++, ctx);
    8d28:	f814 0b01 	ldrb.w	r0, [r4], #1
    8d2c:	4641      	mov	r1, r8
    8d2e:	47b8      	blx	r7
		if (rc < 0) {
    8d30:	2800      	cmp	r0, #0
    8d32:	daf1      	bge.n	8d18 <outs+0xe>
}
    8d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008d38 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    8d38:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    8d3a:	6903      	ldr	r3, [r0, #16]
{
    8d3c:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    8d3e:	f013 0008 	ands.w	r0, r3, #8
    8d42:	d109      	bne.n	8d58 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    8d44:	6813      	ldr	r3, [r2, #0]
    8d46:	68d4      	ldr	r4, [r2, #12]
    8d48:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    8d4a:	bf97      	itett	ls
    8d4c:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    8d4e:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    8d50:	1ad3      	subls	r3, r2, r3

	return true;
    8d52:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    8d54:	600b      	str	r3, [r1, #0]
}
    8d56:	bd10      	pop	{r4, pc}
    8d58:	2300      	movs	r3, #0
		return false;
    8d5a:	4618      	mov	r0, r3
    8d5c:	e7fa      	b.n	8d54 <free_space+0x1c>

00008d5e <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    8d5e:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    8d60:	a901      	add	r1, sp, #4
{
    8d62:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    8d64:	f7ff ffe8 	bl	8d38 <free_space>
    8d68:	b120      	cbz	r0, 8d74 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    8d6a:	9b01      	ldr	r3, [sp, #4]
    8d6c:	68e2      	ldr	r2, [r4, #12]
    8d6e:	3b01      	subs	r3, #1
    8d70:	4413      	add	r3, r2
    8d72:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    8d74:	6a20      	ldr	r0, [r4, #32]
    8d76:	9b01      	ldr	r3, [sp, #4]
    8d78:	1ac0      	subs	r0, r0, r3
}
    8d7a:	3801      	subs	r0, #1
    8d7c:	b002      	add	sp, #8
    8d7e:	bd10      	pop	{r4, pc}

00008d80 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    8d80:	b510      	push	{r4, lr}
    8d82:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    8d84:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    8d86:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    8d88:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    8d8a:	07d2      	lsls	r2, r2, #31
    8d8c:	d502      	bpl.n	8d94 <idx_inc+0x14>
		return i & (buffer->size - 1);
    8d8e:	3b01      	subs	r3, #1
    8d90:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    8d92:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    8d94:	4298      	cmp	r0, r3
    8d96:	bf28      	it	cs
    8d98:	1ac0      	subcs	r0, r0, r3
    8d9a:	e7fa      	b.n	8d92 <idx_inc+0x12>

00008d9c <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    8d9c:	b510      	push	{r4, lr}
    8d9e:	4604      	mov	r4, r0
    8da0:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    8da2:	68c1      	ldr	r1, [r0, #12]
    8da4:	f7ff ffec 	bl	8d80 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    8da8:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    8daa:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    8dac:	f023 0308 	bic.w	r3, r3, #8
    8db0:	6123      	str	r3, [r4, #16]
}
    8db2:	bd10      	pop	{r4, pc}

00008db4 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    8db4:	b538      	push	{r3, r4, r5, lr}
    8db6:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    8db8:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    8dba:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    8dbc:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    8dbe:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    8dc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    8dc6:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    8dc8:	6801      	ldr	r1, [r0, #0]
    8dca:	462a      	mov	r2, r5
    8dcc:	f7ff ffd8 	bl	8d80 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    8dd0:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    8dd2:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    8dd4:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    8dd6:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    8dd8:	bf02      	ittt	eq
    8dda:	6923      	ldreq	r3, [r4, #16]
    8ddc:	f043 0308 	orreq.w	r3, r3, #8
    8de0:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    8de2:	462a      	mov	r2, r5
    8de4:	4620      	mov	r0, r4
    8de6:	f7ff ffcb 	bl	8d80 <idx_inc>
    8dea:	6060      	str	r0, [r4, #4]
}
    8dec:	bd38      	pop	{r3, r4, r5, pc}

00008dee <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    8dee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    8df2:	68c7      	ldr	r7, [r0, #12]
    8df4:	69c6      	ldr	r6, [r0, #28]
{
    8df6:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    8df8:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    8dfc:	f003 0303 	and.w	r3, r3, #3
    8e00:	2b02      	cmp	r3, #2
{
    8e02:	4604      	mov	r4, r0
    8e04:	4688      	mov	r8, r1
    8e06:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    8e08:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    8e0c:	f04f 0300 	mov.w	r3, #0
    8e10:	d009      	beq.n	8e26 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    8e12:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    8e14:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    8e18:	6923      	ldr	r3, [r4, #16]
    8e1a:	0799      	lsls	r1, r3, #30
    8e1c:	d410      	bmi.n	8e40 <drop_item_locked+0x52>
		return false;
    8e1e:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    8e20:	b003      	add	sp, #12
    8e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    8e26:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    8e2a:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    8e2c:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    8e2e:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    8e32:	d0f1      	beq.n	8e18 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    8e34:	f7ff ffb2 	bl	8d9c <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    8e38:	68e3      	ldr	r3, [r4, #12]
    8e3a:	60a3      	str	r3, [r4, #8]
		return true;
    8e3c:	2001      	movs	r0, #1
    8e3e:	e7ef      	b.n	8e20 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    8e40:	69a3      	ldr	r3, [r4, #24]
    8e42:	4650      	mov	r0, sl
    8e44:	4798      	blx	r3
	return item->hdr.valid;
    8e46:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    8e4a:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    8e4c:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    8e4e:	d5e6      	bpl.n	8e1e <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    8e50:	f013 0302 	ands.w	r3, r3, #2
    8e54:	d01d      	beq.n	8e92 <drop_item_locked+0xa4>
		if (free_wlen) {
    8e56:	f1b8 0f00 	cmp.w	r8, #0
    8e5a:	d003      	beq.n	8e64 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    8e5c:	4641      	mov	r1, r8
    8e5e:	4620      	mov	r0, r4
    8e60:	f7ff ffa8 	bl	8db4 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    8e64:	6861      	ldr	r1, [r4, #4]
    8e66:	462a      	mov	r2, r5
    8e68:	4620      	mov	r0, r4
    8e6a:	f7ff ff89 	bl	8d80 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    8e6e:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    8e72:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    8e74:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    8e76:	d104      	bne.n	8e82 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    8e78:	462a      	mov	r2, r5
    8e7a:	4620      	mov	r0, r4
    8e7c:	f7ff ff80 	bl	8d80 <idx_inc>
    8e80:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    8e82:	68a3      	ldr	r3, [r4, #8]
    8e84:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    8e86:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    8e88:	6923      	ldr	r3, [r4, #16]
    8e8a:	f043 0308 	orr.w	r3, r3, #8
    8e8e:	6123      	str	r3, [r4, #16]
    8e90:	e7d4      	b.n	8e3c <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    8e92:	4601      	mov	r1, r0
    8e94:	4620      	mov	r0, r4
    8e96:	9301      	str	r3, [sp, #4]
    8e98:	f7ff ff80 	bl	8d9c <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    8e9c:	68e2      	ldr	r2, [r4, #12]
    8e9e:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    8ea0:	f1b8 0f00 	cmp.w	r8, #0
    8ea4:	d004      	beq.n	8eb0 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    8ea6:	6821      	ldr	r1, [r4, #0]
    8ea8:	69e2      	ldr	r2, [r4, #28]
    8eaa:	9b01      	ldr	r3, [sp, #4]
    8eac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    8eb0:	eb05 0208 	add.w	r2, r5, r8
    8eb4:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    8eb8:	6821      	ldr	r1, [r4, #0]
    8eba:	4620      	mov	r0, r4
    8ebc:	f7ff ff60 	bl	8d80 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    8ec0:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    8ec2:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    8ec4:	f043 0308 	orr.w	r3, r3, #8
    8ec8:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    8eca:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    8ece:	f36f 0300 	bfc	r3, #0, #1
    8ed2:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    8ed6:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    8eda:	e7af      	b.n	8e3c <drop_item_locked+0x4e>

00008edc <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    8edc:	b570      	push	{r4, r5, r6, lr}
    8ede:	4604      	mov	r4, r0
    8ee0:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    8ee2:	f7ff ff4d 	bl	8d80 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    8ee6:	6823      	ldr	r3, [r4, #0]
    8ee8:	4283      	cmp	r3, r0
    8eea:	d105      	bne.n	8ef8 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    8eec:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    8eee:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    8ef0:	f023 0308 	bic.w	r3, r3, #8
    8ef4:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    8ef6:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    8ef8:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    8efa:	00ab      	lsls	r3, r5, #2
    8efc:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    8f00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    8f04:	4620      	mov	r0, r4
    8f06:	6861      	ldr	r1, [r4, #4]
    8f08:	462a      	mov	r2, r5
    8f0a:	f7ff ff39 	bl	8d80 <idx_inc>
    8f0e:	6060      	str	r0, [r4, #4]
    8f10:	e7f1      	b.n	8ef6 <post_drop_action+0x1a>

00008f12 <max_utilization_update>:
{
    8f12:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    8f14:	6903      	ldr	r3, [r0, #16]
    8f16:	075b      	lsls	r3, r3, #29
{
    8f18:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    8f1a:	d506      	bpl.n	8f2a <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    8f1c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8f1e:	f7ff ff1e 	bl	8d5e <get_usage>
    8f22:	4285      	cmp	r5, r0
    8f24:	bf2c      	ite	cs
    8f26:	6265      	strcs	r5, [r4, #36]	; 0x24
    8f28:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    8f2a:	bd38      	pop	{r3, r4, r5, pc}

00008f2c <mpsc_pbuf_init>:
{
    8f2c:	b538      	push	{r3, r4, r5, lr}
    8f2e:	460d      	mov	r5, r1
    8f30:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    8f32:	221c      	movs	r2, #28
    8f34:	2100      	movs	r1, #0
    8f36:	f000 fa51 	bl	93dc <memset>
	buffer->get_wlen = cfg->get_wlen;
    8f3a:	68eb      	ldr	r3, [r5, #12]
    8f3c:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    8f3e:	68ab      	ldr	r3, [r5, #8]
    8f40:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    8f42:	682b      	ldr	r3, [r5, #0]
    8f44:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    8f46:	686b      	ldr	r3, [r5, #4]
    8f48:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    8f4a:	2200      	movs	r2, #0
    8f4c:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    8f4e:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    8f50:	b123      	cbz	r3, 8f5c <mpsc_pbuf_init+0x30>
    8f52:	1e59      	subs	r1, r3, #1
    8f54:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    8f56:	bf08      	it	eq
    8f58:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    8f5c:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    8f5e:	2201      	movs	r2, #1
    8f60:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8f64:	2100      	movs	r1, #0
}
    8f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f6a:	f000 be34 	b.w	9bd6 <z_impl_k_sem_init>

00008f6e <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    8f6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f72:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    8f74:	2500      	movs	r5, #0
{
    8f76:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    8f78:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    8f7a:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    8f7c:	428b      	cmp	r3, r1
{
    8f7e:	4604      	mov	r4, r0
    8f80:	460e      	mov	r6, r1
    8f82:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    8f84:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    8f86:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    8f88:	d33a      	bcc.n	9000 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    8f8a:	f04f 0320 	mov.w	r3, #32
    8f8e:	f3ef 8b11 	mrs	fp, BASEPRI
    8f92:	f383 8812 	msr	BASEPRI_MAX, r3
    8f96:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    8f9a:	9a05      	ldr	r2, [sp, #20]
    8f9c:	46d8      	mov	r8, fp
    8f9e:	b12a      	cbz	r2, 8fac <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    8fa0:	4629      	mov	r1, r5
    8fa2:	4620      	mov	r0, r4
    8fa4:	f7ff ff9a 	bl	8edc <post_drop_action>
			tmp_wr_idx_shift = 0;
    8fa8:	2300      	movs	r3, #0
    8faa:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    8fac:	a904      	add	r1, sp, #16
    8fae:	4620      	mov	r0, r4
    8fb0:	f7ff fec2 	bl	8d38 <free_space>

		if (free_wlen >= wlen) {
    8fb4:	9904      	ldr	r1, [sp, #16]
    8fb6:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    8fb8:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    8fba:	d32a      	bcc.n	9012 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    8fbc:	6822      	ldr	r2, [r4, #0]
			item =
    8fbe:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    8fc0:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    8fc4:	f021 0103 	bic.w	r1, r1, #3
    8fc8:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    8fcc:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    8fd0:	6821      	ldr	r1, [r4, #0]
    8fd2:	4632      	mov	r2, r6
    8fd4:	4620      	mov	r0, r4
    8fd6:	f7ff fed3 	bl	8d80 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    8fda:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    8fdc:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    8fde:	4298      	cmp	r0, r3
    8fe0:	d012      	beq.n	9008 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    8fe2:	2700      	movs	r7, #0
	__asm__ volatile(
    8fe4:	f388 8811 	msr	BASEPRI, r8
    8fe8:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    8fec:	9903      	ldr	r1, [sp, #12]
    8fee:	b129      	cbz	r1, 8ffc <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    8ff0:	6962      	ldr	r2, [r4, #20]
    8ff2:	b10a      	cbz	r2, 8ff8 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    8ff4:	4620      	mov	r0, r4
    8ff6:	4790      	blx	r2
			}
			dropped_item = NULL;
    8ff8:	2300      	movs	r3, #0
    8ffa:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    8ffc:	2f00      	cmp	r7, #0
    8ffe:	d1c4      	bne.n	8f8a <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    9000:	4648      	mov	r0, r9
    9002:	b007      	add	sp, #28
    9004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    9008:	6923      	ldr	r3, [r4, #16]
    900a:	f043 0308 	orr.w	r3, r3, #8
    900e:	6123      	str	r3, [r4, #16]
    9010:	e7e7      	b.n	8fe2 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    9012:	b118      	cbz	r0, 901c <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    9014:	4620      	mov	r0, r4
    9016:	f7ff fecd 	bl	8db4 <add_skip_item>
			cont = true;
    901a:	e7e3      	b.n	8fe4 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    901c:	9b00      	ldr	r3, [sp, #0]
    901e:	ea5a 0303 	orrs.w	r3, sl, r3
    9022:	d01a      	beq.n	905a <mpsc_pbuf_alloc+0xec>
    9024:	9101      	str	r1, [sp, #4]
    9026:	f000 fdb8 	bl	9b9a <k_is_in_isr>
    902a:	9901      	ldr	r1, [sp, #4]
    902c:	b9a8      	cbnz	r0, 905a <mpsc_pbuf_alloc+0xec>
    902e:	f38b 8811 	msr	BASEPRI, fp
    9032:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    9036:	9b00      	ldr	r3, [sp, #0]
    9038:	4652      	mov	r2, sl
    903a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    903e:	f7fe fcff 	bl	7a40 <z_impl_k_sem_take>
	__asm__ volatile(
    9042:	f04f 0320 	mov.w	r3, #32
    9046:	f3ef 8811 	mrs	r8, BASEPRI
    904a:	f383 8812 	msr	BASEPRI_MAX, r3
    904e:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    9052:	fab0 f780 	clz	r7, r0
    9056:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    9058:	e7c4      	b.n	8fe4 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    905a:	ab05      	add	r3, sp, #20
    905c:	aa03      	add	r2, sp, #12
    905e:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    9060:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    9062:	f7ff fec4 	bl	8dee <drop_item_locked>
    9066:	4607      	mov	r7, r0
    9068:	e7bc      	b.n	8fe4 <mpsc_pbuf_alloc+0x76>

0000906a <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    906a:	b570      	push	{r4, r5, r6, lr}
    906c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    906e:	6983      	ldr	r3, [r0, #24]
    9070:	4608      	mov	r0, r1
{
    9072:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    9074:	4798      	blx	r3
    9076:	4602      	mov	r2, r0
    9078:	f04f 0320 	mov.w	r3, #32
    907c:	f3ef 8611 	mrs	r6, BASEPRI
    9080:	f383 8812 	msr	BASEPRI_MAX, r3
    9084:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    9088:	782b      	ldrb	r3, [r5, #0]
    908a:	f043 0301 	orr.w	r3, r3, #1
    908e:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9090:	6861      	ldr	r1, [r4, #4]
    9092:	4620      	mov	r0, r4
    9094:	f7ff fe74 	bl	8d80 <idx_inc>
    9098:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    909a:	4620      	mov	r0, r4
    909c:	f7ff ff39 	bl	8f12 <max_utilization_update>
	__asm__ volatile(
    90a0:	f386 8811 	msr	BASEPRI, r6
    90a4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    90a8:	bd70      	pop	{r4, r5, r6, pc}

000090aa <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    90aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    90ac:	4604      	mov	r4, r0
	__asm__ volatile(
    90ae:	f04f 0320 	mov.w	r3, #32
    90b2:	f3ef 8611 	mrs	r6, BASEPRI
    90b6:	f383 8812 	msr	BASEPRI_MAX, r3
    90ba:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    90be:	6923      	ldr	r3, [r4, #16]
    90c0:	f013 0f08 	tst.w	r3, #8
    90c4:	68a3      	ldr	r3, [r4, #8]
    90c6:	d102      	bne.n	90ce <mpsc_pbuf_claim+0x24>
    90c8:	6862      	ldr	r2, [r4, #4]
    90ca:	4293      	cmp	r3, r2
    90cc:	d900      	bls.n	90d0 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    90ce:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    90d0:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    90d2:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    90d4:	b92a      	cbnz	r2, 90e2 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    90d6:	f386 8811 	msr	BASEPRI, r6
    90da:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    90de:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    90e0:	e033      	b.n	914a <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    90e2:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    90e6:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    90ea:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    90ee:	d0f2      	beq.n	90d6 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    90f0:	2802      	cmp	r0, #2
    90f2:	d103      	bne.n	90fc <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    90f4:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    90f8:	08ad      	lsrs	r5, r5, #2
    90fa:	d105      	bne.n	9108 <mpsc_pbuf_claim+0x5e>
    90fc:	07d0      	lsls	r0, r2, #31
    90fe:	d412      	bmi.n	9126 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    9100:	69a3      	ldr	r3, [r4, #24]
    9102:	4638      	mov	r0, r7
    9104:	4798      	blx	r3
    9106:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    9108:	68a1      	ldr	r1, [r4, #8]
    910a:	462a      	mov	r2, r5
    910c:	4620      	mov	r0, r4
    910e:	f7ff fe37 	bl	8d80 <idx_inc>
				rd_idx_inc(buffer, inc);
    9112:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    9114:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    9116:	4620      	mov	r0, r4
    9118:	f7ff fe40 	bl	8d9c <rd_idx_inc>
    911c:	f386 8811 	msr	BASEPRI, r6
    9120:	f3bf 8f6f 	isb	sy
	} while (cont);
    9124:	e7c3      	b.n	90ae <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    9126:	f042 0202 	orr.w	r2, r2, #2
    912a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    912e:	4638      	mov	r0, r7
    9130:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    9132:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    9134:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    9136:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    9138:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    913a:	4620      	mov	r0, r4
    913c:	f7ff fe20 	bl	8d80 <idx_inc>
				buffer->tmp_rd_idx =
    9140:	60a0      	str	r0, [r4, #8]
    9142:	f386 8811 	msr	BASEPRI, r6
    9146:	f3bf 8f6f 	isb	sy
}
    914a:	4638      	mov	r0, r7
    914c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000914e <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    914e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9150:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    9152:	6983      	ldr	r3, [r0, #24]
    9154:	4608      	mov	r0, r1
{
    9156:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    9158:	4798      	blx	r3
    915a:	4606      	mov	r6, r0
	__asm__ volatile(
    915c:	f04f 0320 	mov.w	r3, #32
    9160:	f3ef 8711 	mrs	r7, BASEPRI
    9164:	f383 8812 	msr	BASEPRI_MAX, r3
    9168:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    916c:	782b      	ldrb	r3, [r5, #0]
    916e:	f36f 0300 	bfc	r3, #0, #1
    9172:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    9174:	6923      	ldr	r3, [r4, #16]
    9176:	079b      	lsls	r3, r3, #30
    9178:	d505      	bpl.n	9186 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    917a:	68e2      	ldr	r2, [r4, #12]
    917c:	69e3      	ldr	r3, [r4, #28]
    917e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    9182:	429d      	cmp	r5, r3
    9184:	d11a      	bne.n	91bc <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    9186:	782b      	ldrb	r3, [r5, #0]
    9188:	f36f 0341 	bfc	r3, #1, #1
    918c:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    918e:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    9192:	4299      	cmp	r1, r3
    9194:	d104      	bne.n	91a0 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    9196:	4632      	mov	r2, r6
    9198:	4620      	mov	r0, r4
    919a:	f7ff fdf1 	bl	8d80 <idx_inc>
    919e:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    91a0:	4631      	mov	r1, r6
    91a2:	4620      	mov	r0, r4
    91a4:	f7ff fdfa 	bl	8d9c <rd_idx_inc>
	__asm__ volatile(
    91a8:	f387 8811 	msr	BASEPRI, r7
    91ac:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    91b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    91b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    91b8:	f7fe bc20 	b.w	79fc <z_impl_k_sem_give>
		witem->skip.len = wlen;
    91bc:	682b      	ldr	r3, [r5, #0]
    91be:	f360 039f 	bfi	r3, r0, #2, #30
    91c2:	602b      	str	r3, [r5, #0]
    91c4:	e7f0      	b.n	91a8 <mpsc_pbuf_free+0x5a>

000091c6 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    91c6:	6902      	ldr	r2, [r0, #16]
    91c8:	6883      	ldr	r3, [r0, #8]
    91ca:	0712      	lsls	r2, r2, #28
    91cc:	d402      	bmi.n	91d4 <mpsc_pbuf_is_pending+0xe>
    91ce:	6842      	ldr	r2, [r0, #4]
    91d0:	429a      	cmp	r2, r3
    91d2:	d200      	bcs.n	91d6 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    91d4:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    91d6:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    91d8:	1e18      	subs	r0, r3, #0
    91da:	bf18      	it	ne
    91dc:	2001      	movne	r0, #1
    91de:	4770      	bx	lr

000091e0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_APP_LOG_LEVEL_DBG, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_APP_LOG_LEVEL, 4);

GEN_ABS_SYM_END
    91e0:	4770      	bx	lr

000091e2 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    91e2:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    91e4:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    91e6:	bf5f      	itttt	pl
    91e8:	6803      	ldrpl	r3, [r0, #0]
    91ea:	8842      	ldrhpl	r2, [r0, #2]
    91ec:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    91f0:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    91f4:	bf5d      	ittte	pl
    91f6:	3017      	addpl	r0, #23
    91f8:	f020 0007 	bicpl.w	r0, r0, #7
    91fc:	0880      	lsrpl	r0, r0, #2
	return 0;
    91fe:	2000      	movmi	r0, #0
}
    9200:	4770      	bx	lr

00009202 <dummy_timestamp>:
}
    9202:	2000      	movs	r0, #0
    9204:	4770      	bx	lr

00009206 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    9206:	f000 ba79 	b.w	96fc <sys_clock_cycle_get_32>

0000920a <atomic_inc>:
{
    920a:	4603      	mov	r3, r0
}
    920c:	f3bf 8f5b 	dmb	ish
    9210:	e853 0f00 	ldrex	r0, [r3]
    9214:	1c42      	adds	r2, r0, #1
    9216:	e843 2100 	strex	r1, r2, [r3]
    921a:	2900      	cmp	r1, #0
    921c:	d1f8      	bne.n	9210 <atomic_inc+0x6>
    921e:	f3bf 8f5b 	dmb	ish
    9222:	4770      	bx	lr

00009224 <z_log_vprintk>:
{
    9224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    9226:	2300      	movs	r3, #0
    9228:	e9cd 0102 	strd	r0, r1, [sp, #8]
    922c:	e9cd 3300 	strd	r3, r3, [sp]
    9230:	461a      	mov	r2, r3
    9232:	4619      	mov	r1, r3
    9234:	4618      	mov	r0, r3
    9236:	f7f9 feb5 	bl	2fa4 <z_impl_z_log_msg_runtime_vcreate>
}
    923a:	b005      	add	sp, #20
    923c:	f85d fb04 	ldr.w	pc, [sp], #4

00009240 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    9240:	2001      	movs	r0, #1
    9242:	f7f9 bc67 	b.w	2b14 <z_log_dropped>

00009246 <z_log_get_tag>:
}
    9246:	2000      	movs	r0, #0
    9248:	4770      	bx	lr

0000924a <z_cbprintf_cpy>:
{
    924a:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    924c:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    9250:	1b9b      	subs	r3, r3, r6
    9252:	428b      	cmp	r3, r1
{
    9254:	460c      	mov	r4, r1
    9256:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    9258:	d30a      	bcc.n	9270 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    925a:	6813      	ldr	r3, [r2, #0]
    925c:	460a      	mov	r2, r1
    925e:	4601      	mov	r1, r0
    9260:	1998      	adds	r0, r3, r6
    9262:	f000 f8b0 	bl	93c6 <memcpy>
	desc->off += len;
    9266:	68ab      	ldr	r3, [r5, #8]
    9268:	4423      	add	r3, r4
    926a:	60ab      	str	r3, [r5, #8]
	return len;
    926c:	4620      	mov	r0, r4
}
    926e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    9270:	f06f 001b 	mvn.w	r0, #27
    9274:	e7fb      	b.n	926e <z_cbprintf_cpy+0x24>

00009276 <z_log_msg_finalize>:
{
    9276:	b570      	push	{r4, r5, r6, lr}
    9278:	460e      	mov	r6, r1
    927a:	4615      	mov	r5, r2
    927c:	4619      	mov	r1, r3
	if (!msg) {
    927e:	4604      	mov	r4, r0
    9280:	b918      	cbnz	r0, 928a <z_log_msg_finalize+0x14>
}
    9282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    9286:	f7f9 bc45 	b.w	2b14 <z_log_dropped>
	if (data) {
    928a:	b133      	cbz	r3, 929a <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    928c:	f3c2 234a 	ubfx	r3, r2, #9, #11
    9290:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    9292:	0d12      	lsrs	r2, r2, #20
    9294:	4418      	add	r0, r3
    9296:	f000 f896 	bl	93c6 <memcpy>
	msg->hdr.source = source;
    929a:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    929e:	4620      	mov	r0, r4
}
    92a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    92a4:	f7f9 bdc6 	b.w	2e34 <z_log_msg_commit>

000092a8 <buffer_write>:
{
    92a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92aa:	4606      	mov	r6, r0
    92ac:	460d      	mov	r5, r1
    92ae:	4614      	mov	r4, r2
    92b0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    92b2:	4621      	mov	r1, r4
    92b4:	4628      	mov	r0, r5
    92b6:	463a      	mov	r2, r7
    92b8:	47b0      	blx	r6
	} while (len != 0);
    92ba:	1a24      	subs	r4, r4, r0
		buf += processed;
    92bc:	4405      	add	r5, r0
	} while (len != 0);
    92be:	d1f8      	bne.n	92b2 <buffer_write+0xa>
}
    92c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000092c2 <cbvprintf>:
{
    92c2:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    92c4:	2400      	movs	r4, #0
    92c6:	9400      	str	r4, [sp, #0]
    92c8:	f7f8 fccc 	bl	1c64 <z_cbvprintf_impl>
}
    92cc:	b002      	add	sp, #8
    92ce:	bd10      	pop	{r4, pc}

000092d0 <log_output_flush>:
{
    92d0:	b510      	push	{r4, lr}
		     output->control_block->offset,
    92d2:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    92d4:	6881      	ldr	r1, [r0, #8]
{
    92d6:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    92d8:	e9d2 2300 	ldrd	r2, r3, [r2]
    92dc:	6800      	ldr	r0, [r0, #0]
    92de:	f7ff ffe3 	bl	92a8 <buffer_write>
	output->control_block->offset = 0;
    92e2:	6863      	ldr	r3, [r4, #4]
    92e4:	2200      	movs	r2, #0
    92e6:	601a      	str	r2, [r3, #0]
}
    92e8:	bd10      	pop	{r4, pc}

000092ea <out_func>:
{
    92ea:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    92ec:	684b      	ldr	r3, [r1, #4]
    92ee:	681a      	ldr	r2, [r3, #0]
    92f0:	68cb      	ldr	r3, [r1, #12]
    92f2:	429a      	cmp	r2, r3
{
    92f4:	4605      	mov	r5, r0
    92f6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    92f8:	d102      	bne.n	9300 <out_func+0x16>
		log_output_flush(out_ctx);
    92fa:	4608      	mov	r0, r1
    92fc:	f7ff ffe8 	bl	92d0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9300:	6863      	ldr	r3, [r4, #4]
    9302:	f3bf 8f5b 	dmb	ish
    9306:	e853 2f00 	ldrex	r2, [r3]
    930a:	1c51      	adds	r1, r2, #1
    930c:	e843 1000 	strex	r0, r1, [r3]
    9310:	2800      	cmp	r0, #0
    9312:	d1f8      	bne.n	9306 <out_func+0x1c>
    9314:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    9318:	68a3      	ldr	r3, [r4, #8]
    931a:	549d      	strb	r5, [r3, r2]
}
    931c:	2000      	movs	r0, #0
    931e:	bd38      	pop	{r3, r4, r5, pc}

00009320 <cr_out_func>:
	if (c == '\n') {
    9320:	280a      	cmp	r0, #10
{
    9322:	b538      	push	{r3, r4, r5, lr}
    9324:	4604      	mov	r4, r0
    9326:	460d      	mov	r5, r1
	if (c == '\n') {
    9328:	d102      	bne.n	9330 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    932a:	200d      	movs	r0, #13
    932c:	f7ff ffdd 	bl	92ea <out_func>
	out_func(c, ctx);
    9330:	4629      	mov	r1, r5
    9332:	4620      	mov	r0, r4
    9334:	f7ff ffd9 	bl	92ea <out_func>
}
    9338:	2000      	movs	r0, #0
    933a:	bd38      	pop	{r3, r4, r5, pc}

0000933c <log_backend_uart_init>:
}
    933c:	4770      	bx	lr

0000933e <abort_function>:
{
    933e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9340:	2000      	movs	r0, #0
    9342:	f7f9 fafb 	bl	293c <sys_reboot>

00009346 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    9346:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    9348:	6800      	ldr	r0, [r0, #0]
    934a:	f7fa bb5d 	b.w	3a08 <z_arm_fatal_error>

0000934e <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    934e:	2100      	movs	r1, #0
    9350:	2001      	movs	r0, #1
    9352:	f7fa bb59 	b.w	3a08 <z_arm_fatal_error>

00009356 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    9356:	b508      	push	{r3, lr}
	handler();
    9358:	f7fa fc04 	bl	3b64 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    935c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    9360:	f7fa bce2 	b.w	3d28 <z_arm_exc_exit>

00009364 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    9364:	2300      	movs	r3, #0
    9366:	f7f9 bd99 	b.w	2e9c <z_impl_z_log_msg_static_create>

0000936a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    936a:	3901      	subs	r1, #1
    936c:	4603      	mov	r3, r0
    936e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    9372:	b90a      	cbnz	r2, 9378 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    9374:	701a      	strb	r2, [r3, #0]

	return dest;
}
    9376:	4770      	bx	lr
		*d = *s;
    9378:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    937c:	e7f7      	b.n	936e <strcpy+0x4>

0000937e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
    937e:	b510      	push	{r4, lr}
    9380:	3901      	subs	r1, #1
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    9382:	4603      	mov	r3, r0
    9384:	b922      	cbnz	r2, 9390 <strncpy+0x12>
    9386:	441a      	add	r2, r3
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    9388:	2100      	movs	r1, #0
	while (n > 0) {
    938a:	4293      	cmp	r3, r2
    938c:	d108      	bne.n	93a0 <strncpy+0x22>
		d++;
		n--;
	}

	return dest;
}
    938e:	bd10      	pop	{r4, pc}
	while ((n > 0) && *s != '\0') {
    9390:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    9394:	2c00      	cmp	r4, #0
    9396:	d0f6      	beq.n	9386 <strncpy+0x8>
		*d = *s;
    9398:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    939c:	3a01      	subs	r2, #1
    939e:	e7f1      	b.n	9384 <strncpy+0x6>
		*d = '\0';
    93a0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    93a4:	e7f1      	b.n	938a <strncpy+0xc>

000093a6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    93a6:	4603      	mov	r3, r0
	size_t n = 0;
    93a8:	2000      	movs	r0, #0

	while (*s != '\0') {
    93aa:	5c1a      	ldrb	r2, [r3, r0]
    93ac:	b902      	cbnz	r2, 93b0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    93ae:	4770      	bx	lr
		n++;
    93b0:	3001      	adds	r0, #1
    93b2:	e7fa      	b.n	93aa <strlen+0x4>

000093b4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    93b4:	4603      	mov	r3, r0
	size_t n = 0;
    93b6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    93b8:	5c1a      	ldrb	r2, [r3, r0]
    93ba:	b10a      	cbz	r2, 93c0 <strnlen+0xc>
    93bc:	4288      	cmp	r0, r1
    93be:	d100      	bne.n	93c2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    93c0:	4770      	bx	lr
		n++;
    93c2:	3001      	adds	r0, #1
    93c4:	e7f8      	b.n	93b8 <strnlen+0x4>

000093c6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    93c6:	b510      	push	{r4, lr}
    93c8:	1e43      	subs	r3, r0, #1
    93ca:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    93cc:	4291      	cmp	r1, r2
    93ce:	d100      	bne.n	93d2 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    93d0:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    93d2:	f811 4b01 	ldrb.w	r4, [r1], #1
    93d6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    93da:	e7f7      	b.n	93cc <memcpy+0x6>

000093dc <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    93dc:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    93de:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    93e0:	4603      	mov	r3, r0
	while (n > 0) {
    93e2:	4293      	cmp	r3, r2
    93e4:	d100      	bne.n	93e8 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    93e6:	4770      	bx	lr
		*(d_byte++) = c_byte;
    93e8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    93ec:	e7f9      	b.n	93e2 <memset+0x6>

000093ee <_stdout_hook_default>:
}
    93ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    93f2:	4770      	bx	lr

000093f4 <fputc>:
		union { uintptr_t x; FILE * val; } parm1 = { .val = stream };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    93f4:	f7fb b934 	b.w	4660 <z_impl_zephyr_fputc>

000093f8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    93f8:	2806      	cmp	r0, #6
    93fa:	d108      	bne.n	940e <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    93fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9400:	2201      	movs	r2, #1
    9402:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9406:	f3bf 8f4f 	dsb	sy
        __WFE();
    940a:	bf20      	wfe
    while (true)
    940c:	e7fd      	b.n	940a <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    940e:	4770      	bx	lr

00009410 <pm_state_exit_post_ops>:
    9410:	2300      	movs	r3, #0
    9412:	f383 8811 	msr	BASEPRI, r3
    9416:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    941a:	4770      	bx	lr

0000941c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    941c:	6903      	ldr	r3, [r0, #16]
    941e:	b2c9      	uxtb	r1, r1
    9420:	220c      	movs	r2, #12
    9422:	fb01 3302 	mla	r3, r1, r2, r3
    9426:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    9428:	f000 0007 	and.w	r0, r0, #7
    942c:	4770      	bx	lr

0000942e <set_on_state>:
	__asm__ volatile(
    942e:	f04f 0320 	mov.w	r3, #32
    9432:	f3ef 8211 	mrs	r2, BASEPRI
    9436:	f383 8812 	msr	BASEPRI_MAX, r3
    943a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    943e:	6803      	ldr	r3, [r0, #0]
    9440:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9444:	f043 0302 	orr.w	r3, r3, #2
    9448:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    944a:	f382 8811 	msr	BASEPRI, r2
    944e:	f3bf 8f6f 	isb	sy
}
    9452:	4770      	bx	lr

00009454 <stop>:
{
    9454:	b570      	push	{r4, r5, r6, lr}
    9456:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    9458:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    945a:	f04f 0420 	mov.w	r4, #32
    945e:	f3ef 8511 	mrs	r5, BASEPRI
    9462:	f384 8812 	msr	BASEPRI_MAX, r4
    9466:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    946a:	260c      	movs	r6, #12
    946c:	fb06 3401 	mla	r4, r6, r1, r3
    9470:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    9472:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    9476:	d008      	beq.n	948a <stop+0x36>
    9478:	42a2      	cmp	r2, r4
    947a:	d006      	beq.n	948a <stop+0x36>
	__asm__ volatile(
    947c:	f385 8811 	msr	BASEPRI, r5
    9480:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    9484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9488:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    948a:	4371      	muls	r1, r6
    948c:	440b      	add	r3, r1
    948e:	2201      	movs	r2, #1
    9490:	641a      	str	r2, [r3, #64]	; 0x40
    9492:	f385 8811 	msr	BASEPRI, r5
    9496:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    949a:	6843      	ldr	r3, [r0, #4]
    949c:	440b      	add	r3, r1
    949e:	685b      	ldr	r3, [r3, #4]
    94a0:	4798      	blx	r3
	return 0;
    94a2:	2000      	movs	r0, #0
    94a4:	e7f0      	b.n	9488 <stop+0x34>

000094a6 <api_stop>:
	return stop(dev, subsys, CTX_API);
    94a6:	2280      	movs	r2, #128	; 0x80
    94a8:	f7ff bfd4 	b.w	9454 <stop>

000094ac <async_start>:
{
    94ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    94ae:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    94b0:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    94b2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    94b4:	f04f 0520 	mov.w	r5, #32
    94b8:	f3ef 8611 	mrs	r6, BASEPRI
    94bc:	f385 8812 	msr	BASEPRI_MAX, r5
    94c0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    94c4:	250c      	movs	r5, #12
    94c6:	4369      	muls	r1, r5
    94c8:	440c      	add	r4, r1
    94ca:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    94cc:	f005 0c07 	and.w	ip, r5, #7
    94d0:	f1bc 0f01 	cmp.w	ip, #1
    94d4:	d10b      	bne.n	94ee <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    94d6:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    94d8:	f386 8811 	msr	BASEPRI, r6
    94dc:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    94e0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    94e4:	6843      	ldr	r3, [r0, #4]
    94e6:	585b      	ldr	r3, [r3, r1]
    94e8:	4798      	blx	r3
	return 0;
    94ea:	2000      	movs	r0, #0
}
    94ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    94ee:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    94f2:	42af      	cmp	r7, r5
    94f4:	f386 8811 	msr	BASEPRI, r6
    94f8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    94fc:	bf0c      	ite	eq
    94fe:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    9502:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9506:	e7f1      	b.n	94ec <async_start+0x40>

00009508 <api_start>:
{
    9508:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    950a:	2480      	movs	r4, #128	; 0x80
    950c:	9400      	str	r4, [sp, #0]
    950e:	f7ff ffcd 	bl	94ac <async_start>
}
    9512:	b002      	add	sp, #8
    9514:	bd10      	pop	{r4, pc}

00009516 <onoff_started_callback>:
{
    9516:	b410      	push	{r4}
	return &data->mgr[type];
    9518:	6900      	ldr	r0, [r0, #16]
    951a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    951c:	241c      	movs	r4, #28
    951e:	fb03 0004 	mla	r0, r3, r4, r0
    9522:	2100      	movs	r1, #0
}
    9524:	bc10      	pop	{r4}
	notify(mgr, 0);
    9526:	4710      	bx	r2

00009528 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9528:	2000      	movs	r0, #0
    952a:	f000 b996 	b.w	985a <nrfx_clock_start>

0000952e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    952e:	2000      	movs	r0, #0
    9530:	f000 b9cf 	b.w	98d2 <nrfx_clock_stop>

00009534 <blocking_start_callback>:
{
    9534:	4610      	mov	r0, r2
    9536:	f7fe ba61 	b.w	79fc <z_impl_k_sem_give>

0000953a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    953a:	6843      	ldr	r3, [r0, #4]
    953c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    953e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9542:	600b      	str	r3, [r1, #0]
}
    9544:	2000      	movs	r0, #0
    9546:	4770      	bx	lr

00009548 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9548:	6843      	ldr	r3, [r0, #4]
    954a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    954c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    9550:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    9554:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    9558:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    955c:	2000      	movs	r0, #0
    955e:	4770      	bx	lr

00009560 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9560:	6843      	ldr	r3, [r0, #4]
    9562:	685b      	ldr	r3, [r3, #4]
}
    9564:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    9566:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    956a:	4770      	bx	lr

0000956c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    956c:	6843      	ldr	r3, [r0, #4]
    956e:	685b      	ldr	r3, [r3, #4]
}
    9570:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    9572:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    9576:	4770      	bx	lr

00009578 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9578:	6843      	ldr	r3, [r0, #4]
    957a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    957c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    9580:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    9584:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    9586:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    958a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    958e:	2000      	movs	r0, #0
    9590:	4770      	bx	lr

00009592 <gpio_nrfx_manage_callback>:
{
    9592:	b510      	push	{r4, lr}
	return port->data;
    9594:	6903      	ldr	r3, [r0, #16]
	return list->head;
    9596:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    9598:	b1f8      	cbz	r0, 95da <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    959a:	4288      	cmp	r0, r1
    959c:	d119      	bne.n	95d2 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    959e:	689c      	ldr	r4, [r3, #8]
	return node->next;
    95a0:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    95a2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    95a4:	42a1      	cmp	r1, r4
    95a6:	d100      	bne.n	95aa <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    95a8:	6098      	str	r0, [r3, #8]
	parent->next = child;
    95aa:	2000      	movs	r0, #0
    95ac:	6008      	str	r0, [r1, #0]
	if (set) {
    95ae:	b12a      	cbz	r2, 95bc <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    95b0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    95b2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    95b4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    95b6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    95b8:	b902      	cbnz	r2, 95bc <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    95ba:	6099      	str	r1, [r3, #8]
	return 0;
    95bc:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    95be:	e010      	b.n	95e2 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    95c0:	4281      	cmp	r1, r0
    95c2:	d106      	bne.n	95d2 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    95c4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    95c6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    95c8:	6898      	ldr	r0, [r3, #8]
    95ca:	4281      	cmp	r1, r0
    95cc:	d1ed      	bne.n	95aa <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    95ce:	609c      	str	r4, [r3, #8]
}
    95d0:	e7eb      	b.n	95aa <gpio_nrfx_manage_callback+0x18>
	return node->next;
    95d2:	4604      	mov	r4, r0
    95d4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    95d6:	2800      	cmp	r0, #0
    95d8:	d1f2      	bne.n	95c0 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    95da:	2a00      	cmp	r2, #0
    95dc:	d1e8      	bne.n	95b0 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    95de:	f06f 0015 	mvn.w	r0, #21
}
    95e2:	bd10      	pop	{r4, pc}

000095e4 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    95e4:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    95e6:	6843      	ldr	r3, [r0, #4]
    95e8:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    95ea:	7a05      	ldrb	r5, [r0, #8]
    95ec:	6844      	ldr	r4, [r0, #4]
    95ee:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    95f2:	42a3      	cmp	r3, r4
    95f4:	d302      	bcc.n	95fc <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    95f6:	f06f 0001 	mvn.w	r0, #1
}
    95fa:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    95fc:	795c      	ldrb	r4, [r3, #5]
    95fe:	428c      	cmp	r4, r1
    9600:	d001      	beq.n	9606 <pinctrl_lookup_state+0x22>
		(*state)++;
    9602:	3308      	adds	r3, #8
    9604:	e7f0      	b.n	95e8 <pinctrl_lookup_state+0x4>
			return 0;
    9606:	2000      	movs	r0, #0
    9608:	e7f7      	b.n	95fa <pinctrl_lookup_state+0x16>

0000960a <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    960a:	6902      	ldr	r2, [r0, #16]
{
    960c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    960e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    9612:	e883 0003 	stmia.w	r3, {r0, r1}
}
    9616:	2000      	movs	r0, #0
    9618:	4770      	bx	lr

0000961a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    961a:	6843      	ldr	r3, [r0, #4]
    961c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    961e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    9622:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    9626:	4770      	bx	lr

00009628 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    9628:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    962a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    962c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    962e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9632:	b150      	cbz	r0, 964a <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    9634:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9636:	2000      	movs	r0, #0
    9638:	7812      	ldrb	r2, [r2, #0]
    963a:	700a      	strb	r2, [r1, #0]
    963c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9640:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9644:	2201      	movs	r2, #1
    9646:	601a      	str	r2, [r3, #0]
	return 0;
    9648:	4770      	bx	lr
		return -1;
    964a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    964e:	4770      	bx	lr

00009650 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    9650:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    9652:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9654:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9658:	b940      	cbnz	r0, 966c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    965a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    965c:	079b      	lsls	r3, r3, #30
    965e:	d406      	bmi.n	966e <is_tx_ready.isra.0+0x1e>
    9660:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    9664:	3800      	subs	r0, #0
    9666:	bf18      	it	ne
    9668:	2001      	movne	r0, #1
    966a:	4770      	bx	lr
    966c:	2001      	movs	r0, #1
}
    966e:	4770      	bx	lr

00009670 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    9670:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    9672:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    9674:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9678:	05c9      	lsls	r1, r1, #23
    967a:	d518      	bpl.n	96ae <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    967c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9680:	b1a9      	cbz	r1, 96ae <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    9682:	f04f 0020 	mov.w	r0, #32
    9686:	f3ef 8111 	mrs	r1, BASEPRI
    968a:	f380 8812 	msr	BASEPRI_MAX, r0
    968e:	f3bf 8f6f 	isb	sy
    9692:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9696:	b130      	cbz	r0, 96a6 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9698:	2000      	movs	r0, #0
    969a:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    969e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    96a2:	2001      	movs	r0, #1
    96a4:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    96a6:	f381 8811 	msr	BASEPRI, r1
    96aa:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    96ae:	6852      	ldr	r2, [r2, #4]
    96b0:	06d2      	lsls	r2, r2, #27
    96b2:	d515      	bpl.n	96e0 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    96b4:	f04f 0120 	mov.w	r1, #32
    96b8:	f3ef 8211 	mrs	r2, BASEPRI
    96bc:	f381 8812 	msr	BASEPRI_MAX, r1
    96c0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    96c4:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    96c8:	b111      	cbz	r1, 96d0 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    96ca:	2100      	movs	r1, #0
    96cc:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    96d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    96d4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    96d8:	f382 8811 	msr	BASEPRI, r2
    96dc:	f3bf 8f6f 	isb	sy
}
    96e0:	4770      	bx	lr

000096e2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    96e2:	4770      	bx	lr

000096e4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    96e4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    96e8:	009b      	lsls	r3, r3, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    96ea:	b29b      	uxth	r3, r3
    96ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    96f0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    96f4:	2200      	movs	r2, #0
    96f6:	601a      	str	r2, [r3, #0]
    96f8:	681b      	ldr	r3, [r3, #0]
}
    96fa:	4770      	bx	lr

000096fc <sys_clock_cycle_get_32>:
{
    96fc:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    96fe:	f7fb ffa9 	bl	5654 <z_nrf_rtc_timer_read>
}
    9702:	bd08      	pop	{r3, pc}

00009704 <ms8607pt_channel_get>:
}
    9704:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9708:	4770      	bx	lr

0000970a <ms8607pt_attr_set>:
	if (attr == SENSOR_ATTR_FULL_SCALE && chan == SENSOR_CHAN_PRESS) {
    970a:	2a07      	cmp	r2, #7
	struct ms8607pt_data *data = dev->data;
    970c:	6900      	ldr	r0, [r0, #16]
	if (attr == SENSOR_ATTR_FULL_SCALE && chan == SENSOR_CHAN_PRESS) {
    970e:	d105      	bne.n	971c <ms8607pt_attr_set+0x12>
    9710:	290e      	cmp	r1, #14
    9712:	d103      	bne.n	971c <ms8607pt_attr_set+0x12>
		data->resolution = (enum ms8607_pressure_resolution)val->val1;
    9714:	681b      	ldr	r3, [r3, #0]
    9716:	7583      	strb	r3, [r0, #22]
		return 0;
    9718:	2000      	movs	r0, #0
    971a:	4770      	bx	lr
	return -EINVAL;
    971c:	f06f 0015 	mvn.w	r0, #21
}
    9720:	4770      	bx	lr

00009722 <z_log_msg_static_create.constprop.0>:
    9722:	2300      	movs	r3, #0
    9724:	f7f9 bbba 	b.w	2e9c <z_impl_z_log_msg_static_create>

00009728 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    9728:	4601      	mov	r1, r0
    972a:	f240 30e7 	movw	r0, #999	; 0x3e7
    972e:	b508      	push	{r3, lr}
    9730:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9734:	2300      	movs	r3, #0
    9736:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    973a:	1449      	asrs	r1, r1, #17
    973c:	f7f7 fb32 	bl	da4 <__aeabi_uldivmod>
}
    9740:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    9744:	f7fe bc66 	b.w	8014 <z_impl_k_sleep>

00009748 <write_command.isra.0>:
static int write_command(const struct device *dev, uint8_t command)
    9748:	b530      	push	{r4, r5, lr}
    974a:	4603      	mov	r3, r0
    974c:	b085      	sub	sp, #20
	msg.len = num_bytes;
    974e:	2501      	movs	r5, #1
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    9750:	2202      	movs	r2, #2
	return i2c_write(spec->bus, buf, num_bytes, spec->addr);
    9752:	6800      	ldr	r0, [r0, #0]
    9754:	889b      	ldrh	r3, [r3, #4]
	uint8_t tx_buf[1] = {command};
    9756:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
    975a:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    975e:	9502      	str	r5, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    9760:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    9764:	6882      	ldr	r2, [r0, #8]
    9766:	a901      	add	r1, sp, #4
    9768:	6894      	ldr	r4, [r2, #8]
    976a:	462a      	mov	r2, r5
    976c:	47a0      	blx	r4
    976e:	4604      	mov	r4, r0
	k_msleep(1);
    9770:	4628      	mov	r0, r5
    9772:	f7ff ffd9 	bl	9728 <k_msleep.isra.0>
}
    9776:	4620      	mov	r0, r4
    9778:	b005      	add	sp, #20
    977a:	bd30      	pop	{r4, r5, pc}

0000977c <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
    977c:	b410      	push	{r4}
    977e:	6884      	ldr	r4, [r0, #8]
    9780:	68a4      	ldr	r4, [r4, #8]
    9782:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
    9784:	bc10      	pop	{r4}
    9786:	4760      	bx	ip

00009788 <i2c_write_dt>:
{
    9788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    978a:	2302      	movs	r3, #2
	msg.len = num_bytes;
    978c:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    9790:	f88d 300c 	strb.w	r3, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
    9794:	2201      	movs	r2, #1
    9796:	8883      	ldrh	r3, [r0, #4]
    9798:	6800      	ldr	r0, [r0, #0]
    979a:	a901      	add	r1, sp, #4
    979c:	f7ff ffee 	bl	977c <i2c_transfer>
}
    97a0:	b005      	add	sp, #20
    97a2:	f85d fb04 	ldr.w	pc, [sp], #4

000097a6 <z_log_msg_static_create.constprop.0>:
    97a6:	2300      	movs	r3, #0
    97a8:	f7f9 bb78 	b.w	2e9c <z_impl_z_log_msg_static_create>

000097ac <read_register.constprop.0.isra.0>:
static int read_register(const struct device *dev, uint8_t reg, uint8_t *buf)
    97ac:	b500      	push	{lr}
    97ae:	b089      	sub	sp, #36	; 0x24
	uint8_t tx_buf[1] = {reg};
    97b0:	23e7      	movs	r3, #231	; 0xe7
    97b2:	f88d 3004 	strb.w	r3, [sp, #4]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    97b6:	ab01      	add	r3, sp, #4
    97b8:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    97ba:	2301      	movs	r3, #1
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
    97bc:	e9cd 1305 	strd	r1, r3, [sp, #20]
	msg[0].len = num_write;
    97c0:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    97c2:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    97c4:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
    97c6:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    97ca:	f88d 301c 	strb.w	r3, [sp, #28]

	return i2c_transfer(dev, msg, 2, addr);
    97ce:	2202      	movs	r2, #2
    97d0:	8883      	ldrh	r3, [r0, #4]
    97d2:	6800      	ldr	r0, [r0, #0]
    97d4:	a902      	add	r1, sp, #8
    97d6:	f7ff ffd1 	bl	977c <i2c_transfer>
}
    97da:	b009      	add	sp, #36	; 0x24
    97dc:	f85d fb04 	ldr.w	pc, [sp], #4

000097e0 <write_register>:
{
    97e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct ms8607h_config *cfg = dev->config;
    97e2:	6845      	ldr	r5, [r0, #4]
	uint8_t rx_buf[1] = {0x0};
    97e4:	2300      	movs	r3, #0
{
    97e6:	460c      	mov	r4, r1
	rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    97e8:	4628      	mov	r0, r5
    97ea:	4669      	mov	r1, sp
	uint8_t rx_buf[1] = {0x0};
    97ec:	f88d 3000 	strb.w	r3, [sp]
	uint8_t tx_buf[2] = {0x00};
    97f0:	f8ad 3004 	strh.w	r3, [sp, #4]
	rc = read_register(dev, HSENSOR_READ_USER_REG_COMMAND, rx_buf);
    97f4:	f7ff ffda 	bl	97ac <read_register.constprop.0.isra.0>
	if (rc != 0) {
    97f8:	b990      	cbnz	r0, 9820 <write_register+0x40>
	rx_buf[0] &= HSENSOR_USER_REG_RESERVED_MASK;
    97fa:	f89d 3000 	ldrb.w	r3, [sp]
	tx_buf[0] = HSENSOR_WRITE_USER_REG_COMMAND;
    97fe:	22e6      	movs	r2, #230	; 0xe6
	rx_buf[0] &= HSENSOR_USER_REG_RESERVED_MASK;
    9800:	f003 0338 	and.w	r3, r3, #56	; 0x38
    9804:	f024 0438 	bic.w	r4, r4, #56	; 0x38
    9808:	4323      	orrs	r3, r4
	tx_buf[0] = HSENSOR_WRITE_USER_REG_COMMAND;
    980a:	f88d 2004 	strb.w	r2, [sp, #4]
	rc = i2c_write_dt(&cfg->i2c, tx_buf, sizeof(tx_buf));
    980e:	a901      	add	r1, sp, #4
    9810:	2202      	movs	r2, #2
    9812:	4628      	mov	r0, r5
	rx_buf[0] |= (value & ~HSENSOR_USER_REG_RESERVED_MASK);
    9814:	f88d 3000 	strb.w	r3, [sp]
	tx_buf[1] = rx_buf[0];
    9818:	f88d 3005 	strb.w	r3, [sp, #5]
	rc = i2c_write_dt(&cfg->i2c, tx_buf, sizeof(tx_buf));
    981c:	f7ff ffb4 	bl	9788 <i2c_write_dt>
}
    9820:	b003      	add	sp, #12
    9822:	bd30      	pop	{r4, r5, pc}

00009824 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9824:	f7fe be7c 	b.w	8520 <nrf_cc3xx_platform_init_no_rng>

00009828 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    9828:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    982a:	f7f9 ffe1 	bl	37f0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    982e:	f7fa f8b5 	bl	399c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    9832:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    9836:	f7fe be73 	b.w	8520 <nrf_cc3xx_platform_init_no_rng>

0000983a <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    983a:	4700      	bx	r0

0000983c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    983c:	f000 bace 	b.w	9ddc <z_impl_k_busy_wait>

00009840 <nrfx_clock_enable>:
{
    9840:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9842:	2000      	movs	r0, #0
    9844:	f7fa f968 	bl	3b18 <arch_irq_is_enabled>
    9848:	b908      	cbnz	r0, 984e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    984a:	f7fa f943 	bl	3ad4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    984e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9852:	2200      	movs	r2, #0
    9854:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    9858:	bd08      	pop	{r3, pc}

0000985a <nrfx_clock_start>:
{
    985a:	b508      	push	{r3, lr}
    switch (domain)
    985c:	b110      	cbz	r0, 9864 <nrfx_clock_start+0xa>
    985e:	2801      	cmp	r0, #1
    9860:	d02c      	beq.n	98bc <nrfx_clock_start+0x62>
}
    9862:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9868:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    986c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9870:	03c8      	lsls	r0, r1, #15
    9872:	d40b      	bmi.n	988c <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    9874:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    9878:	07d9      	lsls	r1, r3, #31
    987a:	d50f      	bpl.n	989c <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    987c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9880:	079b      	lsls	r3, r3, #30
    9882:	d408      	bmi.n	9896 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    9884:	2302      	movs	r3, #2
    9886:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    988a:	e7ea      	b.n	9862 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    988c:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9890:	2b01      	cmp	r3, #1
    9892:	d004      	beq.n	989e <nrfx_clock_start+0x44>
    9894:	b113      	cbz	r3, 989c <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9896:	2000      	movs	r0, #0
    9898:	f7fc fd9e 	bl	63d8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    989c:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    989e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    98a2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    98a6:	2300      	movs	r3, #0
    98a8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    98ac:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    98b0:	2302      	movs	r3, #2
    98b2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    98b6:	2301      	movs	r3, #1
    98b8:	6093      	str	r3, [r2, #8]
}
    98ba:	e7d2      	b.n	9862 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    98bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    98c0:	2200      	movs	r2, #0
    98c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    98c6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    98ca:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    98ce:	6018      	str	r0, [r3, #0]
}
    98d0:	e7c7      	b.n	9862 <nrfx_clock_start+0x8>

000098d2 <nrfx_clock_stop>:
    clock_stop(domain);
    98d2:	f7fc bd81 	b.w	63d8 <clock_stop>

000098d6 <nrf_gpio_reconfigure>:
{
    98d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    98d8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    98da:	a801      	add	r0, sp, #4
{
    98dc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    98e0:	4616      	mov	r6, r2
    98e2:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    98e4:	f7fc fe20 	bl	6528 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    98e8:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    98ea:	f1b6 0c00 	subs.w	ip, r6, #0
    98ee:	bf18      	it	ne
    98f0:	f04f 0c01 	movne.w	ip, #1
    98f4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    98f8:	1e0b      	subs	r3, r1, #0
    98fa:	bf18      	it	ne
    98fc:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    98fe:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9900:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9904:	bf14      	ite	ne
    9906:	f04f 0c0c 	movne.w	ip, #12
    990a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    990e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9910:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9914:	bf14      	ite	ne
    9916:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    991a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    991e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9920:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9924:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9928:	bf14      	ite	ne
    992a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    992e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9932:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    9936:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    993a:	b101      	cbz	r1, 993e <nrf_gpio_reconfigure+0x68>
    993c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    993e:	b10e      	cbz	r6, 9944 <nrf_gpio_reconfigure+0x6e>
    9940:	7836      	ldrb	r6, [r6, #0]
    9942:	0076      	lsls	r6, r6, #1
    9944:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9946:	b10d      	cbz	r5, 994c <nrf_gpio_reconfigure+0x76>
    9948:	782d      	ldrb	r5, [r5, #0]
    994a:	00ad      	lsls	r5, r5, #2
    994c:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    994e:	b10c      	cbz	r4, 9954 <nrf_gpio_reconfigure+0x7e>
    9950:	7824      	ldrb	r4, [r4, #0]
    9952:	0224      	lsls	r4, r4, #8
    9954:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9956:	b10f      	cbz	r7, 995c <nrf_gpio_reconfigure+0x86>
    9958:	783f      	ldrb	r7, [r7, #0]
    995a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    995c:	430c      	orrs	r4, r1
    995e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    9960:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    9964:	b003      	add	sp, #12
    9966:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009968 <nrf_gpio_cfg_sense_set>:
{
    9968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    996a:	f10d 030f 	add.w	r3, sp, #15
    996e:	9301      	str	r3, [sp, #4]
    9970:	2300      	movs	r3, #0
{
    9972:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9976:	9300      	str	r3, [sp, #0]
    9978:	461a      	mov	r2, r3
    997a:	4619      	mov	r1, r3
    997c:	f7ff ffab 	bl	98d6 <nrf_gpio_reconfigure>
}
    9980:	b005      	add	sp, #20
    9982:	f85d fb04 	ldr.w	pc, [sp], #4

00009986 <twi_transfer>:
{
    9986:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9988:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    998c:	b12b      	cbz	r3, 999a <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    998e:	2300      	movs	r3, #0
    9990:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    9994:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    9998:	2301      	movs	r3, #1
    if (p_cb->error)
    999a:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    999e:	b322      	cbz	r2, 99ea <twi_transfer+0x64>
    99a0:	2200      	movs	r2, #0
    99a2:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    99a6:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    99aa:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    99ae:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
    99b2:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    99b6:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
    99ba:	2b00      	cmp	r3, #0
    99bc:	d079      	beq.n	9ab2 <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    99be:	2200      	movs	r2, #0
    99c0:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
    99c4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    99c8:	2a00      	cmp	r2, #0
    99ca:	d137      	bne.n	9a3c <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    99cc:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    99ce:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    99d0:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    99d2:	bf1f      	itttt	ne
    99d4:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    99d6:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    99da:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
    99de:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    99e0:	f083 0301 	eor.w	r3, r3, #1
    99e4:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    99e8:	e028      	b.n	9a3c <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    99ea:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    99ee:	b114      	cbz	r4, 99f6 <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    99f0:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    99f4:	e00e      	b.n	9a14 <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    99f6:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    99fa:	b36a      	cbz	r2, 9a58 <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    99fc:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
    9a00:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    9a04:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    9a06:	3201      	adds	r2, #1
    9a08:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9a0a:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    9a0e:	b145      	cbz	r5, 9a22 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a10:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
    9a14:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a18:	2201      	movs	r2, #1
    9a1a:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
    9a1c:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
    9a20:	e7cb      	b.n	99ba <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    9a22:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    9a24:	42a2      	cmp	r2, r4
    9a26:	d204      	bcs.n	9a32 <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    9a28:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
    9a2a:	5ca2      	ldrb	r2, [r4, r2]
    9a2c:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    9a30:	e7c3      	b.n	99ba <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
    9a32:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    9a36:	b11a      	cbz	r2, 9a40 <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a38:	2301      	movs	r3, #1
    9a3a:	61c3      	str	r3, [r0, #28]
                    return false;
    9a3c:	2000      	movs	r0, #0
}
    9a3e:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    9a40:	6a0a      	ldr	r2, [r1, #32]
    9a42:	f012 0f40 	tst.w	r2, #64	; 0x40
    9a46:	f04f 0201 	mov.w	r2, #1
    9a4a:	d003      	beq.n	9a54 <twi_transfer+0xce>
    9a4c:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    9a4e:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    9a52:	e7f3      	b.n	9a3c <twi_transfer+0xb6>
    9a54:	6142      	str	r2, [r0, #20]
    9a56:	e7b0      	b.n	99ba <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9a58:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    9a5c:	2c00      	cmp	r4, #0
    9a5e:	d0ac      	beq.n	99ba <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a60:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    9a64:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9a68:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    9a6c:	2c00      	cmp	r4, #0
    9a6e:	d1bf      	bne.n	99f0 <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    9a70:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    9a72:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    9a74:	42a2      	cmp	r2, r4
    9a76:	d2a0      	bcs.n	99ba <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    9a78:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    9a7a:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
    9a7e:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
    9a80:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    9a82:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    9a84:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    9a86:	1e65      	subs	r5, r4, #1
    9a88:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
    9a8a:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    9a8c:	d108      	bne.n	9aa0 <twi_transfer+0x11a>
    9a8e:	6a0a      	ldr	r2, [r1, #32]
    9a90:	0654      	lsls	r4, r2, #25
    9a92:	d402      	bmi.n	9a9a <twi_transfer+0x114>
    p_reg->SHORTS = mask;
    9a94:	2202      	movs	r2, #2
    9a96:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a9a:	2201      	movs	r2, #1
    9a9c:	6202      	str	r2, [r0, #32]
    9a9e:	e78c      	b.n	99ba <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    9aa0:	42a2      	cmp	r2, r4
    9aa2:	d1fa      	bne.n	9a9a <twi_transfer+0x114>
    9aa4:	6a0a      	ldr	r2, [r1, #32]
    9aa6:	0652      	lsls	r2, r2, #25
    9aa8:	d587      	bpl.n	99ba <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    9aaa:	2302      	movs	r3, #2
    9aac:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    9ab0:	e7c4      	b.n	9a3c <twi_transfer+0xb6>
    return true;
    9ab2:	2001      	movs	r0, #1
    9ab4:	e7c3      	b.n	9a3e <twi_transfer+0xb8>

00009ab6 <nrf_gpio_pin_set>:
{
    9ab6:	b507      	push	{r0, r1, r2, lr}
    9ab8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9aba:	a801      	add	r0, sp, #4
    9abc:	f7fd fafe 	bl	70bc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9ac0:	9a01      	ldr	r2, [sp, #4]
    9ac2:	2301      	movs	r3, #1
    9ac4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9ac6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    9aca:	b003      	add	sp, #12
    9acc:	f85d fb04 	ldr.w	pc, [sp], #4

00009ad0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    9ad0:	f7fd bb66 	b.w	71a0 <_DoInit>

00009ad4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    9ad4:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    9ad6:	f7ff fffb 	bl	9ad0 <SEGGER_RTT_Init>

	return 0;
}
    9ada:	2000      	movs	r0, #0
    9adc:	bd08      	pop	{r3, pc}

00009ade <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    9ade:	4770      	bx	lr

00009ae0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    9ae0:	b140      	cbz	r0, 9af4 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    9ae2:	68c3      	ldr	r3, [r0, #12]
    9ae4:	7858      	ldrb	r0, [r3, #1]
    9ae6:	f010 0001 	ands.w	r0, r0, #1
    9aea:	bf1e      	ittt	ne
    9aec:	7818      	ldrbne	r0, [r3, #0]
    9aee:	fab0 f080 	clzne	r0, r0
    9af2:	0940      	lsrne	r0, r0, #5
}
    9af4:	4770      	bx	lr

00009af6 <z_early_memset>:
	(void) memset(dst, c, n);
    9af6:	f7ff bc71 	b.w	93dc <memset>

00009afa <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    9afa:	f7ff bc64 	b.w	93c6 <memcpy>

00009afe <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9afe:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    9b02:	4313      	orrs	r3, r2
    9b04:	f013 0303 	ands.w	r3, r3, #3
    9b08:	d10c      	bne.n	9b24 <create_free_list+0x26>
	slab->free_list = NULL;
    9b0a:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    9b0c:	6881      	ldr	r1, [r0, #8]
    9b0e:	4299      	cmp	r1, r3
    9b10:	d801      	bhi.n	9b16 <create_free_list+0x18>
	return 0;
    9b12:	2000      	movs	r0, #0
    9b14:	4770      	bx	lr
		*(char **)p = slab->free_list;
    9b16:	6941      	ldr	r1, [r0, #20]
    9b18:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    9b1a:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    9b1c:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    9b1e:	3301      	adds	r3, #1
		p += slab->block_size;
    9b20:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    9b22:	e7f3      	b.n	9b0c <create_free_list+0xe>
		return -EINVAL;
    9b24:	f06f 0015 	mvn.w	r0, #21
}
    9b28:	4770      	bx	lr

00009b2a <k_mem_slab_init>:
{
    9b2a:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    9b2c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    9b30:	2300      	movs	r3, #0
	slab->buffer = buffer;
    9b32:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    9b34:	6183      	str	r3, [r0, #24]
{
    9b36:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    9b38:	f7ff ffe1 	bl	9afe <create_free_list>
	if (rc < 0) {
    9b3c:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    9b3e:	bfa8      	it	ge
    9b40:	e9c4 4400 	strdge	r4, r4, [r4]
}
    9b44:	bd10      	pop	{r4, pc}

00009b46 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    9b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b48:	4604      	mov	r4, r0
    9b4a:	460d      	mov	r5, r1
	__asm__ volatile(
    9b4c:	f04f 0320 	mov.w	r3, #32
    9b50:	f3ef 8611 	mrs	r6, BASEPRI
    9b54:	f383 8812 	msr	BASEPRI_MAX, r3
    9b58:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    9b5c:	6947      	ldr	r7, [r0, #20]
    9b5e:	b97f      	cbnz	r7, 9b80 <k_mem_slab_free+0x3a>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    9b60:	f000 f8de 	bl	9d20 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    9b64:	b160      	cbz	r0, 9b80 <k_mem_slab_free+0x3a>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    9b66:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    9b68:	6142      	str	r2, [r0, #20]
    9b6a:	f8c0 70ac 	str.w	r7, [r0, #172]	; 0xac
			z_ready_thread(pending_thread);
    9b6e:	f000 f878 	bl	9c62 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    9b72:	4631      	mov	r1, r6
    9b74:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    9b78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    9b7c:	f7fe b92e 	b.w	7ddc <z_reschedule>
	**(char ***) mem = slab->free_list;
    9b80:	682b      	ldr	r3, [r5, #0]
    9b82:	6962      	ldr	r2, [r4, #20]
    9b84:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    9b86:	682b      	ldr	r3, [r5, #0]
    9b88:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    9b8a:	69a3      	ldr	r3, [r4, #24]
    9b8c:	3b01      	subs	r3, #1
    9b8e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    9b90:	f386 8811 	msr	BASEPRI, r6
    9b94:	f3bf 8f6f 	isb	sy
}
    9b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009b9a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9b9a:	f3ef 8005 	mrs	r0, IPSR
}
    9b9e:	3800      	subs	r0, #0
    9ba0:	bf18      	it	ne
    9ba2:	2001      	movne	r0, #1
    9ba4:	4770      	bx	lr

00009ba6 <k_thread_name_get>:
}
    9ba6:	3074      	adds	r0, #116	; 0x74
    9ba8:	4770      	bx	lr

00009baa <z_pm_save_idle_exit>:
{
    9baa:	b508      	push	{r3, lr}
	pm_system_resume();
    9bac:	f7f9 fd16 	bl	35dc <pm_system_resume>
}
    9bb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    9bb4:	f7ff bd95 	b.w	96e2 <sys_clock_idle_exit>

00009bb8 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    9bb8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9bbc:	428b      	cmp	r3, r1
    9bbe:	d001      	beq.n	9bc4 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    9bc0:	f7fe b8c6 	b.w	7d50 <z_set_prio>
}
    9bc4:	2000      	movs	r0, #0
    9bc6:	4770      	bx	lr

00009bc8 <z_impl_k_mutex_init>:
{
    9bc8:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9bca:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    9bcc:	e9c3 0002 	strd	r0, r0, [r3, #8]
    9bd0:	e9c3 3300 	strd	r3, r3, [r3]
}
    9bd4:	4770      	bx	lr

00009bd6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    9bd6:	b13a      	cbz	r2, 9be8 <z_impl_k_sem_init+0x12>
    9bd8:	428a      	cmp	r2, r1
    9bda:	d305      	bcc.n	9be8 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    9bdc:	e9c0 1202 	strd	r1, r2, [r0, #8]
    9be0:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    9be4:	2000      	movs	r0, #0
    9be6:	4770      	bx	lr
		return -EINVAL;
    9be8:	f06f 0015 	mvn.w	r0, #21
}
    9bec:	4770      	bx	lr

00009bee <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    9bee:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    9bf2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9bf4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9bf6:	2300      	movs	r3, #0
	node->prev = NULL;
    9bf8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    9bfc:	4770      	bx	lr

00009bfe <unpend_thread_no_timeout>:
{
    9bfe:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    9c00:	f7ff fff5 	bl	9bee <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9c04:	7b43      	ldrb	r3, [r0, #13]
    9c06:	f023 0302 	bic.w	r3, r3, #2
    9c0a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    9c0c:	2300      	movs	r3, #0
    9c0e:	6083      	str	r3, [r0, #8]
}
    9c10:	bd08      	pop	{r3, pc}

00009c12 <add_to_waitq_locked>:
{
    9c12:	b538      	push	{r3, r4, r5, lr}
    9c14:	4604      	mov	r4, r0
    9c16:	460d      	mov	r5, r1
	unready_thread(thread);
    9c18:	f7fe f81c 	bl	7c54 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    9c1c:	7b63      	ldrb	r3, [r4, #13]
    9c1e:	f043 0302 	orr.w	r3, r3, #2
    9c22:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    9c24:	b1e5      	cbz	r5, 9c60 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    9c26:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    9c28:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9c2a:	429d      	cmp	r5, r3
    9c2c:	d109      	bne.n	9c42 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    9c2e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    9c30:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    9c34:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9c36:	606c      	str	r4, [r5, #4]
}
    9c38:	e012      	b.n	9c60 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    9c3a:	686a      	ldr	r2, [r5, #4]
    9c3c:	4293      	cmp	r3, r2
    9c3e:	d0f6      	beq.n	9c2e <add_to_waitq_locked+0x1c>
    9c40:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9c42:	2b00      	cmp	r3, #0
    9c44:	d0f3      	beq.n	9c2e <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    9c46:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    9c4a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    9c4e:	428a      	cmp	r2, r1
    9c50:	d0f3      	beq.n	9c3a <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9c52:	4291      	cmp	r1, r2
    9c54:	ddf1      	ble.n	9c3a <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    9c56:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9c58:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9c5c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9c5e:	605c      	str	r4, [r3, #4]
}
    9c60:	bd38      	pop	{r3, r4, r5, pc}

00009c62 <z_ready_thread>:
{
    9c62:	b510      	push	{r4, lr}
	__asm__ volatile(
    9c64:	f04f 0320 	mov.w	r3, #32
    9c68:	f3ef 8411 	mrs	r4, BASEPRI
    9c6c:	f383 8812 	msr	BASEPRI_MAX, r3
    9c70:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    9c74:	f7fd ffba 	bl	7bec <ready_thread>
	__asm__ volatile(
    9c78:	f384 8811 	msr	BASEPRI, r4
    9c7c:	f3bf 8f6f 	isb	sy
}
    9c80:	bd10      	pop	{r4, pc}

00009c82 <z_unpend_thread_no_timeout>:
{
    9c82:	b508      	push	{r3, lr}
	__asm__ volatile(
    9c84:	f04f 0220 	mov.w	r2, #32
    9c88:	f3ef 8111 	mrs	r1, BASEPRI
    9c8c:	f382 8812 	msr	BASEPRI_MAX, r2
    9c90:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    9c94:	6883      	ldr	r3, [r0, #8]
    9c96:	b10b      	cbz	r3, 9c9c <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    9c98:	f7ff ffb1 	bl	9bfe <unpend_thread_no_timeout>
	__asm__ volatile(
    9c9c:	f381 8811 	msr	BASEPRI, r1
    9ca0:	f3bf 8f6f 	isb	sy
}
    9ca4:	bd08      	pop	{r3, pc}

00009ca6 <z_sched_wake_thread>:
{
    9ca6:	b538      	push	{r3, r4, r5, lr}
    9ca8:	4604      	mov	r4, r0
	__asm__ volatile(
    9caa:	f04f 0320 	mov.w	r3, #32
    9cae:	f3ef 8511 	mrs	r5, BASEPRI
    9cb2:	f383 8812 	msr	BASEPRI_MAX, r3
    9cb6:	f3bf 8f6f 	isb	sy
		if (!killed) {
    9cba:	7b43      	ldrb	r3, [r0, #13]
    9cbc:	f013 0f28 	tst.w	r3, #40	; 0x28
    9cc0:	d10b      	bne.n	9cda <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    9cc2:	6883      	ldr	r3, [r0, #8]
    9cc4:	b10b      	cbz	r3, 9cca <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    9cc6:	f7ff ff9a 	bl	9bfe <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9cca:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    9ccc:	b951      	cbnz	r1, 9ce4 <z_sched_wake_thread+0x3e>
    9cce:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    9cd2:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    9cd4:	4620      	mov	r0, r4
    9cd6:	f7fd ff89 	bl	7bec <ready_thread>
	__asm__ volatile(
    9cda:	f385 8811 	msr	BASEPRI, r5
    9cde:	f3bf 8f6f 	isb	sy
}
    9ce2:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    9ce4:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    9ce8:	e7f3      	b.n	9cd2 <z_sched_wake_thread+0x2c>

00009cea <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    9cea:	2101      	movs	r1, #1
    9cec:	3818      	subs	r0, #24
    9cee:	f7ff bfda 	b.w	9ca6 <z_sched_wake_thread>

00009cf2 <z_unpend1_no_timeout>:
{
    9cf2:	b508      	push	{r3, lr}
    9cf4:	4603      	mov	r3, r0
	__asm__ volatile(
    9cf6:	f04f 0220 	mov.w	r2, #32
    9cfa:	f3ef 8111 	mrs	r1, BASEPRI
    9cfe:	f382 8812 	msr	BASEPRI_MAX, r2
    9d02:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9d06:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9d08:	4283      	cmp	r3, r0
    9d0a:	d007      	beq.n	9d1c <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    9d0c:	b108      	cbz	r0, 9d12 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    9d0e:	f7ff ff76 	bl	9bfe <unpend_thread_no_timeout>
	__asm__ volatile(
    9d12:	f381 8811 	msr	BASEPRI, r1
    9d16:	f3bf 8f6f 	isb	sy
}
    9d1a:	bd08      	pop	{r3, pc}
    9d1c:	2000      	movs	r0, #0
    9d1e:	e7f8      	b.n	9d12 <z_unpend1_no_timeout+0x20>

00009d20 <z_unpend_first_thread>:
{
    9d20:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9d22:	f04f 0320 	mov.w	r3, #32
    9d26:	f3ef 8511 	mrs	r5, BASEPRI
    9d2a:	f383 8812 	msr	BASEPRI_MAX, r3
    9d2e:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9d32:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9d34:	42a0      	cmp	r0, r4
    9d36:	d00d      	beq.n	9d54 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    9d38:	b134      	cbz	r4, 9d48 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    9d3a:	4620      	mov	r0, r4
    9d3c:	f7ff ff5f 	bl	9bfe <unpend_thread_no_timeout>
    9d40:	f104 0018 	add.w	r0, r4, #24
    9d44:	f000 f81e 	bl	9d84 <z_abort_timeout>
	__asm__ volatile(
    9d48:	f385 8811 	msr	BASEPRI, r5
    9d4c:	f3bf 8f6f 	isb	sy
}
    9d50:	4620      	mov	r0, r4
    9d52:	bd38      	pop	{r3, r4, r5, pc}
    9d54:	2400      	movs	r4, #0
    9d56:	e7f7      	b.n	9d48 <z_unpend_first_thread+0x28>

00009d58 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9d58:	4603      	mov	r3, r0
    9d5a:	b920      	cbnz	r0, 9d66 <z_reschedule_irqlock+0xe>
    9d5c:	f3ef 8205 	mrs	r2, IPSR
    9d60:	b90a      	cbnz	r2, 9d66 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    9d62:	f7f9 bf1f 	b.w	3ba4 <arch_swap>
    9d66:	f383 8811 	msr	BASEPRI, r3
    9d6a:	f3bf 8f6f 	isb	sy
}
    9d6e:	4770      	bx	lr

00009d70 <z_reschedule_unlocked>:
	__asm__ volatile(
    9d70:	f04f 0320 	mov.w	r3, #32
    9d74:	f3ef 8011 	mrs	r0, BASEPRI
    9d78:	f383 8812 	msr	BASEPRI_MAX, r3
    9d7c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9d80:	f7ff bfea 	b.w	9d58 <z_reschedule_irqlock>

00009d84 <z_abort_timeout>:
{
    9d84:	b510      	push	{r4, lr}
    9d86:	f04f 0220 	mov.w	r2, #32
    9d8a:	f3ef 8411 	mrs	r4, BASEPRI
    9d8e:	f382 8812 	msr	BASEPRI_MAX, r2
    9d92:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    9d96:	6803      	ldr	r3, [r0, #0]
    9d98:	b13b      	cbz	r3, 9daa <z_abort_timeout+0x26>
			remove_timeout(to);
    9d9a:	f7fe fa03 	bl	81a4 <remove_timeout>
			ret = 0;
    9d9e:	2000      	movs	r0, #0
	__asm__ volatile(
    9da0:	f384 8811 	msr	BASEPRI, r4
    9da4:	f3bf 8f6f 	isb	sy
}
    9da8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    9daa:	f06f 0015 	mvn.w	r0, #21
    9dae:	e7f7      	b.n	9da0 <z_abort_timeout+0x1c>

00009db0 <z_get_next_timeout_expiry>:
{
    9db0:	b510      	push	{r4, lr}
	__asm__ volatile(
    9db2:	f04f 0320 	mov.w	r3, #32
    9db6:	f3ef 8411 	mrs	r4, BASEPRI
    9dba:	f383 8812 	msr	BASEPRI_MAX, r3
    9dbe:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    9dc2:	f7fe f9cf 	bl	8164 <next_timeout>
	__asm__ volatile(
    9dc6:	f384 8811 	msr	BASEPRI, r4
    9dca:	f3bf 8f6f 	isb	sy
}
    9dce:	bd10      	pop	{r4, pc}

00009dd0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    9dd0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9dd2:	f7fe fae3 	bl	839c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9dd6:	bd08      	pop	{r3, pc}

00009dd8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    9dd8:	f7fe bae0 	b.w	839c <sys_clock_tick_get>

00009ddc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9ddc:	b108      	cbz	r0, 9de2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9dde:	f7fa bca5 	b.w	472c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    9de2:	4770      	bx	lr

00009de4 <k_timer_init>:
	timer->status = 0U;
    9de4:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    9de6:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    9dea:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    9dee:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    9df2:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    9df6:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    9df8:	6343      	str	r3, [r0, #52]	; 0x34
}
    9dfa:	4770      	bx	lr

00009dfc <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    9dfc:	b510      	push	{r4, lr}
    9dfe:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    9e00:	f7ff ffc0 	bl	9d84 <z_abort_timeout>

	if (inactive) {
    9e04:	b9b0      	cbnz	r0, 9e34 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    9e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9e08:	b10b      	cbz	r3, 9e0e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    9e0a:	4620      	mov	r0, r4
    9e0c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    9e0e:	f104 0018 	add.w	r0, r4, #24
    9e12:	f7ff ff6e 	bl	9cf2 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    9e16:	b168      	cbz	r0, 9e34 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    9e18:	f7ff ff23 	bl	9c62 <z_ready_thread>
	__asm__ volatile(
    9e1c:	f04f 0320 	mov.w	r3, #32
    9e20:	f3ef 8011 	mrs	r0, BASEPRI
    9e24:	f383 8812 	msr	BASEPRI_MAX, r3
    9e28:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    9e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e30:	f7ff bf92 	b.w	9d58 <z_reschedule_irqlock>
    9e34:	bd10      	pop	{r4, pc}

00009e36 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    9e36:	4770      	bx	lr
